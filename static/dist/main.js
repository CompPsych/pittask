/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/micromodal/dist/micromodal.es.js":
/*!*******************************************************!*\
  !*** ./node_modules/micromodal/dist/micromodal.es.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar MicroModal = function () {\n\n  var FOCUSABLE_ELEMENTS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n\n  var Modal = /*#__PURE__*/function () {\n    function Modal(_ref) {\n      var targetModal = _ref.targetModal,\n          _ref$triggers = _ref.triggers,\n          triggers = _ref$triggers === void 0 ? [] : _ref$triggers,\n          _ref$onShow = _ref.onShow,\n          onShow = _ref$onShow === void 0 ? function () {} : _ref$onShow,\n          _ref$onClose = _ref.onClose,\n          onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n          _ref$openTrigger = _ref.openTrigger,\n          openTrigger = _ref$openTrigger === void 0 ? 'data-micromodal-trigger' : _ref$openTrigger,\n          _ref$closeTrigger = _ref.closeTrigger,\n          closeTrigger = _ref$closeTrigger === void 0 ? 'data-micromodal-close' : _ref$closeTrigger,\n          _ref$openClass = _ref.openClass,\n          openClass = _ref$openClass === void 0 ? 'is-open' : _ref$openClass,\n          _ref$disableScroll = _ref.disableScroll,\n          disableScroll = _ref$disableScroll === void 0 ? false : _ref$disableScroll,\n          _ref$disableFocus = _ref.disableFocus,\n          disableFocus = _ref$disableFocus === void 0 ? false : _ref$disableFocus,\n          _ref$awaitCloseAnimat = _ref.awaitCloseAnimation,\n          awaitCloseAnimation = _ref$awaitCloseAnimat === void 0 ? false : _ref$awaitCloseAnimat,\n          _ref$awaitOpenAnimati = _ref.awaitOpenAnimation,\n          awaitOpenAnimation = _ref$awaitOpenAnimati === void 0 ? false : _ref$awaitOpenAnimati,\n          _ref$debugMode = _ref.debugMode,\n          debugMode = _ref$debugMode === void 0 ? false : _ref$debugMode;\n\n      _classCallCheck(this, Modal);\n\n      // Save a reference of the modal\n      this.modal = document.getElementById(targetModal); // Save a reference to the passed config\n\n      this.config = {\n        debugMode: debugMode,\n        disableScroll: disableScroll,\n        openTrigger: openTrigger,\n        closeTrigger: closeTrigger,\n        openClass: openClass,\n        onShow: onShow,\n        onClose: onClose,\n        awaitCloseAnimation: awaitCloseAnimation,\n        awaitOpenAnimation: awaitOpenAnimation,\n        disableFocus: disableFocus\n      }; // Register click events only if pre binding eventListeners\n\n      if (triggers.length > 0) this.registerTriggers.apply(this, _toConsumableArray(triggers)); // pre bind functions for event listeners\n\n      this.onClick = this.onClick.bind(this);\n      this.onKeydown = this.onKeydown.bind(this);\n    }\n    /**\n     * Loops through all openTriggers and binds click event\n     * @param  {array} triggers [Array of node elements]\n     * @return {void}\n     */\n\n\n    _createClass(Modal, [{\n      key: \"registerTriggers\",\n      value: function registerTriggers() {\n        var _this = this;\n\n        for (var _len = arguments.length, triggers = new Array(_len), _key = 0; _key < _len; _key++) {\n          triggers[_key] = arguments[_key];\n        }\n\n        triggers.filter(Boolean).forEach(function (trigger) {\n          trigger.addEventListener('click', function (event) {\n            return _this.showModal(event);\n          });\n        });\n      }\n    }, {\n      key: \"showModal\",\n      value: function showModal() {\n        var _this2 = this;\n\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        this.activeElement = document.activeElement;\n        this.modal.setAttribute('aria-hidden', 'false');\n        this.modal.classList.add(this.config.openClass);\n        this.scrollBehaviour('disable');\n        this.addEventListeners();\n\n        if (this.config.awaitOpenAnimation) {\n          var handler = function handler() {\n            _this2.modal.removeEventListener('animationend', handler, false);\n\n            _this2.setFocusToFirstNode();\n          };\n\n          this.modal.addEventListener('animationend', handler, false);\n        } else {\n          this.setFocusToFirstNode();\n        }\n\n        this.config.onShow(this.modal, this.activeElement, event);\n      }\n    }, {\n      key: \"closeModal\",\n      value: function closeModal() {\n        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        var modal = this.modal;\n        this.modal.setAttribute('aria-hidden', 'true');\n        this.removeEventListeners();\n        this.scrollBehaviour('enable');\n\n        if (this.activeElement && this.activeElement.focus) {\n          this.activeElement.focus();\n        }\n\n        this.config.onClose(this.modal, this.activeElement, event);\n\n        if (this.config.awaitCloseAnimation) {\n          var openClass = this.config.openClass; // <- old school ftw\n\n          this.modal.addEventListener('animationend', function handler() {\n            modal.classList.remove(openClass);\n            modal.removeEventListener('animationend', handler, false);\n          }, false);\n        } else {\n          modal.classList.remove(this.config.openClass);\n        }\n      }\n    }, {\n      key: \"closeModalById\",\n      value: function closeModalById(targetModal) {\n        this.modal = document.getElementById(targetModal);\n        if (this.modal) this.closeModal();\n      }\n    }, {\n      key: \"scrollBehaviour\",\n      value: function scrollBehaviour(toggle) {\n        if (!this.config.disableScroll) return;\n        var body = document.querySelector('body');\n\n        switch (toggle) {\n          case 'enable':\n            Object.assign(body.style, {\n              overflow: ''\n            });\n            break;\n\n          case 'disable':\n            Object.assign(body.style, {\n              overflow: 'hidden'\n            });\n            break;\n        }\n      }\n    }, {\n      key: \"addEventListeners\",\n      value: function addEventListeners() {\n        this.modal.addEventListener('touchstart', this.onClick);\n        this.modal.addEventListener('click', this.onClick);\n        document.addEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"removeEventListeners\",\n      value: function removeEventListeners() {\n        this.modal.removeEventListener('touchstart', this.onClick);\n        this.modal.removeEventListener('click', this.onClick);\n        document.removeEventListener('keydown', this.onKeydown);\n      }\n    }, {\n      key: \"onClick\",\n      value: function onClick(event) {\n        if (event.target.hasAttribute(this.config.closeTrigger)) {\n          this.closeModal(event);\n        }\n      }\n    }, {\n      key: \"onKeydown\",\n      value: function onKeydown(event) {\n        if (event.keyCode === 27) this.closeModal(event); // esc\n\n        if (event.keyCode === 9) this.retainFocus(event); // tab\n      }\n    }, {\n      key: \"getFocusableNodes\",\n      value: function getFocusableNodes() {\n        var nodes = this.modal.querySelectorAll(FOCUSABLE_ELEMENTS);\n        return Array.apply(void 0, _toConsumableArray(nodes));\n      }\n      /**\n       * Tries to set focus on a node which is not a close trigger\n       * if no other nodes exist then focuses on first close trigger\n       */\n\n    }, {\n      key: \"setFocusToFirstNode\",\n      value: function setFocusToFirstNode() {\n        var _this3 = this;\n\n        if (this.config.disableFocus) return;\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return; // remove nodes on whose click, the modal closes\n        // could not think of a better name :(\n\n        var nodesWhichAreNotCloseTargets = focusableNodes.filter(function (node) {\n          return !node.hasAttribute(_this3.config.closeTrigger);\n        });\n        if (nodesWhichAreNotCloseTargets.length > 0) nodesWhichAreNotCloseTargets[0].focus();\n        if (nodesWhichAreNotCloseTargets.length === 0) focusableNodes[0].focus();\n      }\n    }, {\n      key: \"retainFocus\",\n      value: function retainFocus(event) {\n        var focusableNodes = this.getFocusableNodes(); // no focusable nodes\n\n        if (focusableNodes.length === 0) return;\n        /**\n         * Filters nodes which are hidden to prevent\n         * focus leak outside modal\n         */\n\n        focusableNodes = focusableNodes.filter(function (node) {\n          return node.offsetParent !== null;\n        }); // if disableFocus is true\n\n        if (!this.modal.contains(document.activeElement)) {\n          focusableNodes[0].focus();\n        } else {\n          var focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n          if (event.shiftKey && focusedItemIndex === 0) {\n            focusableNodes[focusableNodes.length - 1].focus();\n            event.preventDefault();\n          }\n\n          if (!event.shiftKey && focusableNodes.length > 0 && focusedItemIndex === focusableNodes.length - 1) {\n            focusableNodes[0].focus();\n            event.preventDefault();\n          }\n        }\n      }\n    }]);\n\n    return Modal;\n  }();\n  /**\n   * Modal prototype ends.\n   * Here on code is responsible for detecting and\n   * auto binding event handlers on modal triggers\n   */\n  // Keep a reference to the opened modal\n\n\n  var activeModal = null;\n  /**\n   * Generates an associative array of modals and it's\n   * respective triggers\n   * @param  {array} triggers     An array of all triggers\n   * @param  {string} triggerAttr The data-attribute which triggers the module\n   * @return {array}\n   */\n\n  var generateTriggerMap = function generateTriggerMap(triggers, triggerAttr) {\n    var triggerMap = [];\n    triggers.forEach(function (trigger) {\n      var targetModal = trigger.attributes[triggerAttr].value;\n      if (triggerMap[targetModal] === undefined) triggerMap[targetModal] = [];\n      triggerMap[targetModal].push(trigger);\n    });\n    return triggerMap;\n  };\n  /**\n   * Validates whether a modal of the given id exists\n   * in the DOM\n   * @param  {number} id  The id of the modal\n   * @return {boolean}\n   */\n\n\n  var validateModalPresence = function validateModalPresence(id) {\n    if (!document.getElementById(id)) {\n      console.warn(\"MicroModal: \\u2757Seems like you have missed %c'\".concat(id, \"'\"), 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'ID somewhere in your code. Refer example below to resolve it.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<div class=\\\"modal\\\" id=\\\"\".concat(id, \"\\\"></div>\"));\n      return false;\n    }\n  };\n  /**\n   * Validates if there are modal triggers present\n   * in the DOM\n   * @param  {array} triggers An array of data-triggers\n   * @return {boolean}\n   */\n\n\n  var validateTriggerPresence = function validateTriggerPresence(triggers) {\n    if (triggers.length <= 0) {\n      console.warn(\"MicroModal: \\u2757Please specify at least one %c'micromodal-trigger'\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', 'data attribute.');\n      console.warn(\"%cExample:\", 'background-color: #f8f9fa;color: #50596c;font-weight: bold;', \"<a href=\\\"#\\\" data-micromodal-trigger=\\\"my-modal\\\"></a>\");\n      return false;\n    }\n  };\n  /**\n   * Checks if triggers and their corresponding modals\n   * are present in the DOM\n   * @param  {array} triggers   Array of DOM nodes which have data-triggers\n   * @param  {array} triggerMap Associative array of modals and their triggers\n   * @return {boolean}\n   */\n\n\n  var validateArgs = function validateArgs(triggers, triggerMap) {\n    validateTriggerPresence(triggers);\n    if (!triggerMap) return true;\n\n    for (var id in triggerMap) {\n      validateModalPresence(id);\n    }\n\n    return true;\n  };\n  /**\n   * Binds click handlers to all modal triggers\n   * @param  {object} config [description]\n   * @return void\n   */\n\n\n  var init = function init(config) {\n    // Create an config object with default openTrigger\n    var options = Object.assign({}, {\n      openTrigger: 'data-micromodal-trigger'\n    }, config); // Collects all the nodes with the trigger\n\n    var triggers = _toConsumableArray(document.querySelectorAll(\"[\".concat(options.openTrigger, \"]\"))); // Makes a mappings of modals with their trigger nodes\n\n\n    var triggerMap = generateTriggerMap(triggers, options.openTrigger); // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateArgs(triggers, triggerMap) === false) return; // For every target modal creates a new instance\n\n    for (var key in triggerMap) {\n      var value = triggerMap[key];\n      options.targetModal = key;\n      options.triggers = _toConsumableArray(value);\n      activeModal = new Modal(options); // eslint-disable-line no-new\n    }\n  };\n  /**\n   * Shows a particular modal\n   * @param  {string} targetModal [The id of the modal to display]\n   * @param  {object} config [The configuration object to pass]\n   * @return {void}\n   */\n\n\n  var show = function show(targetModal, config) {\n    var options = config || {};\n    options.targetModal = targetModal; // Checks if modals and triggers exist in dom\n\n    if (options.debugMode === true && validateModalPresence(targetModal) === false) return; // clear events in case previous modal wasn't close\n\n    if (activeModal) activeModal.removeEventListeners(); // stores reference to active modal\n\n    activeModal = new Modal(options); // eslint-disable-line no-new\n\n    activeModal.showModal();\n  };\n  /**\n   * Closes the active modal\n   * @param  {string} targetModal [The id of the modal to close]\n   * @return {void}\n   */\n\n\n  var close = function close(targetModal) {\n    targetModal ? activeModal.closeModalById(targetModal) : activeModal.closeModal();\n  };\n\n  return {\n    init: init,\n    show: show,\n    close: close\n  };\n}();\nwindow.MicroModal = MicroModal;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MicroModal);\n\n\n//# sourceURL=webpack:///./node_modules/micromodal/dist/micromodal.es.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-close-hit.js":
/*!********************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-close-hit.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['close-hit-questions'] = (function() {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'close-hit-questions',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default:  'Continue',\n          description: 'Label of the button.'\n        }\n      }\n    }\n    plugin.trial = function(display_element, trial) {\n\n      var response = {\n        trial_events: []\n      };\n\n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n\n      var timestamp_onload = jsPsych.totalTime();\n\n      var plugin_id_name = \"jspsych-survey-multi-choice\";\n  \n      var html = \"\";\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { margin-top: 2em; margin-bottom: 2em; }\"+\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\"+\n        \".jspsych-survey-multi-choice-text { font-size: 2rem;}\"+\n        \".jspsych-survey-multi-choice-preamble { font-size: 2.1rem; font-weight: bold;}\"+\n        \"textarea { padding: 1rem; color: #111; margin-bottom: 2rem; }\"+\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\"+\n        \".jspsych-survey-multi-choice-option { line-height: 2; }\"+\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\"+\n        \"label.jspsych-survey-multi-choice-text {margin-right: .7em;}\";\n      html += '</style>';\n  \n      // show preamble text\n      if(trial.preamble !== null){\n        html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">'+trial.preamble+'</div>';\n      }\n  \n      // form element\n      html += '<form id=\"jspsych-survey-multi-choice-form\">';\n      \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for(var i=0; i<trial.questions.length; i++){\n        question_order.push(i);\n      }\n      if(trial.randomize_question_order){\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n      \n      // add multiple-choice questions\n      for (var i = 0; i < trial.questions.length; i++) {\n        \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n        \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+'\"  data-name=\"'+question.name+'\">';\n  \n        // add question text\n        html += '<p class=\"jspsych-survey-multi-choice-text survey-multi-choice\">' + question.prompt \n        if(question.required){\n          html += \"<span class='required'>*</span>\";\n        }\n        html += '</p>';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\"+question_id+\"-\"+j;\n          var input_name = 'jspsych-survey-multi-choice-response-'+question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-'+question_id+'-'+j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"'+option_id_name+'\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<label class=\"jspsych-survey-multi-choice-text\" for=\"'+input_id+'\">'+question.options[j]+'</label>';\n          html += '<input type=\"radio\" name=\"'+input_name+'\" id=\"'+input_id+'\" value=\"'+question.options[j]+'\" '+required_attr+'></input>';\n          html += '</div>';\n        }\n  \n        html += '</div>';\n      }\n      html += '<div><textarea class=\"text_box\" rows=\"6\" cols=\"80\" name=\"comment\" placeholder=\"Please type your suggestions for us here...\" form=\"usrform\"></textarea></div>'\n      // add submit button\n      html += '<input type=\"submit\" id=\"'+plugin_id_name+'-next\" class=\"'+plugin_id_name+' jspsych-btn\"' + (trial.button_label ? ' value=\"'+trial.button_label + '\"': '') + '></input>';\n      html += '</form>';\n  \n      // render\n      display_element.innerHTML = html;\n\n       // function to handle key press responses\n       var after_response = function (info) {\n  \n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n  \n      document.querySelector('form').addEventListener('submit', function(event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n  \n        // create object to hold responses\n        var question_data = {};\n        for(var i=0; i<trial.questions.length; i++){\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-'+i);\n          var id = trial.questions[i].prompt;\n\n          if(match.querySelector(\"input[type=radio]:checked\") !== null){\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\n          } else {\n            var val = \"NA\";\n          }\n\n          var obje = {};\n          obje[id] = val;\n          Object.assign(question_data, obje);\n        }\n\n        var text_box = $('.text_box').val();\n        var obj = {};\n        if(text_box) {\n          obj['Text Response'] = text_box;\n        } else {\n          obj['Text Response'] = 'NA';\n        }\n\n        Object.assign(question_data, obj);\n\n        // kill keyboard listeners\n        if (typeof keyboardListener !== 'undefined') {\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\n        }\n        // save data\n        var trial_data = {\n            \"stage_name\": JSON.stringify(trial.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"events\": JSON.stringify(response.trial_events)\n        };\n        display_element.innerHTML = '';\n  \n        // next trial\n        jsPsych.finishTrial(trial_data);\n      });\n  \n      var startTime = performance.now();\n\n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-close-hit.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-deval-video.js":
/*!**********************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-deval-video.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * jspsych-video-keyboard-response\n * Josh de Leeuw\n *\n * plugin for playing a video file and getting a keyboard response\n *\n * documentation: docs.jspsych.org\n *\n **/\n\njsPsych.plugins[\"video-keyboard-response\"] = (function() {\n\n    var plugin = {};\n  \n    jsPsych.pluginAPI.registerPreload('video-keyboard-response', 'stimulus', 'video');\n  \n    plugin.info = {\n      name: 'video-keyboard-response',\n      description: '',\n      parameters: {\n        sources: {\n          type: jsPsych.plugins.parameterType.VIDEO,\n          pretty_name: 'Video',\n          default: undefined,\n          description: 'The video file to play.'\n        },\n        choices: {\n          type: jsPsych.plugins.parameterType.KEYCODE,\n          pretty_name: 'Choices',\n          array: true,\n          default: jsPsych.ALL_KEYS,\n          description: 'The keys the subject is allowed to press to respond to the stimulus.'\n        },\n        prompt: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Prompt',\n          default: null,\n          description: 'Any content here will be displayed below the stimulus.'\n        },\n        width: {\n          type: jsPsych.plugins.parameterType.INT,\n          pretty_name: 'Width',\n          default: '',\n          description: 'The width of the video in pixels.'\n        },\n        height: {\n          type: jsPsych.plugins.parameterType.INT,\n          pretty_name: 'Height',\n          default: '',\n          description: 'The height of the video display in pixels.'\n        },\n        autoplay: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Autoplay',\n          default: true,\n          description: 'If true, the video will begin playing as soon as it has loaded.'\n        },\n        controls: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Controls',\n          default: false,\n          description: 'If true, the subject will be able to pause the video or move the playback to any point in the video.'\n        },\n        start: {\n          type: jsPsych.plugins.parameterType.FLOAT,\n          pretty_name: 'Start',\n          default: null,\n          description: 'Time to start the clip.'\n        },\n        stop: {\n          type: jsPsych.plugins.parameterType.FLOAT,\n          pretty_name: 'Stop',\n          default: null,\n          description: 'Time to stop the clip.'\n        },\n        rate: {\n          type: jsPsych.plugins.parameterType.FLOAT,\n          pretty_name: 'Rate',\n          default: 1,\n          description: 'The playback rate of the video. 1 is normal, <1 is slower, >1 is faster.'\n        },\n        trial_ends_after_video: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'End trial after video finishes',\n          default: false,\n          description: 'If true, the trial will end immediately after the video finishes playing.'\n        },\n        trial_duration: {\n          type: jsPsych.plugins.parameterType.INT,\n          pretty_name: 'Trial duration',\n          default: null,\n          description: 'How long to show trial before it ends.'\n        },\n        response_ends_trial: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Response ends trial',\n          default: true,\n          description: 'If true, the trial will end when subject makes a response.'\n        },\n        stage_name: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Stage Name',\n          default: null,\n          description: 'Specific name of the current stage.'\n        },\n      }\n    }\n  \n    plugin.trial = function(display_element, trial) {\n\n      // store response\n      var response = {\n        trial_events: []\n      };\n      var timestamp_onload = jsPsych.totalTime();\n\n      response.trial_events.push({\n        \"event_type\": 'video appears',\n        \"event_raw_details\": counter_balancing[0].video,\n        \"event_converted_details\": counter_balancing[0].video + '.mp4' + \" video started playing\",\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n\n      // setup stimulus\n      var video_html = '<div>';\n      \n      video_html += '<video class=\"hidden\" id=\"jspsych-video-keyboard-response-stimulus\"';\n  \n      if(trial.width) {\n        video_html += ' width=\"'+trial.width+'\"';\n      }\n      if(trial.height) {\n        video_html += ' height=\"'+trial.height+'\"';\n      }\n      if(trial.autoplay){\n        video_html += \" autoplay \";\n      }\n      if(!trial.audio){\n        video_html += \" muted \";\n      }\n      if(trial.controls){\n        video_html +=\" controls \";\n      }\n      video_html +=\">\";\n  \n      var video_preload_blob = jsPsych.pluginAPI.getVideoBuffer(trial.sources[0]);\n      if(!video_preload_blob) {\n        for(var i=0; i<trial.sources.length; i++){\n          var file_name = trial.sources[i];\n          if(file_name.indexOf('?') > -1){\n            file_name = file_name.substring(0, file_name.indexOf('?'));\n          }\n          var type = file_name.substr(file_name.lastIndexOf('.') + 1);\n          type = type.toLowerCase();\n          video_html+='<source src=\"' + file_name + '\" type=\"video/'+type+'\">';   \n        }\n      }\n      video_html += \"</video>\";\n\n      if(trial.open_instruct) {\n        video_html += '<p>' + open_instruct_text_video + '</p>';\n        $('video').addClass('hidden');\n        \n        setTimeout(function() {\n          $('video').removeClass('hidden');\n          $('p').addClass('hidden');\n        }, open_instruct_latency);\n      }\n\n      video_html += \"</div>\";\n  \n      // add prompt if there is one\n      if (trial.prompt !== null) {\n        video_html += trial.prompt;\n      }\n  \n      display_element.innerHTML = video_html;\n  \n      if(video_preload_blob){\n        display_element.querySelector('#jspsych-video-keyboard-response-stimulus').src = video_preload_blob;\n      }\n  \n      display_element.querySelector('#jspsych-video-keyboard-response-stimulus').onended = function(){\n        if(trial.trial_ends_after_video){\n          end_trial();\n        }\n      }\n  \n      if(trial.start !== null){\n        display_element.querySelector('#jspsych-video-keyboard-response-stimulus').currentTime = trial.start;\n      }\n  \n      if(trial.stop !== null){\n        display_element.querySelector('#jspsych-video-keyboard-response-stimulus').addEventListener('timeupdate', function(e){\n          var currenttime = display_element.querySelector('#jspsych-video-keyboard-response-stimulus').currentTime;\n          if(currenttime >= trial.stop){\n            display_element.querySelector('#jspsych-video-keyboard-response-stimulus').pause();\n          }\n        })\n      }\n  \n      display_element.querySelector('#jspsych-video-keyboard-response-stimulus').playbackRate = trial.rate;\n\n      var promise = document.getElementById('jspsych-video-keyboard-response-stimulus').play();\n      \n      if (promise !== undefined) {\n        promise.then(_ => {\n          \n        }).catch(error => {\n          console.log(error);\n        });\n      }\n  \n      // function to end trial when it is time\n      function end_trial() {\n  \n        // kill any remaining setTimeout handlers\n        jsPsych.pluginAPI.clearAllTimeouts();\n  \n        // kill keyboard listeners\n        if (typeof keyboardListener !== 'undefined') {\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\n        }\n  \n        // gather the data to store for the trial\n        var trial_data = {\n          \"stage_name\": JSON.stringify(trial.stage_name),\n          \"events\": JSON.stringify(response.trial_events)\n        };\n  \n        // clear the display\n        display_element.innerHTML = '';\n  \n        // move on to the next trial\n        jsPsych.finishTrial(trial_data);\n      };\n  \n      // function to handle responses by the subject\n      var after_response = function(info) {\n\n        if(info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        } else {\n            response.trial_events.push({\n              \"event_type\": \"key release\",\n              \"event_raw_details\": info.key_release,\n              \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n              \"timestamp\": jsPsych.totalTime(),\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n        }\n  \n        if (trial.response_ends_trial) {\n          end_trial();\n        }\n      };\n  \n      // start the response listener\n      if (trial.choices != jsPsych.NO_KEYS) {\n        var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'performance',\n          persist: false,\n          allow_held_key: false,\n        });\n\n        var clickListener = jsPsych.pluginAPI.getMouseResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'date',\n          persist: true,\n          allow_held_key: false\n        });\n      }\n\n      var video_duration_real = trial.trial_duration;\n\n      if(trial.open_instruct) {\n        video_duration_real += open_instruct_latency;\n        var vid = document.getElementById(\"jspsych-video-keyboard-response-stimulus\");\n        vid.pause();\n        setTimeout(function() {\n          vid.play();\n        }, open_instruct_latency);\n      } else {\n        $('video').ready(function() {\n          $('video').removeClass('hidden');\n        });\n      }\n\n      // end trial if time limit is set\n      if (trial.trial_duration !== null) {\n        jsPsych.pluginAPI.setTimeout(function() {\n          end_trial();\n        }, video_duration_real);\n      }\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-deval-video.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-food-hunger-questions.js":
/*!********************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-food-hunger-questions.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins[\"food-and-hunger-questions\"] = (function() {\n\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'food-and-hunger-questions',\n      description: '',\n      parameters: {\n        stimulus: {\n          type: jsPsych.plugins.parameterType.HTML_STRING,\n          pretty_name: 'Stimulus',\n          default: undefined,\n          description: 'The HTML string to be displayed'\n        },\n        choices: {\n          type: jsPsych.plugins.parameterType.KEYCODE,\n          array: true,\n          pretty_name: 'Choices',\n          default: jsPsych.ALL_KEYS,\n          description: 'The keys the subject is allowed to press to respond to the stimulus.'\n        },\n        prompt: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Prompt',\n          default: null,\n          description: 'Any content here will be displayed below the stimulus.'\n        },\n        stimulus_duration: {\n          type: jsPsych.plugins.parameterType.INT,\n          pretty_name: 'Stimulus duration',\n          default: null,\n          description: 'How long to hide the stimulus.'\n        },\n        trial_duration: {\n          type: jsPsych.plugins.parameterType.INT,\n          pretty_name: 'Trial duration',\n          default: null,\n          description: 'How long to show trial before it ends.'\n        },\n        trial_latency: {\n          type: jsPsych.plugins.parameterType.INT,\n          pretty_name: 'Trial latency',\n          default: null,\n          description: 'How long to show trial before key press it ends.'\n        },\n        response_ends_trial: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Response ends trial',\n          default: false,\n          description: 'If true, trial will end when subject makes a response.'\n        },\n        stage_name: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Stage Name',\n          default: null,\n          description: 'Specific name of the current stage.'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n  \n      }\n    }\n  \n    plugin.trial = function(display_element, trial) {\n  \n        var html = \"\";\n        var IMAGE_SRC = trial.stimulus;\n        var h3 =  trial.questions.top;\n        var bottom_txt =  trial.questions.bottom;\n        var button_trigger = false;\n        var vas_holder = 0;\n\n        // store response\n        var response = {\n        trial_events: []\n        };\n\n        var timestamp_onload = jsPsych.totalTime();\n\n        response.trial_events.push({\n            \"event_type\": trial.event_type,\n            \"event_raw_details\": trial.event_raw_details,\n            \"event_converted_details\": trial.event_converted_details,\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n        });\n        \n\n        // inject CSS for trial\n        html += '<style id=\"key-testing\">' +\n                'img { width: 300px; margin: 20px 0; }' +\n                '.votes-container { margin-top: 8rem; }' +\n                '.key-testing-text { padding-bottom: 4rem; }' +\n                '.description { top: -6.7rem; }' +\n                '.description div { width: 100px; }' +\n                '.description .description--right { margin-right: -3rem }' +\n                'ul { outline: 1px solid #fff; list-style: none; padding: 1rem; }'\n        html += '</style>';\n\n        html += '<div id=\"jspsych-stimulus\"><h3 class=\"key-testing-text\">' + h3 + '</h3>';\n\n        if(trial.stimulus !== 'hunger') {\n          html += '<img src='+ IMAGE_SRC +'/>';\n          html += '<p>' + bottom_txt + '</p>';\n        }\n\n        html += '<div class=\"votes-container\">' +\n            '<div id=\"slider\">' +\n                '<div class=\"description\">' +\n                    '<div class=\"description--left\">' + vas_left + '</div>';\n        if(trial.stimulus !== 'hunger') {\n          html +=  '<div class=\"description--center\">' + vas_center + '</div>';\n        }\n                    \n        html += '<div class=\"description--right\">' + vas_right + '</div>' +\n                '</div>' +\n            '</div>' +\n            '<button id=\"button\" class=\"confirm-button btn\">Submit answer</button>' +\n            \"<ul><li>Select answer using your mouse.</li><li>Click 'submit answer' when ready.</li></ul>\" +\n        '</div>'\n        html += '</div>';\n\n        html +=\n         ' <div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">' +\n            '<div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>' +\n              '<div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">' +\n                '<header class=\"modal__header\">' +\n                  '<button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>' +\n                '</header>' +\n                '<main class=\"modal__content\" id=\"modal-1-content\">' +\n                  '<p>' + popup_text + '</p>' +\n                '</main>' +\n                '<footer class=\"modal__footer\">' +\n                  '<button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>' +\n                '</footer>' +\n              '</div>' +\n            '</div>' +\n        '</div>';\n    \n        // draw\n        display_element.innerHTML = html;\n\n        // define slider\n        $(\"#slider\").slider({\n            value: 5,\n            min: 0,\n            max: 10,\n            step: 0.01,\n            change: function(event, ui) {\n                $(\"#button\").removeClass('disabled');         \n                button_trigger = true;\n                vas_holder = ui.value.toFixed(2);\n                response.trial_events.push({\n                    \"event_type\": 'VAS answer has been made',\n                    \"event_raw_details\": ui.value.toFixed(2),\n                    \"event_converted_details\": ui.value.toFixed(2) + ' answer has been made',\n                    \"timestamp\": jsPsych.totalTime(),\n                    \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                });\n            }\n        })\n\n        // \n        $(\"#button\").click(function() {\n            response.trial_events.push({\n                \"event_type\": 'button click',\n                \"event_raw_details\": '\\'submit button\\' was clicked',\n                \"event_converted_details\": '\\'submit button\\' was clicked',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n            if(button_trigger) {\n                end_trial();\n                button_trigger = false;\n            } else {\n                MicroModal.show('modal-1');\n            }\n        });\n\n    \n        // function to end trial when it is time\n        var end_trial = function() {\n    \n            // kill any remaining setTimeout handlers\n            jsPsych.pluginAPI.clearAllTimeouts();\n    \n            // kill keyboard listeners\n            if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n            }\n    \n            // gather the data to store for the trial\n            var trial_data = {\n                \"stage_name\": JSON.stringify(trial.stage_name),\n                \"events\": JSON.stringify(response.trial_events),\n                \"rating_status\": JSON.stringify(trial.rating_status),\n                \"rating\": JSON.stringify(vas_holder),\n                \"food_item\": JSON.stringify(trial.food_item)\n            };\n    \n            // clear the display\n            display_element.innerHTML = '';\n    \n            // move on to the next trial\n            jsPsych.finishTrial(trial_data);\n        };\n  \n        // function to handle responses by the subject\n        var after_response = function(info) {\n    \n            if(info.key_release === undefined) {\n            response.trial_events.push({\n                \"event_type\": \"key press\",\n                \"event_raw_details\": info.key,\n                \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n            } else {\n                response.trial_events.push({\n                \"event_type\": \"key release\",\n                \"event_raw_details\": info.key_release,\n                \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                });\n            \n            }\n        };\n    \n        // start the response listener\n        if (trial.choices != jsPsych.NO_KEYS) {\n            var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: after_response,\n                valid_responses: trial.choices,\n                rt_method: 'performance',\n                persist: true,\n                allow_held_key: false\n            });\n            var clickListener = jsPsych.pluginAPI.getMouseResponse({\n                callback_function: after_response,\n                valid_responses: trial.choices,\n                rt_method: 'date',\n                persist: true,\n                allow_held_key: false\n            });\n        }\n  \n        // hide stimulus if stimulus_duration is set\n        if (trial.stimulus_duration !== null) {\n            jsPsych.pluginAPI.setTimeout(function() {\n            display_element.querySelector('#jspsych-html-keyboard-response-stimulus').style.visibility = 'hidden';\n            }, trial.stimulus_duration);\n        }\n    \n        // end trial if trial_duration is set\n        if (trial.trial_duration !== null) {\n            jsPsych.pluginAPI.setTimeout(function() {\n            end_trial();\n            }, trial.trial_duration);\n        }\n    \n        // end trial if trial_duration is set\n        if (trial.trial_latency !== null) {\n            jsPsych.pluginAPI.setTimeout(function() {\n            trial.response_ends_trial = true;\n            }, trial.trial_latency);\n        }\n  \n    };\n  \n    return plugin;\n  })();\n  \n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-food-hunger-questions.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-html-keyboard-response.js":
/*!*********************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-html-keyboard-response.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins[\"html-keyboard-response\"] = (function() {\n\n  var plugin = {};\n\n  plugin.info = {\n    name: 'html-keyboard-response',\n    description: '',\n    parameters: {\n      stimulus: {\n        type: jsPsych.plugins.parameterType.HTML_STRING,\n        pretty_name: 'Stimulus',\n        default: undefined,\n        description: 'The HTML string to be displayed'\n      },\n      choices: {\n        type: jsPsych.plugins.parameterType.KEYCODE,\n        array: true,\n        pretty_name: 'Choices',\n        default: jsPsych.ALL_KEYS,\n        description: 'The keys the subject is allowed to press to respond to the stimulus.'\n      },\n      prompt: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Prompt',\n        default: null,\n        description: 'Any content here will be displayed below the stimulus.'\n      },\n      stimulus_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Stimulus duration',\n        default: null,\n        description: 'How long to hide the stimulus.'\n      },\n      trial_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Trial duration',\n        default: null,\n        description: 'How long to show trial before it ends.'\n      },\n      trial_latency: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Trial latency',\n        default: null,\n        description: 'How long to show trial before key press it ends.'\n      },\n      response_ends_trial: {\n        type: jsPsych.plugins.parameterType.BOOL,\n        pretty_name: 'Response ends trial',\n        default: false,\n        description: 'If true, trial will end when subject makes a response.'\n      },\n      stage_name: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Stage Name',\n        default: null,\n        description: 'Specific name of the current stage.'\n      },\n      event_type: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event type',\n        default: null,\n        description: 'Event type'\n      },\n      event_raw_details: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event raw details',\n        default: null,\n        description: 'Event raw details'\n      },\n      event_converted_details: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event converted details',\n        default: null,\n        description: 'Event converted details'\n      }\n\n    }\n  }\n\n  plugin.trial = function(display_element, trial) {\n\n    // store response\n    var response = {\n      trial_events: []\n    };\n    var timestamp_onload = jsPsych.totalTime();\n\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">'+trial.stimulus+'</div>';\n\n    response.trial_events.push({\n      \"event_type\": trial.event_type,\n      \"event_raw_details\": trial.event_raw_details,\n      \"event_converted_details\": trial.event_converted_details,\n      \"timestamp\": jsPsych.totalTime(),\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n    });\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // function to end trial when it is time\n    var end_trial = function() {\n\n      // kill any remaining setTimeout handlers\n      jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== 'undefined') {\n        jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n        jsPsych.pluginAPI.cancelClickResponse(clickListener);\n      }\n\n      // gather the data to store for the trial\n      // JSON.stringify(\n      var trial_data = {\n        \"stage_name\": JSON.stringify(trial.stage_name),\n        \"events\": JSON.stringify(response.trial_events)\n      };\n\n      // clear the display\n      display_element.innerHTML = '';\n\n      // move on to the next trial\n      jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = function(info) {\n      if(info.key_release === undefined) {\n        response.trial_events.push({\n          \"event_type\": \"key press\",\n          \"event_raw_details\": info.key,\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n          \"timestamp\": jsPsych.totalTime(),\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n        });\n      } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != jsPsych.NO_KEYS) {\n        var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'performance',\n          persist: true,\n          allow_held_key: false\n        });\n        var clickListener = jsPsych.pluginAPI.getMouseResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'date',\n          persist: true,\n          allow_held_key: false\n        });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        display_element.querySelector('#jspsych-html-keyboard-response-stimulus').style.visibility = 'hidden';\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        end_trial();\n      }, trial.trial_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_latency !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        trial.response_ends_trial = true;\n      }, trial.trial_latency);\n    }\n\n  };\n\n  return plugin;\n})();\n\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-html-keyboard-response.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-key-testing.js":
/*!**********************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-key-testing.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins[\"key-testing\"] = (function() {\n\n  var plugin = {};\n\n  plugin.info = {\n    name: 'key-testing',\n    description: '',\n    parameters: {\n      stimulus: {\n        type: jsPsych.plugins.parameterType.HTML_STRING,\n        pretty_name: 'Stimulus',\n        default: undefined,\n        description: 'The HTML string to be displayed'\n      },\n      choices: {\n        type: jsPsych.plugins.parameterType.KEYCODE,\n        array: true,\n        pretty_name: 'Choices',\n        default: jsPsych.ALL_KEYS,\n        description: 'The keys the subject is allowed to press to respond to the stimulus.'\n      },\n      prompt: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Prompt',\n        default: null,\n        description: 'Any content here will be displayed below the stimulus.'\n      },\n      stimulus_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Stimulus duration',\n        default: null,\n        description: 'How long to hide the stimulus.'\n      },\n      trial_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Trial duration',\n        default: null,\n        description: 'How long to show trial before it ends.'\n      },\n      trial_latency: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Trial latency',\n        default: null,\n        description: 'How long to show trial before key press it ends.'\n      },\n      response_ends_trial: {\n        type: jsPsych.plugins.parameterType.BOOL,\n        pretty_name: 'Response ends trial',\n        default: false,\n        description: 'If true, trial will end when subject makes a response.'\n      },\n      stage_name: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Stage Name',\n        default: null,\n        description: 'Specific name of the current stage.'\n      },\n      event_type: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event type',\n        default: null,\n        description: 'Event type'\n      },\n      event_raw_details: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event raw details',\n        default: null,\n        description: 'Event raw details'\n      },\n      event_converted_details: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event converted details',\n        default: null,\n        description: 'Event converted details'\n      }\n\n    }\n  }\n\n  plugin.trial = function(display_element, trial) {\n\n    var html = \"\";\n    var VENDING_MACHINE = '/static/images/vending_machine.svg';\n    var isLeftTilted = false;\n\n    // store response\n    var response = {\n      trial_events: []\n    };\n\n    var timestamp_onload = jsPsych.totalTime();\n\n     // inject CSS for trial\n     html += '<style id=\"key-testing\">';\n     html += \".key-testing-text { margin: 50px; }\";\n     html += '</style>';\n\n    html += '<div id=\"jspsych-stimulus\"><p class=\"key-testing-text\">Press the left arrow to tip the vending machine left.</p><img class=\"vending-machine\" src='+ VENDING_MACHINE +'/></div>';\n\n    response.trial_events.push({\n      \"event_type\": trial.event_type,\n      \"event_raw_details\": trial.event_raw_details,\n      \"event_converted_details\": trial.event_converted_details,\n      \"timestamp\": jsPsych.totalTime(),\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n    });\n\n    // draw\n    display_element.innerHTML = html;\n\n    // function to end trial when it is time\n    var end_trial = function() {\n\n      // kill any remaining setTimeout handlers\n      jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== 'undefined') {\n        jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n        jsPsych.pluginAPI.cancelClickResponse(clickListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        \"stage_name\": JSON.stringify(trial.stage_name),\n        \"events\": JSON.stringify(response.trial_events)\n      };\n\n      // clear the display\n      display_element.innerHTML = '';\n\n      // move on to the next trial\n      jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = function(info) {\n\n      function machine_tilt() {\n        if(info.key === left_tilt) {\n            $(\".vending-machine\").css({\n                \"transform\":  \"rotate(\" + shake_left_rotate + \"deg) translateX(\" + shake_left_translateX + \"%)\",\n                \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            });\n  \n            jsPsych.pluginAPI.setTimeout(function(){ $(\".vending-machine\").css({\n              \"transform\":  \"rotate(0deg) translateX(0%)\",\n              \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            }); }, shake_return_time);\n            \n            response.trial_events.push({\n              \"event_type\": \"left tilt\",\n              \"event_raw_details\": shake_left_translateX + \"%, \" + shake_left_rotate + \"deg\",\n              \"event_converted_details\": \"vending machine was tilted left \" + shake_left_translateX + \"%, \" + shake_left_rotate + \"deg\",\n              \"timestamp\": jsPsych.totalTime(),\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n\n            if(!isLeftTilted) {\n              setTimeout( function() {\n                $(\".key-testing-text\").fadeOut(function() {\n                  $(this).text(\"Press the right arrow to tip the vending machine right.\").fadeIn();\n                });\n              }, 300);\n            }\n     \n            isLeftTilted = true;\n        } else if (info.key === right_tilt) {\n            $(\".vending-machine\").css({\n                \"transform\":  \"rotate(\" + shake_right_rotate + \"deg) translateX(\" + shake_right_translateX + \"%)\",\n                \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            });\n  \n            jsPsych.pluginAPI.setTimeout(function(){ $(\".vending-machine\").css({\n              \"transform\": \"rotate(0deg) translateX(0%)\",\n              \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            }); }, shake_return_time);\n            \n            response.trial_events.push({\n              \"event_type\": \"right tilt\",\n              \"event_raw_details\": shake_right_translateX + \"%, \" + shake_right_rotate + \"deg\",\n              \"event_converted_details\": \"vending machine was tilted right \" + shake_right_translateX + \"%, \" + shake_right_rotate + \"deg\",\n              \"timestamp\": jsPsych.totalTime(),\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n\n            if(isLeftTilted) {\n              setTimeout( function() {\n                end_trial();\n              }, 700);\n            }\n        }\n    }\n  \n\n\n      if(info.key_release === undefined) {\n        machine_tilt();\n        response.trial_events.push({\n          \"event_type\": \"key press\",\n          \"event_raw_details\": info.key,\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n          \"timestamp\": jsPsych.totalTime(),\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n        });\n      } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != jsPsych.NO_KEYS) {\n        var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'performance',\n          persist: true,\n          allow_held_key: false\n        });\n        var clickListener = jsPsych.pluginAPI.getMouseResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'date',\n          persist: true,\n          allow_held_key: false\n        });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        display_element.querySelector('#jspsych-html-keyboard-response-stimulus').style.visibility = 'hidden';\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        end_trial();\n      }, trial.trial_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_latency !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        trial.response_ends_trial = true;\n      }, trial.trial_latency);\n    }\n\n  };\n\n  return plugin;\n})();\n\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-key-testing.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-learning-vvr.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-learning-vvr.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['survey-vvr'] = (function() {\n \n    var plugin = {};\n\n    plugin.info = {\n      name: 'survey-vvr',\n      parameters: {\n        choices: {\n            type: jsPsych.plugins.parameterType.KEYCODE,\n            array: true,\n            pretty_name: 'Choices',\n            default: jsPsych.ALL_KEYS,\n            description: 'The keys the subject is allowed to press to respond to the stimulus.'\n        },\n        trial_duration: {\n            type: jsPsych.plugins.parameterType.INT,\n            pretty_name: 'Trial duration', \n            default: null,\n            description: 'How long to show trial before it ends.'\n        },\n        variables: {\n            type: jsPsych.plugins.parameterType.Obj,\n            pretty_name: 'Variables',\n            default: null,\n            description: 'Variables from parameters.js file.'\n        },\n        stage_name: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Stage Name',\n          default: null,\n          description: 'Specific name of the current stage.'\n        }\n      }\n    }\n  \n    plugin.trial = function(display_element, trial){\n        var _trial$variables = trial.variables,\n            VVR_INTERVAL_DURATION = _trial$variables.VVR_INTERVAL_DURATION,\n            VVR_INTERVAL_NUM = _trial$variables.VVR_INTERVAL_NUM,\n            VVR_OUTCOME_DURATION = _trial$variables.VVR_OUTCOME_DURATION,\n            VVR_DEGRAD_PATTERN = _trial$variables.VVR_DEGRAD_PATTERN,\n            VVR_PROB_VALUE = _trial$variables.VVR_PROB_VALUE;\n\n        var VENDING_MACHINE = '/static/images/vending_machine.svg';\n        var OUTCOME = {\n          MM:'/static/images/MM.png',\n          TT:'/static/images/TT.png',\n          BBQ:'/static/images/BBQ.png',\n        };\n\n        var degradation_pattern_condition = VVR_DEGRAD_PATTERN[loop_node_counter_vvr]; // Default condition degradation pattern\n        var probability_value = VVR_PROB_VALUE[loop_node_counter_vvr];\n        var timerId;\n        var condition_outcome = 'A0';\n\n        // store response\n        var response = {\n          trial_events: []\n        };\n        var timestamp_onload = jsPsych.totalTime();\n          \n        var new_html = '<div id=\"jspsych-stimulus\"><img class=\"vending-machine\" src='+ VENDING_MACHINE +'/><div class=\"outcome-container\"></div></div>';\n\n        display_element.innerHTML = new_html;\n\n        response.trial_events.push({\n          \"event_type\": 'image appears',\n          \"event_raw_details\": VENDING_MACHINE,\n          \"event_converted_details\": 'white vending machine appears',\n          \"timestamp\": jsPsych.totalTime(),\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n        });\n\n        // outcome presentation logic\n        (function () {\n          \n          let x = 0;\n          let duration = VVR_INTERVAL_DURATION;\n          timerId = jsPsych.pluginAPI.setTimeout(function request() {\n            \n            var random_boolean = Math.random() < probability_value;\n            var outcome_present = DEGRAD_PATTERN[condition_outcome][degradation_pattern_condition];\n\n            if (random_boolean && outcome_present) {\n              $('.outcome-container').html('<img class=\"outcome\" src=\"'+ OUTCOME[counter_balancing[0][outcome_present]] +'\"/>');\n              response.trial_events.push({\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload,\n                \"event_type\": 'image appears',\n                \"event_raw_details\": OUTCOME[counter_balancing[0][outcome_present]],\n                \"event_converted_details\": counter_balancing[0][outcome_present] + ' image appears'\n              });\n              // reset degrad pattern\n              condition_outcome = 'A0';\n\n              jsPsych.pluginAPI.setTimeout(function() {\n                $('.outcome-container').html('');\n                \n                if (++x === VVR_INTERVAL_NUM) {\n                  clearTimeout(timerId);\n                  end_trial();\n                }\n                \n              }, VVR_OUTCOME_DURATION);\n              duration = VVR_OUTCOME_DURATION + VVR_INTERVAL_DURATION;\n            } else {\n              if (++x === VVR_INTERVAL_NUM) {\n                clearTimeout(timerId);\n                end_trial();\n              }\n            }\n            \n            timerId = jsPsych.pluginAPI.setTimeout(request, duration);\n          }, duration);          \n        }());\n\n\n        // function to handle responses by the subject\n        var after_response = function(info) {\n   \n            function machine_tilt() {\n                if(info.key === left_tilt) {\n                    $(\".vending-machine\").css({\n                        \"transform\":  \"rotate(\" + shake_left_rotate + \"deg) translateX(\" + shake_left_translateX + \"%)\",\n                        \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n                    });\n          \n                    jsPsych.pluginAPI.setTimeout(function(){ $(\".vending-machine\").css({\n                      \"transform\":  \"rotate(0deg) translateX(0%)\",\n                      \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n                    }); }, shake_return_time);\n                    \n                    response.trial_events.push({\n                      \"event_type\": \"left tilt\",\n                      \"event_raw_details\": shake_left_translateX + \"%, \" + shake_left_rotate + \"deg\",\n                      \"event_converted_details\": \"vending machine was tilted left \" + shake_left_translateX + \"%, \" + shake_left_rotate + \"deg\",\n                      \"timestamp\": jsPsych.totalTime(),\n                      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                    });\n                    condition_outcome = 'A1';\n\n                } else if (info.key === right_tilt) {\n                    $(\".vending-machine\").css({\n                        \"transform\":  \"rotate(\" + shake_right_rotate + \"deg) translateX(\" + shake_right_translateX + \"%)\",\n                        \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n                    });\n          \n                    jsPsych.pluginAPI.setTimeout(function(){ $(\".vending-machine\").css({\n                      \"transform\": \"rotate(0deg) translateX(0%)\",\n                      \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n                    }); }, shake_return_time);\n                    \n                    response.trial_events.push({\n                      \"event_type\": \"right tilt\",\n                      \"event_raw_details\": shake_right_translateX + \"%, \" + shake_right_rotate + \"deg\",\n                      \"event_converted_details\": \"vending machine was tilted right \" + shake_right_translateX + \"%, \" + shake_right_rotate + \"deg\",\n                      \"timestamp\": jsPsych.totalTime(),\n                      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                    });\n\n                    condition_outcome = 'A2';\n\n                } else {\n                    condition_outcome = 'A0';\n                }\n            }\n          \n            if(info.key_release === undefined) {\n                machine_tilt();\n                response.trial_events.push({\n                  \"event_type\": \"key press\",\n                  \"event_raw_details\": info.key,\n                  \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n                  \"timestamp\": jsPsych.totalTime(),\n                  \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                });\n            } else {\n                response.trial_events.push({\n                  \"event_type\": \"key release\",\n                  \"event_raw_details\": info.key_release,\n                  \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n                  \"timestamp\": jsPsych.totalTime(),\n                  \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                });\n            }\n            \n        }\n        \n      \n\n        // function to end trial when it is time\n        var end_trial = function() {\n\n            // increase counter\n            loop_node_counter_vvr += 1;\n            loop_node_counter_vvr_determination += 1;\n\n            \n            // kill any remaining setTimeout handlers\n            jsPsych.pluginAPI.clearAllTimeouts();\n            // hack to kill all remaining setTimeouts\n            while (timerId--) {\n              window.clearTimeout(timerId); // will do nothing if no timeout with id is present\n            } \n\n            // kill keyboard listeners\n            if (typeof keyboardListener !== 'undefined') {\n                jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n                jsPsych.pluginAPI.cancelClickResponse(clickListener);\n            }\n\n            // gather the data to store for the trial\n            var trial_data = {\n                \"stage_name\": trial.stage_name,\n                \"stimulus\": trial.stimulus,\n                \"events\": JSON.stringify(response.trial_events)\n            };\n\n            // clear the display\n            display_element.innerHTML = '';\n\n            // move on to the next trial\n            jsPsych.finishTrial(trial_data);\n        };\n\n        // start the response listener\n        if (trial.choices != jsPsych.NO_KEYS) {\n            var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n              callback_function: after_response,\n              valid_responses: trial.choices,\n              rt_method: 'performance',\n              persist: true,\n              allow_held_key: false\n            });\n            var clickListener = jsPsych.pluginAPI.getMouseResponse({\n              callback_function: after_response,\n              valid_responses: trial.choices,\n              rt_method: 'date',\n              persist: false,\n              allow_held_key: false\n            });\n        }\n\n         // end trial if trial_duration is set\n        if (trial.trial_duration !== null) {\n          jsPsych.pluginAPI.setTimeout(function() {\n            end_trial();\n          }, trial.trial_duration);\n        }\n    }\n  \n    return plugin;\n  \n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-learning-vvr.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-left.js":
/*!**************************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-left.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['survey-vvr-questions-left'] = (function() {\r\n\r\n    var plugin = {};\r\n\r\n    plugin.info = {\r\n        name: 'survey-vvr-questions-left',\r\n        parameters: {\r\n            choices: {\r\n                type: jsPsych.plugins.parameterType.KEYCODE,\r\n                array: true,\r\n                pretty_name: 'Choices',\r\n                default: jsPsych.ALL_KEYS,\r\n                description: 'The keys the subject is allowed to press to respond to the stimulus.'\r\n            },\r\n            trial_duration: {\r\n                type: jsPsych.plugins.parameterType.INT,\r\n                pretty_name: 'Trial duration', \r\n                default: null,\r\n                description: 'How long to show trial before it ends.'\r\n            },\r\n            stage_name: {\r\n                type: jsPsych.plugins.parameterType.STRING,\r\n                pretty_name: 'Stage Name',\r\n                default: null,\r\n                description: 'Specific name of the current stage.'\r\n            },\r\n            vars: {\r\n                type: jsPsych.plugins.parameterType.STRING,\r\n                pretty_name: 'Text variables',\r\n                default: null,\r\n                description: 'Text variables.'\r\n            },\r\n            details: {\r\n                a: {\r\n                    event_type: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event type',\r\n                        default: null,\r\n                        description: 'Event type'\r\n                    },\r\n                    event_raw_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event raw details',\r\n                        default: null,\r\n                        description: 'Event raw details'\r\n                    },\r\n                    event_converted_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event converted details',\r\n                        default: null,\r\n                        description: 'Event converted details'\r\n                    }\r\n                },\r\n                b: {\r\n                    event_type: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event type',\r\n                        default: null,\r\n                        description: 'Event type'\r\n                    },\r\n                    event_raw_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event raw details',\r\n                        default: null,\r\n                        description: 'Event raw details'\r\n                    },\r\n                    event_converted_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event converted details',\r\n                        default: null,\r\n                        description: 'Event converted details'\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    plugin.trial = function(display_element, trial){\r\n        var VENDING_MACHINE = '/static/images/vending_machine.svg';\r\n        var outcome_collection = {\r\n            MM:'/static/images/MM.png',\r\n            TT:'/static/images/TT.png',\r\n            BBQ:'/static/images/BBQ.png',\r\n        };\r\n        var OUTCOME = outcome_collection[counter_balancing[0].left];\r\n        var button_trigger = false;\r\n        var isMachineTilted = false;\r\n        var vas_holder = 0;\r\n\r\n        var new_html = \r\n            `<div id=\"jspsych-stimulus\" class='vvr-question-container vvr-question-left'>\r\n                <div class='vvr-question-a'>\r\n                    <p>${trial.vars.question_text_a1}</p>\r\n                    <div class=\"outcome-container-learning\"><img src='${OUTCOME}'/></div>\r\n                    <p style='padding:2rem 0'>${trial.vars.question_text_a2}</p>\r\n                    <img class=\"vending-machine\" src='${VENDING_MACHINE}'/>\r\n                </div>\r\n                <div class='vvr-question-b' style='display: none'>\r\n                    <p>${trial.vars.question_text_b1}</p>\r\n                    <div class=\"votes-container\">\r\n                        <div id=\"slider\">\r\n                            <div class=\"description\">\r\n                                <div class=\"description--left\">${trial.vars.question_text_b2}</div>\r\n                                <div class=\"description--center\"></div>\r\n                                <div class=\"description--right\">${trial.vars.question_text_b3}</div>\r\n                            </div>\r\n                        </div>\r\n                        <button id=\"button\" class=\"confirm-button btn\">Submit answer</button>\r\n                        <ul>${trial.vars.question_text_b4}</ul>\r\n                    </div>\r\n                </div>\r\n            </div>`;\r\n\r\n        // store response\r\n        var response = {\r\n            trial_events: []\r\n        };\r\n        var timestamp_onload = jsPsych.totalTime();\r\n\r\n\r\n        response.trial_events.push({\r\n            \"event_type\": trial.details.a.event_type,\r\n            \"event_raw_details\": trial.details.a.event_raw_details,\r\n            \"event_converted_details\": trial.details.a.event_converted_details,\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n\r\n        \r\n        display_element.innerHTML = new_html;\r\n\r\n        $(display_element).append(\r\n            '<div id=\"dialog-message\" style=\"display:none\">' + \r\n            '<p>' + trial.vars.popup_text + '</p>' +\r\n            '</div>'\r\n        );\r\n\r\n        $(\"#slider\").slider({\r\n            value: 5,\r\n            min: 0,\r\n            max: 10,\r\n            step: 0.01,\r\n            change: function(event, ui) {\r\n                $(\"#button\").removeClass('disabled');         \r\n                button_trigger = true;\r\n                vas_holder = ui.value.toFixed(2);\r\n                response.trial_events.push({\r\n                    \"event_type\": 'VAS answer has been made',\r\n                    \"event_raw_details\": ui.value.toFixed(2),\r\n                    \"event_converted_details\": ui.value.toFixed(2) + ' answer has been made',\r\n                    \"timestamp\": jsPsych.totalTime(),\r\n                    \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n                });\r\n            }\r\n        })\r\n\r\n        \r\n         $(\"#button\").click(function() {\r\n            response.trial_events.push({\r\n                \"event_type\": 'button click',\r\n                \"event_raw_details\": '\\'submit button\\' was clicked',\r\n                \"event_converted_details\": '\\'submit button\\' was clicked',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n            if(button_trigger) {\r\n                end_trial();\r\n                button_trigger = false;\r\n            } else {\r\n                $( \"#dialog-message\" ).dialog({\r\n                    modal: true,\r\n                    buttons: {\r\n                        Ok: function() {\r\n                            $( this ).dialog( \"close\" );\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        function showNextQuestion() {\r\n            $('.vvr-question-b').fadeIn('slow');   \r\n            response.trial_events.push({\r\n                \"event_type\": trial.details.b.event_type,\r\n                \"event_raw_details\": trial.details.b.event_raw_details,\r\n                \"event_converted_details\": trial.details.b.event_converted_details,\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n        }\r\n\r\n\r\n        // function to handle responses by the subject\r\n        var after_response = function(info) {\r\n\r\n            if(info.key_release === undefined) {\r\n                response.trial_events.push({\r\n                  \"event_type\": \"key press\",\r\n                  \"event_raw_details\": info.key,\r\n                  \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n                  \"timestamp\": jsPsych.totalTime(),\r\n                  \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n                });\r\n            } else {\r\n                response.trial_events.push({\r\n                  \"event_type\": \"key release\",\r\n                  \"event_raw_details\": info.key_release,\r\n                  \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n                  \"timestamp\": jsPsych.totalTime(),\r\n                  \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n                });\r\n            }\r\n \r\n            if(info.key === left_tilt && !isMachineTilted) {\r\n                $(\".vending-machine\").css({\r\n                    \"transform\":  \"rotate(\" + shake_left_rotate + \"deg) translateX(\" + shake_left_translateX + \"%)\",\r\n                    \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\r\n                });\r\n                vvrIsCorrect = true;\r\n                isMachineTilted = true;\r\n                ++loop_node_counter_max_num_correct;\r\n                showNextQuestion();\r\n            } else if (info.key === right_tilt && !isMachineTilted) {\r\n                $(\".vending-machine\").css({\r\n                    \"transform\":  \"rotate(\" + shake_right_rotate + \"deg) translateX(\" + shake_right_translateX + \"%)\",\r\n                    \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\r\n                });\r\n                vvrIsCorrect = false;\r\n                isMachineTilted = true;\r\n                ++loop_node_counter_max_num_incorrect;\r\n                loop_node_counter_max_num_correct = 0;\r\n                showNextQuestion();\r\n            }\r\n\r\n        }\r\n\r\n\r\n        // function to end trial when it is time\r\n        var end_trial = function() {\r\n\r\n            // kill any remaining setTimeout handlers\r\n            jsPsych.pluginAPI.clearAllTimeouts();\r\n\r\n            // kill keyboard listeners\r\n            if (typeof keyboardListener !== 'undefined') {\r\n                jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n                jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n            }\r\n\r\n            // gather the data to store for the trial\r\n            var trial_data = {\r\n                \"stage_name\": JSON.stringify(trial.stage_name),\r\n                \"vvr_stage\": JSON.stringify(trial.vvr_stage),\r\n                \"stimulus\": trial.stimulus,\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"block_number\": loop_node_counter_vvr,\r\n                \"item_id\": 1,\r\n                \"food_item\": OUTCOME.slice(15),\r\n                \"correct\": vvrIsCorrect ? 'y':'n',\r\n                \"strength_of_belief\": vas_holder,\r\n                \"events\": JSON.stringify(response.trial_events)\r\n            };\r\n\r\n            // clear the display\r\n            display_element.innerHTML = '';\r\n\r\n            // move on to the next trial\r\n            jsPsych.finishTrial(trial_data);\r\n        };\r\n\r\n        // start the response listener\r\n        if (trial.choices != jsPsych.NO_KEYS) {\r\n            var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n                callback_function: after_response,\r\n                valid_responses: trial.choices,\r\n                rt_method: 'performance',\r\n                persist: true,\r\n                allow_held_key: false\r\n            });\r\n            var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n                callback_function: after_response,\r\n                valid_responses: trial.choices,\r\n                rt_method: 'date',\r\n                persist: false,\r\n                allow_held_key: false\r\n            });\r\n        }\r\n\r\n            // end trial if trial_duration is set\r\n        if (trial.trial_duration !== null) {\r\n            jsPsych.pluginAPI.setTimeout(function() {\r\n            end_trial();\r\n            }, trial.trial_duration);\r\n        }\r\n    }\r\n\r\n    return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-left.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-right.js":
/*!***************************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-right.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['survey-vvr-questions-right'] = (function() {\r\n\r\n    var plugin = {};\r\n\r\n    plugin.info = {\r\n        name: 'survey-vvr-questions-right',\r\n        parameters: {\r\n            choices: {\r\n                type: jsPsych.plugins.parameterType.KEYCODE,\r\n                array: true,\r\n                pretty_name: 'Choices',\r\n                default: jsPsych.ALL_KEYS,\r\n                description: 'The keys the subject is allowed to press to respond to the stimulus.'\r\n            },\r\n            trial_duration: {\r\n                type: jsPsych.plugins.parameterType.INT,\r\n                pretty_name: 'Trial duration', \r\n                default: null,\r\n                description: 'How long to show trial before it ends.'\r\n            },\r\n            stage_name: {\r\n                type: jsPsych.plugins.parameterType.STRING,\r\n                pretty_name: 'Stage Name',\r\n                default: null,\r\n                description: 'Specific name of the current stage.'\r\n            },\r\n            vars: {\r\n                type: jsPsych.plugins.parameterType.STRING,\r\n                pretty_name: 'Text variables',\r\n                default: null,\r\n                description: 'Text variables.'\r\n            },\r\n            details: {\r\n                a: {\r\n                    event_type: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event type',\r\n                        default: null,\r\n                        description: 'Event type'\r\n                    },\r\n                    event_raw_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event raw details',\r\n                        default: null,\r\n                        description: 'Event raw details'\r\n                    },\r\n                    event_converted_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event converted details',\r\n                        default: null,\r\n                        description: 'Event converted details'\r\n                    }\r\n                },\r\n                b: {\r\n                    event_type: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event type',\r\n                        default: null,\r\n                        description: 'Event type'\r\n                    },\r\n                    event_raw_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event raw details',\r\n                        default: null,\r\n                        description: 'Event raw details'\r\n                    },\r\n                    event_converted_details: {\r\n                        type: jsPsych.plugins.parameterType.STRING,\r\n                        pretty_name: 'Event converted details',\r\n                        default: null,\r\n                        description: 'Event converted details'\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    plugin.trial = function(display_element, trial){\r\n        var VENDING_MACHINE = '/static/images/vending_machine.svg';\r\n        var outcome_collection = {\r\n            MM:'/static/images/MM.png',\r\n            TT:'/static/images/TT.png',\r\n            BBQ:'/static/images/BBQ.png',\r\n        };\r\n        var OUTCOME = outcome_collection[counter_balancing[0].right];\r\n        var button_trigger = false;\r\n        var isMachineTilted = false;\r\n        var vas_holder = 0;\r\n\r\n        var new_html = \r\n            `<div id=\"jspsych-stimulus\" class='vvr-question-container vvr-question-right'>\r\n                <div class='vvr-question-a'>\r\n                    <p>${trial.vars.question_text_a1}</p>\r\n                    <div class=\"outcome-container-learning\"><img src='${OUTCOME}'/></div>\r\n                    <p style='padding:2rem 0'>${trial.vars.question_text_a2}</p>\r\n                    <img class=\"vending-machine\" src='${VENDING_MACHINE}'/>\r\n                </div>\r\n                <div class='vvr-question-b' style='display: none'>\r\n                    <p>${trial.vars.question_text_b1}</p>\r\n                    <div class=\"votes-container\">\r\n                        <div id=\"slider\">\r\n                            <div class=\"description\">\r\n                                <div class=\"description--left\">${trial.vars.question_text_b2}</div>\r\n                                <div class=\"description--center\"></div>\r\n                                <div class=\"description--right\">${trial.vars.question_text_b3}</div>\r\n                            </div>\r\n                        </div>\r\n                        <button id=\"button\" class=\"confirm-button btn\">Submit answer</button>\r\n                        <ul>${trial.vars.question_text_b4}</ul>\r\n                    </div>\r\n                </div>\r\n            </div>`;\r\n\r\n        // store response\r\n        var response = {\r\n            trial_events: []\r\n        };\r\n        var timestamp_onload = jsPsych.totalTime();\r\n\r\n        response.trial_events.push({\r\n            \"event_type\": trial.details.a.event_type,\r\n            \"event_raw_details\": trial.details.a.event_raw_details,\r\n            \"event_converted_details\": trial.details.a.event_converted_details,\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n\r\n        \r\n        display_element.innerHTML = new_html;\r\n\r\n        $(display_element).append(\r\n            '<div id=\"dialog-message\" style=\"display:none\">' + \r\n            '<p>' + trial.vars.popup_text + '</p>' +\r\n            '</div>'\r\n        );\r\n\r\n        $(\"#slider\").slider({\r\n            value: 5,\r\n            min: 0,\r\n            max: 10,\r\n            step: 0.01,\r\n            change: function(event, ui) {\r\n                $(\"#button\").removeClass('disabled');\r\n                button_trigger = true;\r\n                vas_holder = ui.value.toFixed(2);\r\n                response.trial_events.push({\r\n                    \"event_type\": 'VAS answer has been made',\r\n                    \"event_raw_details\": ui.value.toFixed(2),\r\n                    \"event_converted_details\": ui.value.toFixed(2) + ' answer has been made',\r\n                    \"timestamp\": jsPsych.totalTime(),\r\n                    \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n                });\r\n            }\r\n        })\r\n\r\n        \r\n         $(\"#button\").click(function() {\r\n            response.trial_events.push({\r\n                \"event_type\": 'button click',\r\n                \"event_raw_details\": '\\'submit button\\' was clicked',\r\n                \"event_converted_details\": '\\'submit button\\' was clicked',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n            if(button_trigger) {\r\n                end_trial();\r\n                button_trigger = false;\r\n            } else {\r\n                $( \"#dialog-message\" ).dialog({\r\n                    modal: true,\r\n                    buttons: {\r\n                    Ok: function() {\r\n                        $( this ).dialog( \"close\" );\r\n                    }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        function showNextQuestion() {\r\n            $('.vvr-question-b').fadeIn('slow');   \r\n            response.trial_events.push({\r\n                \"event_type\": trial.details.b.event_type,\r\n                \"event_raw_details\": trial.details.b.event_raw_details,\r\n                \"event_converted_details\": trial.details.b.event_converted_details,\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n        }\r\n\r\n\r\n        // function to handle responses by the subject\r\n        var after_response = function(info) {\r\n\r\n            if(info.key_release === undefined) {\r\n                response.trial_events.push({\r\n                  \"event_type\": \"key press\",\r\n                  \"event_raw_details\": info.key,\r\n                  \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n                  \"timestamp\": jsPsych.totalTime(),\r\n                  \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n                });\r\n            } else {\r\n                response.trial_events.push({\r\n                  \"event_type\": \"key release\",\r\n                  \"event_raw_details\": info.key_release,\r\n                  \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n                  \"timestamp\": jsPsych.totalTime(),\r\n                  \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n                });\r\n            }\r\n\r\n            if(info.key === left_tilt && !isMachineTilted) {\r\n                $(\".vending-machine\").css({\r\n                    \"transform\":  \"rotate(\" + shake_left_rotate + \"deg) translateX(\" + shake_left_translateX + \"%)\",\r\n                    \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\r\n                });\r\n                vvrIsCorrect = false;\r\n                isMachineTilted = true;\r\n                ++loop_node_counter_max_num_incorrect;\r\n                loop_node_counter_max_num_correct = 0;\r\n                showNextQuestion();\r\n            } else if (info.key === right_tilt && !isMachineTilted) {\r\n                $(\".vending-machine\").css({\r\n                    \"transform\":  \"rotate(\" + shake_right_rotate + \"deg) translateX(\" + shake_right_translateX + \"%)\",\r\n                    \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\r\n                });\r\n                vvrIsCorrect = true;\r\n                isMachineTilted = true;\r\n                ++loop_node_counter_max_num_correct;\r\n                showNextQuestion();\r\n            }\r\n            \r\n          \r\n        }\r\n\r\n\r\n        // function to end trial when it is time\r\n        var end_trial = function() {\r\n\r\n            // kill any remaining setTimeout handlers\r\n            jsPsych.pluginAPI.clearAllTimeouts();\r\n\r\n            // kill keyboard listeners\r\n            if (typeof keyboardListener !== 'undefined') {\r\n                jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n                jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n            }\r\n\r\n            // gather the data to store for the trial\r\n            var trial_data = {\r\n                \"stage_name\": JSON.stringify(trial.stage_name),\r\n                \"vvr_stage\": JSON.stringify(trial.vvr_stage),\r\n                \"stimulus\": trial.stimulus,\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"block_number\": loop_node_counter_vvr,\r\n                \"item_id\": 1,\r\n                \"food_item\": OUTCOME.slice(15),\r\n                \"correct\": vvrIsCorrect ? 'y':'n',\r\n                \"strength_of_belief\": vas_holder,\r\n                \"events\": JSON.stringify(response.trial_events)\r\n            };\r\n\r\n            // clear the display\r\n            display_element.innerHTML = '';\r\n\r\n            // move on to the next trial\r\n            jsPsych.finishTrial(trial_data);\r\n        };\r\n\r\n        // start the response listener\r\n        if (trial.choices != jsPsych.NO_KEYS) {\r\n            var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n                callback_function: after_response,\r\n                valid_responses: trial.choices,\r\n                rt_method: 'performance',\r\n                persist: true,\r\n                allow_held_key: false\r\n            });\r\n            var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n                callback_function: after_response,\r\n                valid_responses: trial.choices,\r\n                rt_method: 'date',\r\n                persist: false,\r\n                allow_held_key: false\r\n            });\r\n        }\r\n\r\n            // end trial if trial_duration is set\r\n        if (trial.trial_duration !== null) {\r\n            jsPsych.pluginAPI.setTimeout(function() {\r\n            end_trial();\r\n            }, trial.trial_duration);\r\n        }\r\n    }\r\n\r\n    return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-right.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-pav-condition.js":
/*!************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-pav-condition.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * jsPsych plugin for showing animations and recording keyboard responses\n * Josh de Leeuw\n *\n * documentation: docs.jspsych.org\n */\n\njsPsych.plugins.animation = (function () {\n\n    var plugin = {};\n\n    jsPsych.pluginAPI.registerPreload('animation', 'stimuli', 'image');\n\n    plugin.info = {\n        name: 'animation',\n        description: '',\n        parameters: {\n            stimuli: {\n                type: jsPsych.plugins.parameterType.STRING,\n                pretty_name: 'Stimuli',\n                default: undefined,\n                array: true,\n                description: 'The images to be displayed.'\n            },\n            frame_time: {\n                type: jsPsych.plugins.parameterType.INT,\n                pretty_name: 'Frame time',\n                default: 250,\n                description: 'Duration to display each image.'\n            },\n            frame_isi: {\n                type: jsPsych.plugins.parameterType.INT,\n                pretty_name: 'Frame gap',\n                default: 0,\n                description: 'Length of gap to be shown between each image.'\n            },\n            sequence_reps: {\n                type: jsPsych.plugins.parameterType.INT,\n                pretty_name: 'Sequence repetitions',\n                default: 1,\n                description: 'Number of times to show entire sequence.'\n            },\n            choices: {\n                type: jsPsych.plugins.parameterType.KEYCODE,\n                pretty_name: 'Choices',\n                default: jsPsych.ALL_KEYS,\n                array: true,\n                description: 'Keys subject uses to respond to stimuli.'\n            },\n            prompt: {\n                type: jsPsych.plugins.parameterType.STRING,\n                pretty_name: 'Prompt',\n                default: null,\n                description: 'Any content here will be displayed below stimulus.'\n            }\n        }\n    }\n\n    plugin.trial = function (display_element, trial) {\n\n        // store response\n        var response = {\n            trial_events: []\n        };\n        var timestamp_onload = jsPsych.totalTime();\n\n        trial.stimuli = [];\n        var pav_stimuli_arr = jsPsych.randomization.shuffle(pav_stimuli)\n\n        pav_stimuli_arr.forEach(element => {\n            trial.stimuli.push(element.stimuli);\n        });\n\n        var html = \"\";\n\n        var interval_time = trial.frame_time + trial.frame_isi;\n        var animate_frame = -1;\n        var reps = 0;\n        var startTime = performance.now();\n        var animation_sequence = [];\n        var responses = [];\n        var current_stim = \"\";\n\n        \n        display_element.innerHTML = \n        html += '<style id=\"pav-conditioning\">' +\n                    '.outcome_transparent { height: 340px; }' +\n                '</style>' +\n        '<svg class=\"vending-machine\"  viewBox=\"0 0 253 459\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n        '<rect x=\"27\" y=\"20\" width=\"203\" height=\"359\" fill=\"#000\"/>' +\n        '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M253 0V440.506H209.527V459H44.6212V440.506H0V0H253ZM222 279H32V363H222V279ZM59.957 282.531L133.253 309.209L118.546 349.616L45.2501 322.938L59.957 282.531ZM86 210H32V256H86V210ZM154 210H100V256H154V210ZM222 210H168V256H222V210ZM86 148H32V194H86V148ZM154 148H100V194H154V148ZM222 148H168V194H222V148ZM86 86H32V132H86V86ZM154 86H100V132H154V86ZM222 86H168V132H222V86ZM86 24H32V70H86V24ZM154 24H100V70H154V24ZM222 24H168V70H222V24Z\" fill=\"white\"/>' +\n        '</svg>' +\n        '<div class=\"outcome_transparent\"></div>';\n\n\n        var animate_interval = setInterval(function () {\n            var showImage = true;\n            display_element.innerHTML = ''; // clear everything\n            animate_frame++;\n            if (animate_frame == trial.stimuli.length) {\n                animate_frame = 0;\n                reps++;\n                if (reps >= trial.sequence_reps) {\n                    endTrial();\n                    clearInterval(animate_interval);\n                    showImage = false;\n                }\n            }\n            if (showImage) {\n                show_next_frame();\n            }\n        }, interval_time);\n\n\n        function show_next_frame() {\n            // show image\n            display_element.innerHTML = \n            '<div>' +\n            '<svg class=\"vending-machine\"  viewBox=\"0 0 253 459\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n            '<rect x=\"27\" y=\"20\" width=\"203\" height=\"359\" fill=\"#000\"/>' +\n            '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M253 0V440.506H209.527V459H44.6212V440.506H0V0H253ZM222 279H32V363H222V279ZM59.957 282.531L133.253 309.209L118.546 349.616L45.2501 322.938L59.957 282.531ZM86 210H32V256H86V210ZM154 210H100V256H154V210ZM222 210H168V256H222V210ZM86 148H32V194H86V148ZM154 148H100V194H154V148ZM222 148H168V194H222V148ZM86 86H32V132H86V86ZM154 86H100V132H154V86ZM222 86H168V132H222V86ZM86 24H32V70H86V24ZM154 24H100V70H154V24ZM222 24H168V70H222V24Z\" fill=\"white\"/>' +\n            '</svg>' +\n            '</div>' +\n            '<div style=\"height: 340px\"><img src=\"' + trial.stimuli[animate_frame] + '\" id=\"jspsych-animation-image\" style=\"margin-top: 4rem; \"></div>';\n\n            current_stim = trial.stimuli[animate_frame];\n\n            response.trial_events.push({\n                \"event_type\": 'image appears',\n                \"event_raw_details\": 'outcome image appears',\n                \"event_converted_details\": trial.stimuli[animate_frame] + ' image appears',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n\n            // record when image was shown\n            animation_sequence.push({\n                \"stimulus\": trial.stimuli[animate_frame],\n                \"time\": performance.now() - startTime\n            });\n\n            if (trial.prompt !== null) {\n                display_element.innerHTML += trial.prompt;\n            }\n\n            if (trial.frame_isi > 0) {\n                var color = pav_stimuli_arr[animate_frame].color;\n                $('.vending-machine rect').css({ fill: color });\n                response.trial_events.push({\n                    \"event_type\": 'vending machine appears',\n                    \"event_raw_details\": color + ' vending machine ',\n                    \"event_converted_details\": color + ' vending machine',\n                    \"timestamp\": jsPsych.totalTime(),\n                    \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                });\n                jsPsych.pluginAPI.setTimeout(function () {\n                    display_element.querySelector('#jspsych-animation-image').style.visibility = 'hidden';\n                    current_stim = 'blank';\n                    // record when blank image was shown\n                    $('.vending-machine rect').css({ fill: '#000' });\n                    animation_sequence.push({\n                        \"stimulus\": 'blank',\n                        \"time\": performance.now() - startTime\n                    });\n                    response.trial_events.push({\n                        \"event_type\": 'vending machine appears',\n                        \"event_raw_details\": 'white vending machine ',\n                        \"event_converted_details\": 'white vending machine',\n                        \"timestamp\": jsPsych.totalTime(),\n                        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                    });\n                }, trial.frame_time);\n            }\n        }\n\n        var after_response = function (info) {\n\n            if(info.key_release === undefined) {\n                response.trial_events.push({\n                  \"event_type\": \"key press\",\n                  \"event_raw_details\": info.key,\n                  \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n                  \"timestamp\": jsPsych.totalTime(),\n                  \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                });\n              } else {\n                  response.trial_events.push({\n                    \"event_type\": \"key release\",\n                    \"event_raw_details\": info.key_release,\n                    \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n                    \"timestamp\": jsPsych.totalTime(),\n                    \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n                  });\n            }\n        }\n\n        // hold the jspsych response listener object in memory\n        // so that we can turn off the response collection when\n        // the trial ends\n\n        function endTrial() {\n\n            // kill keyboard listeners\n            if (typeof keyboardListener !== 'undefined') {\n                jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n                jsPsych.pluginAPI.cancelClickResponse(clickListener);\n            }\n\n            var trial_data = {\n                \"stage_name\": JSON.stringify(trial.stage_name),\n                \"animation_sequence\": JSON.stringify(animation_sequence),\n                \"responses\": JSON.stringify(responses),\n                \"events\": JSON.stringify(response.trial_events)\n            };\n\n            jsPsych.finishTrial(trial_data);\n        }\n\n        var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n            callback_function: after_response,\n            valid_responses: trial.choices,\n            rt_method: 'performance',\n            persist: true,\n            allow_held_key: false\n        });\n\n        var clickListener = jsPsych.pluginAPI.getMouseResponse({\n            callback_function: after_response,\n            valid_responses: jsPsych.ALL_KEYS,\n            rt_method: 'performance',\n            persist: true,\n            allow_held_key: false\n        });\n    };\n\n    return plugin;\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-pav-condition.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-multi-choice.js":
/*!******************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-multi-choice.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * jspsych-survey-multi-choice\n * a jspsych plugin for multiple choice survey questions\n *\n * Shane Martin\n *\n * documentation: docs.jspsych.org\n *\n */\n\n\njsPsych.plugins['survey-multi-choice'] = (function() {\n  var plugin = {};\n\n  plugin.info = {\n    name: 'survey-multi-choice',\n    description: '',\n    parameters: {\n      questions: {\n        type: jsPsych.plugins.parameterType.COMPLEX,\n        array: true,\n        pretty_name: 'Questions',\n        nested: {\n          prompt: {\n            type: jsPsych.plugins.parameterType.STRING,\n            pretty_name: 'Prompt',\n            default: undefined,\n            description: 'The strings that will be associated with a group of options.'\n          },\n          options: {\n            type: jsPsych.plugins.parameterType.STRING,\n            pretty_name: 'Options',\n            array: true,\n            default: undefined,\n            description: 'Displays options for an individual question.'\n          },\n          required: {\n            type: jsPsych.plugins.parameterType.BOOL,\n            pretty_name: 'Required',\n            default: false,\n            description: 'Subject will be required to pick an option for each question.'\n          },\n          horizontal: {\n            type: jsPsych.plugins.parameterType.BOOL,\n            pretty_name: 'Horizontal',\n            default: false,\n            description: 'If true, then questions are centered and options are displayed horizontally.'\n          },\n          name: {\n            type: jsPsych.plugins.parameterType.STRING,\n            pretty_name: 'Question Name',\n            default: '',\n            description: 'Controls the name of data values associated with this question'\n          }\n        }\n      },\n      randomize_question_order: {\n        type: jsPsych.plugins.parameterType.BOOL,\n        pretty_name: 'Randomize Question Order',\n        default: false,\n        description: 'If true, the order of the questions will be randomized'\n      },\n      preamble: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Preamble',\n        default: null,\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\n      },\n      button_label: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Button label',\n        default:  'Continue',\n        description: 'Label of the button.'\n      }\n    }\n  }\n  plugin.trial = function(display_element, trial) {\n\n    // store response\n    var response = {\n        trial_events: []\n    };\n    var timestamp_onload = jsPsych.totalTime();\n\n    var plugin_id_name = \"jspsych-survey-multi-choice\";\n\n    var html = \"\";\n\n    // inject CSS for trial\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\n    html += \".jspsych-survey-multi-choice-question { margin-top: 2em; margin-bottom: 2em; text-align: left; }\"+\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\"+\n      \".jspsych-survey-multi-choice-text {font-size: 3rem;}\"+\n      \".vending-machine { margin-bottom: 1.6rem;}\"+\n      \"label.jspsych-survey-multi-choice-text { font-size: 2rem; padding-left: 2rem;}\"+\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\"+\n      \".jspsych-survey-multi-choice-option { line-height: 2; }\"+\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\"+\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\n    html += '</style>';\n\n    // show preamble text\n    if(trial.preamble !== null){\n      html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">'+trial.preamble+'</div>';\n    }\n\n    if(pav_multi_choice_counter === 4) {\n      pav_multi_choice_counter = 0;\n      pav_multi_choice_array = jsPsych.randomization.shuffle(pav_multi_choice_array);\n    }\n\n    html += '<div id=\"jspsych-survey-multi-choice-img\" class=\"jspsych-survey-multi-choice-preamble\">' +\n      '<svg class=\"vending-machine\"  viewBox=\"0 0 253 459\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">' +\n      '<rect x=\"27\" y=\"20\" width=\"203\" height=\"359\" fill=\"#000\"/>' +\n      '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M253 0V440.506H209.527V459H44.6212V440.506H0V0H253ZM222 279H32V363H222V279ZM59.957 282.531L133.253 309.209L118.546 349.616L45.2501 322.938L59.957 282.531ZM86 210H32V256H86V210ZM154 210H100V256H154V210ZM222 210H168V256H222V210ZM86 148H32V194H86V148ZM154 148H100V194H154V148ZM222 148H168V194H222V148ZM86 86H32V132H86V86ZM154 86H100V132H154V86ZM222 86H168V132H222V86ZM86 24H32V70H86V24ZM154 24H100V70H154V24ZM222 24H168V70H222V24Z\" fill=\"white\"/>' +\n      '</svg>' +\n    '</div>';\n\n    // form element\n    html += '<form id=\"jspsych-survey-multi-choice-form\">';\n    \n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n    // so that the data are always associated with the same question regardless of order\n    var question_order = [];\n    for(var i=0; i<trial.questions.length; i++){\n      question_order.push(i);\n    }\n    if(trial.randomize_question_order){\n      question_order = jsPsych.randomization.shuffle(question_order);\n    }\n    \n    // add multiple-choice questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      \n      // get question based on question_order\n      var question = trial.questions[question_order[i]];\n      var question_id = question_order[i];\n      \n      // create question container\n      var question_classes = ['jspsych-survey-multi-choice-question'];\n      if (question.horizontal) {\n        question_classes.push('jspsych-survey-multi-choice-horizontal');\n      }\n\n      html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+'\"  data-name=\"'+question.name+'\">';\n\n      // add question text\n      html += '<p class=\"jspsych-survey-multi-choice-text survey-multi-choice\">' + question.prompt \n      if(question.required){\n        html += \"<span class='required'>*</span>\";\n      }\n      html += '</p>';\n\n      // create option radio buttons\n      for (var j = 0; j < question.options.length; j++) {\n        // add label and question text\n        var option_id_name = \"jspsych-survey-multi-choice-option-\"+question_id+\"-\"+j;\n        var input_name = 'jspsych-survey-multi-choice-response-'+question_id;\n        var input_id = 'jspsych-survey-multi-choice-response-'+question_id+'-'+j;\n\n        var required_attr = question.required ? 'required' : '';\n\n        // add radio button container\n        html += '<div id=\"'+option_id_name+'\" class=\"jspsych-survey-multi-choice-option\">';\n        html += '<input type=\"radio\" name=\"'+input_name+'\" id=\"'+input_id+'\" value=\"'+question.options[j].value+'\" '+required_attr+'></input>';\n        html += '<label class=\"jspsych-survey-multi-choice-text\" for=\"'+input_id+'\">'+question.options[j].name+'</label>';\n        html += '</div>';\n      }\n\n      html += '</div>';\n    }\n    \n    // add submit button\n    html += '<input type=\"submit\" id=\"'+plugin_id_name+'-next\" class=\"'+plugin_id_name+' jspsych-btn\"' + (trial.button_label ? ' value=\"'+trial.button_label + '\"': '') + '></input>';\n    html += '</form>';\n\n    // render\n    display_element.innerHTML = html;\n\n    var color = pav_multi_choice_array[pav_multi_choice_counter].color;\n    $('.vending-machine rect').css({ fill: color });\n\n    response.trial_events.push({\n      \"event_type\": 'vending machine appears',\n      \"event_raw_details\": color + ' vending machine ',\n      \"event_converted_details\": color + ' vending machine appears',\n      \"timestamp\": jsPsych.totalTime(),\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n    });\n\n    var after_response = function (info) {\n\n        if(info.key_release === undefined) {\n            response.trial_events.push({\n              \"event_type\": \"key press\",\n              \"event_raw_details\": info.key,\n              \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n              \"timestamp\": jsPsych.totalTime(),\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n          } else {\n              response.trial_events.push({\n                \"event_type\": \"key release\",\n                \"event_raw_details\": info.key_release,\n                \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n        }\n    }\n\n    document.querySelector('form').addEventListener('submit', function(event) {\n      event.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = endTime - startTime;\n\n      var color_value = pav_multi_choice_array[pav_multi_choice_counter].value;\n      var color_response_submitted = pav_multi_choice_array[pav_multi_choice_counter].response;\n\n      // create object to hold responses\n      var question_data = {};\n      for(var i=0; i<trial.questions.length; i++){\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-'+i);\n        var id = \"Q\" + i;\n        if(match.querySelector(\"input[type=radio]:checked\") !== null){\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\n          if(color_value === val) {\n            pav_is_correct = true;\n            pav_correct_holder ++;\n          } else {\n            pav_incorrect_holder ++;\n          }\n        } else {\n          var val = \"\";\n        }\n\n        var obje = {};\n        var name = id;\n        if(match.attributes['data-name'].value !== ''){\n          name = match.attributes['data-name'].value;\n        }\n        obje[name] = val;\n        Object.assign(question_data, obje);\n      }\n      // save data\n      var trial_data = {\n        \"stage_name\": JSON.stringify(trial.stage_name),\n        \"response\": JSON.stringify(color_value),\n        \"response_submitted\": JSON.stringify(color_response_submitted),\n        \"responses\": JSON.stringify(question_data),\n        \"question_order\": JSON.stringify(question_order),\n        \"event_raw_details\": pav_is_correct ? 'y' : 'n',\n        \"events\": JSON.stringify(response.trial_events)\n      };\n      display_element.innerHTML = '';\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== 'undefined') {\n        jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n        jsPsych.pluginAPI.cancelClickResponse(clickListener);\n      }\n\n      // next trial\n      jsPsych.finishTrial(trial_data);\n    });\n\n    var startTime = performance.now();\n\n    var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n    });\n\n    var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n    });\n  };\n\n  return plugin;\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-multi-choice.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRM.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRM.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['ASRM'] = (function () {\r\n  var plugin = {};\r\n\r\n  plugin.info = {\r\n    name: 'ASRM',\r\n    stage_name: 'ASRM',\r\n    description: '',\r\n    parameters: {\r\n      questions: {\r\n        type: jsPsych.plugins.parameterType.COMPLEX,\r\n        array: true,\r\n        pretty_name: 'Questions',\r\n        nested: {\r\n          prompt: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Prompt',\r\n            default: undefined,\r\n            description: 'The strings that will be associated with a group of options.'\r\n          },\r\n          options: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Options',\r\n            array: true,\r\n            default: undefined,\r\n            description: 'Displays options for an individual question.'\r\n          },\r\n          required: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Required',\r\n            default: false,\r\n            description: 'Subject will be required to pick an option for each question.'\r\n          },\r\n          horizontal: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Horizontal',\r\n            default: false,\r\n            description: 'If true, then questions are centered and options are displayed horizontally.'\r\n          },\r\n          name: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Question Name',\r\n            default: '',\r\n            description: 'Controls the name of data values associated with this question'\r\n          }\r\n        }\r\n      },\r\n      randomize_question_order: {\r\n        type: jsPsych.plugins.parameterType.BOOL,\r\n        pretty_name: 'Randomize Question Order',\r\n        default: false,\r\n        description: 'If true, the order of the questions will be randomized'\r\n      },\r\n      preamble: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Preamble',\r\n        default: null,\r\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n      },\r\n      button_label: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Button label',\r\n        default: 'Continue',\r\n        description: 'Label of the button.'\r\n      },\r\n      time_stamp: {\r\n        type: jsPsych.plugins.parameterType.OBJECT,\r\n        pretty_name: 'Timestamp',\r\n        default: {},\r\n        description: 'Object for collecting timestamp'\r\n      },\r\n      event_type: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event type',\r\n        default: null,\r\n        description: 'Event type'\r\n      },\r\n      event_raw_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event raw details',\r\n        default: null,\r\n        description: 'Event raw details'\r\n      },\r\n      event_converted_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event converted details',\r\n        default: null,\r\n        description: 'Event converted details'\r\n      }\r\n    }\r\n  }\r\n  plugin.trial = function (display_element, trial) {\r\n    var plugin_id_name = \"jspsych-survey-multi-choice-ASRM\";\r\n\r\n    var html = \"\";\r\n\r\n    // store response\r\n    var response = {\r\n      trial_events: []\r\n    };\r\n    var timestamp_onload = jsPsych.totalTime();\r\n\r\n    response.trial_events.push({\r\n      \"event_type\": trial.event_type,\r\n      \"event_raw_details\": trial.event_raw_details,\r\n      \"event_converted_details\": trial.event_converted_details,\r\n      \"timestamp\": jsPsych.totalTime(),\r\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n    });\r\n\r\n    $('body').prepend(\r\n      `<header>\r\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n            <p class=\"navbar-text\">${plugin.info.name}</p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>`);\r\n\r\n    // inject CSS for trial\r\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n    html += \".jspsych-survey-multi-choice-question { display: flex; margin-bottom: 2em; text-align: left; }\" +\r\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n      \".jspsych-survey-multi-choice-option { line-height: 2; }\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\r\n      \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n      \".jspsych-btn { margin: 100px 0; }\" +\r\n      \".jspsych-content { margin-top: 130px;}\" +\r\n      \".jspsych-survey-highlight { cursor: pointer }\" +\r\n      \".jspsych-survey-multi-choice-preamble { max-width: 1000px; text-align: left; border-bottom: 1px solid;} .jspsych-survey-multi-choice-preamble h2 {text-align: center} .preamble-wrapper {display: flex;} .preamble-wrapper p {padding-left: 2rem;}\" +\r\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\r\n    html += '</style>';\r\n\r\n    // show preamble text\r\n    if (trial.preamble !== null) {\r\n      html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n    }\r\n\r\n    // form element\r\n    html += '<div id=\"' + plugin_id_name + '\">';\r\n    html += '<form id=\"jspsych-survey-multi-choice-form\">';\r\n\r\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n    // so that the data are always associated with the same question regardless of order\r\n    var question_order = [];\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n      question_order.push(i);\r\n    }\r\n    if (trial.randomize_question_order) {\r\n      question_order = jsPsych.randomization.shuffle(question_order);\r\n    }\r\n\r\n    // add multiple-choice questions\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n\r\n      // get question based on question_order\r\n      var question = trial.questions[question_order[i]];\r\n      var question_id = question_order[i];\r\n\r\n      // create question container\r\n      var question_classes = ['jspsych-survey-multi-choice-question'];\r\n      if (question.horizontal) {\r\n        question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n      }\r\n\r\n      html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n\r\n      // add question text\r\n      html += '<div><p class=\"jspsych-survey-multi-choice-question survey-multi-choice \" style=\"padding-top: 3px;\">' + (i + 1) + ')'\r\n      // question.required\r\n      html += '</p></div>';\r\n      html += '<div style=\"padding-left: 2rem;\">';\r\n\r\n      // create option radio buttons\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        // add label and question text\r\n        var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n        var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n        var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n\r\n        var required_attr = question.required ? 'required' : '';\r\n\r\n        // add radio button container\r\n        html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n        html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\"><span style=\"padding-right: 1rem\">' + j + '</span> ' + question.options[j] + '</label>';\r\n        html += '<input hidden type=\"radio\" name=\"' + input_name + '\" id=\"' + input_id + '\" value=\"' + j + '\" ' + required_attr + '></input>';\r\n        html += '</div>';\r\n      }\r\n\r\n      html += '</div></div>';\r\n    }\r\n\r\n    // add submit button\r\n    html += '<input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input>';\r\n    html += '</form>';\r\n\r\n    html +=\r\n    `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n        <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n          <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n            <header class=\"modal__header\">\r\n              <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                Warning!\r\n              </h2>\r\n              <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n            </header>\r\n            <main class=\"modal__content\" id=\"modal-1-content\">\r\n              <p>\r\n              ${popup_text_web_forms}\r\n              </p>\r\n            </main>\r\n            <footer class=\"modal__footer\">\r\n              <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n            </footer>\r\n          </div>\r\n        </div>\r\n    </div>`;\r\n    \r\n    // render\r\n    display_element.innerHTML = html;\r\n\r\n    // function to handle responses by the subject\r\n    var after_response = function (info) {\r\n\r\n      if (info.key_release === undefined) {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key press\",\r\n          \"event_raw_details\": info.key,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n        \r\n        if(info.el) {\r\n          if(info.el.dataset.timeStamp) {\r\n            trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n          }\r\n          if(info.el.dataset.questionNumber) {\r\n            response.trial_events.push({\r\n              \"event_type\": \"answer displayed\",\r\n              \"event_raw_details\": info.el.dataset.questionNumber,\r\n              \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n          if(info.el.type === 'submit') {\r\n            response.trial_events.push({\r\n              \"event_type\": \"button clicked\",\r\n              \"event_raw_details\": 'Submit',\r\n              \"event_converted_details\": '\"Submit\" selected',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key release\",\r\n          \"event_raw_details\": info.key_release,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n      }\r\n    }\r\n\r\n    $('.jspsych-survey-highlight').click(function () {\r\n      $(this).next('input').prop(\"checked\", true);\r\n      $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n      $(this).addClass('bg-primary');\r\n      $(this).closest('input').click();\r\n    })\r\n\r\n    document.querySelector('form').addEventListener('submit', function (event) {\r\n      event.preventDefault();\r\n      // measure response time\r\n      var endTime = performance.now();\r\n      var response_time = endTime - startTime;\r\n\r\n      // create object to hold responses\r\n      var question_data = {};\r\n      var timestamp_data = {};\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n        var id = i + 1;\r\n        // console.log(match.querySelector(\"label span\"));\r\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n          $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error');\r\n        } else {\r\n          var val = \"\";\r\n          $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error');\r\n        }\r\n        var obje = {};\r\n        var name = id;\r\n        if (match.attributes['data-name'].value !== '') {\r\n          name = match.attributes['data-name'].value;\r\n        }\r\n        obje[name] = val;\r\n        timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n        Object.assign(question_data, obje);\r\n      }\r\n      \r\n      if ($(\".survey-error\").length < 1) {\r\n        // kill keyboard listeners\r\n        if (typeof keyboardListener !== 'undefined') {\r\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n        }\r\n\r\n        // save data\r\n        var trial_data = {\r\n          \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n          \"responses\": JSON.stringify(question_data),\r\n          \"timestamp\": JSON.stringify(timestamp_data),\r\n          \"question_order\": JSON.stringify(question_order),\r\n          \"events\": JSON.stringify(response.trial_events)\r\n        };\r\n\r\n        display_element.innerHTML = '';\r\n        $('.navbar').remove();\r\n\r\n        // next trial\r\n        jsPsych.finishTrial(trial_data);\r\n      } else {\r\n        MicroModal.show('modal-1');\r\n      }\r\n    });\r\n\r\n    var startTime = performance.now();\r\n\r\n    // start the response listener\r\n    var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n    var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n  };\r\n\r\n  return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRM.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRS-5.js":
/*!**********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRS-5.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['ASRS-5'] = (function () {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'Adult Attention-Deficit/Hyperactivity Disorder Self-Report Screening Scale for DSM-5',\r\n      stage_name: 'ASRS-5',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default: 'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function (display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-ASRS-5\";\r\n  \r\n      var html = \"\";\r\n  \r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n      var timestamp_onload = jsPsych.totalTime();\r\n  \r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n  \r\n      $('body').prepend(\r\n        `<header>\r\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n            <div class=\"container-fluid\">\r\n              <div class=\"navbar-header\">\r\n              <p class=\"navbar-text\">\r\n                  <b>${plugin.info.name}</b>\r\n              </p>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid }\" +\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n        \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".form-radio { top: 0; }\" +\r\n        \".jspsych-survey-multi-choice-form { max-width: 1000px; }\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\r\n        \".jspsych-survey-multi-choice-number { display: flex; height: 100%; width: 30px; text-align: center; justify-content: center; }\" +\r\n        \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1000px; padding-bottom: 1rem; }\" +\r\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between; border-bottom: 1px solid; font-weight: bold; }\" +\r\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; justify-content: space-between; padding-inline-start: 0; margin-bottom: 0; width: 60%; }\" +\r\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; border-left: 1px solid; width: 164px; align-items: center; }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \"p { margin: 0 0 0px; }\"\r\n      html += '</style>';\r\n  \r\n      // show preamble text\r\n      if (trial.preamble !== null) {\r\n        html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n      }\r\n  \r\n  \r\n      // form element\r\n      html += '<div id=' + plugin_id_name + '>';\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n  \r\n  \r\n      html +=\r\n        `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n            <div style=\"width: 40%; text-align: left;\">\r\n            <p><b>Check the box that best describes how you have felt and conducted yourself over the past 6 months.</b></p>\r\n            </div>\r\n            <ul>\r\n              <li><div>Never</div></li>\r\n              <li><div>Rarely</div></li>\r\n              <li><div>Sometimes</div></li>\r\n              <li><div>Often</div></li>\r\n              <li><div>Very often</div></li>\r\n            </ul>\r\n        </div>`\r\n  \r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        question_order.push(i);\r\n      }\r\n      if (trial.randomize_question_order) {\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n  \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n  \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n  \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 40%;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '.</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 0 10px; width: 100%;\">' + question.prompt\r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around; border-left: 1px solid;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<label hidden class=\"jspsych-survey-multi-choice-text\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + trial.title[j] + '\" ' + required_attr + '></input>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n  \r\n      // add submit button\r\n      html += '<input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input>';\r\n  \r\n  \r\n      html += '</form>';\r\n  \r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                  <header class=\"modal__header\">\r\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                      Warning!\r\n                    </h2>\r\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                  </header>\r\n                  <main class=\"modal__content\" id=\"modal-1-content\">\r\n                    <p>${popup_text_web_forms}</p>\r\n                  </main>\r\n                  <footer class=\"modal__footer\">\r\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                  </footer>\r\n                </div>\r\n              </div>\r\n          </div>`;\r\n  \r\n      // render\r\n      display_element.innerHTML = html;\r\n  \r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n  \r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n\r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n  \r\n      $('.jspsych-survey-highlight').click(function () {\r\n        $(this).next('input').prop(\"checked\", true);\r\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n        $(this).addClass('bg-primary');\r\n        $(this).closest('input').click();\r\n      })\r\n  \r\n      document.querySelector('form').addEventListener('submit', function (event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n        for (var i = 0; i < trial.questions.length; i++) {\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n          var id = i + 1;\r\n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n          } else {\r\n            var val = \"\";\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if (match.attributes['data-name'].value !== '') {\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          Object.assign(question_data, obje);\r\n        }\r\n  \r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n  \r\n      });\r\n  \r\n      var startTime = performance.now();\r\n  \r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRS-5.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-AUDIT.js":
/*!*********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-AUDIT.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['AUDIT'] = (function () {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'AUDIT',\n      stage_name: 'AUDIT',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default: 'Continue',\n          description: 'Label of the button.'\n        },\n        time_stamp: {\n          type: jsPsych.plugins.parameterType.OBJECT,\n          pretty_name: 'Timestamp',\n          default: {},\n          description: 'Object for collecting timestamp'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n      }\n    }\n    plugin.trial = function (display_element, trial) {\n      var plugin_id_name = \"jspsych-survey-multi-choice-AUDIT\";\n  \n      var html = \"\";\n  \n      // store response\n      var response = {\n        trial_events: []\n      };\n      var timestamp_onload = jsPsych.totalTime();\n  \n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n  \n      $('body').prepend(\n        `<header>\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n            <div class=\"container-fluid\">\n              <div class=\"navbar-header\">\n              <p class=\"navbar-text\">${plugin.info.name}</p>\n              </div>\n            </div>\n          </nav>\n        </header>`);\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid;}\" +\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n        \".jspsych-survey-multi-choice-option { height: 110px; display: flex; justify-content: center; align-items: center; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid; text-align: center; padding: 0 1rem;}\" +\n        \".audit-img-container { display: flex; padding-top: 2rem; } \" +\n        \".audit-img-container div { display: flex; flex-direction: column; justify-content: space-around; align-content: center; padding-left: 1rem;} \" +\n        \".jspsych-content { width: 1000px}\" +\n        \".jspsych-btn { margin: 100px 0; }\" +\n        \".jspsych-content { margin-top: 130px;}\" +\n        \"ul {list-style: none}\" +\n        \".form-radio { top: 0; }\" +\n        \".jspsych-survey-multi-choice-number { display: flex; align-items: center; height: 100%; width: 45px; text-align: center; justify-content: center; }\" +\n        \".jspsych-survey-multi-choice-preamble { text-align: left; padding-bottom: 3rem; }\" +\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between;  border-bottom: 3px solid; font-weight: bold; }\" +\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; width: 60%; justify-content: space-around; padding-inline-start: 0; margin-bottom: 0; }\" +\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; align-items: center; width: 100%; padding: 1rem; border-left: 1px solid; }\" +\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \"p { margin: 0 0 0px;}\"\n      html += '</style>';\n  \n  \n      // form element\n      html += '<div id=\"' + plugin_id_name + '\">';\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\n  \n      // show preamble text\n  \n      // show preamble text\n      if (trial.preamble !== null) {\n        html += '<div class=\"jspsych-survey-multi-choice-content\"><div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\n      }\n  \n      html +=\n        `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\n            <div style=\"width: 40%; text-align: left; border-right: 2px solid #fff; \"></div>\n            <ul>\n              <li><div>Never</div></li>\n              <li><div>Monthly or less</div></li>\n              <li><div>2-4 times a month</div></li>\n              <li><div>2-3 times a week</div></li>\n              <li><div>4 or more times a week</div></li>\n            </ul>\n        </div>`\n  \n  \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for (var i = 0; i < trial.questions.length; i++) {\n        question_order.push(i);\n      }\n      if (trial.randomize_question_order) {\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n  \n      // add multiple-choice questions\n      for (var i = 0; i < 1; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">' + question.prompt\n        // question.required\n        html += '</p></div>';\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight hidden\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\"  data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n      // add title questions\n      for (var i = 0; i < 1; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div style=\"font-weight: bold; border-top: 2px solid #fff; \" id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\">';\n        // question.required\n        html += '</div>';\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\n\n        var questionsTitle = ['1 or 2', '3 or 4', '5 or 6', '7 to 9', '10 or more'];\n        // create option radio buttons\n        for (var j = 0; j < questionsTitle.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n          \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<p>' + questionsTitle[j] + '</p>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n      for (var i = 1; i < 2; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">' + question.prompt\n        // question.required\n        html += '</p></div>';\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight hidden\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\"  data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n\n      for (var i = 1; i < 2; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div style=\"font-weight: bold; border-top: 2px solid #fff; \" id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\">';\n        // question.required\n        html += '</div>';\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\n\n        var questionsTitle = ['Never', 'Less than monthly', 'Monthly', 'Weekly', 'Daily or almost daily'];\n        // create option radio buttons\n        for (var j = 0; j < questionsTitle.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n          \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<p>' + questionsTitle[j] + '</p>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n      for (var i = 2; i < 8; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">' + question.prompt\n        // question.required\n        html += '</p></div>';\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight hidden\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\"  data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n\n      for (var i = 7; i < 8; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div style=\"font-weight: bold; border-top: 2px solid #fff; \" id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\">';\n        // question.required\n        html += '</div>';\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\n\n        var questionsTitle = ['No', 'Yes but not in the last year', 'Yes, during the last year'];\n        // create option radio buttons\n        for (var j = 0; j < questionsTitle.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n          \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<p>' + questionsTitle[j] + '</p>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n      for (var i = 8; i < 10; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">' + question.prompt\n        // question.required\n        html += '</p></div>';\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight hidden\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\"  data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n      html += '</div>';\n  \n      // add submit button\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\n      html += '</form>';\n  \n      html +=\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\n                  <header class=\"modal__header\">\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\n                      Warning!\n                    </h2>\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\n                  </header>\n                  <main class=\"modal__content\" id=\"modal-1-content\">\n                    <p>\n                    ${popup_text_web_forms}\n                    </p>\n                  </main>\n                  <footer class=\"modal__footer\">\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\n                  </footer>\n                </div>\n              </div>\n          </div>`;\n  \n      // render\n      display_element.innerHTML = html;\n  \n      // function to handle key press responses\n      var after_response = function (info) {\n  \n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n  \n      $('.jspsych-survey-highlight').click(function () {\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\n        $(this).addClass('bg-primary');\n        $(this).next('input').prop(\"checked\", true);\n        $(this).closest('input').click();\n      })\n  \n      document.querySelector('form').addEventListener('submit', function (event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n  \n        // create object to hold responses\n        var question_data = {};\n        var timestamp_data = {};\n        for (var i = 0; i < trial.questions.length; i++) {\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\n          var id = i + 1;\n          \n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\n          } else {\n            var val = \"\";\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\n          }\n          var obje = {};\n          var name = id;\n      \n          if (match.attributes['data-name'].value !== '') {\n            name = match.attributes['data-name'].value;\n          }\n          obje[name] = val;\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\n          Object.assign(question_data, obje);\n        }\n  \n        if ($(\".survey-error-after\").length < 1) {\n          // kill keyboard listeners\n          if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n          }\n  \n          // save data\n          var trial_data = {\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"timestamp\": JSON.stringify(timestamp_data),\n            \"question_order\": JSON.stringify(question_order),\n            \"events\": JSON.stringify(response.trial_events)\n          };\n  \n          display_element.innerHTML = '';\n          $('.navbar').remove();\n  \n          // next trial\n          jsPsych.finishTrial(trial_data);\n        } else {\n          MicroModal.show('modal-1');\n        }\n  \n      });\n  \n      var startTime = performance.now();\n  \n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-AUDIT.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DASS-21.js":
/*!***********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DASS-21.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['DASS'] = (function() {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'DASS',\n      stage_name: 'DASS',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default:  'Continue',\n          description: 'Label of the button.'\n        },\n        time_stamp: {\n          type: jsPsych.plugins.parameterType.OBJECT,\n          pretty_name: 'Timestamp',\n          default: {},\n          description: 'Object for collecting timestamp'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n      }\n    }\n    plugin.trial = function(display_element, trial) {\n      var plugin_id_name = \"jspsych-survey-multi-choice-DASS\";\n  \n      var html = \"\";\n\n      // store response\n      var response = {\n        trial_events: []\n      };\n      var timestamp_onload = jsPsych.totalTime();\n\n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n\n   $('body').prepend(\n    `<header>\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n          <div class=\"container-fluid\">\n            <div class=\"navbar-header\">\n            <p class=\"navbar-text\"><b>${plugin.info.name}</b></p>\n            </div>\n          </div>\n        </nav>\n      </header>`);\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; }\"+\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\"+\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\"+\n        \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\"+\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\"+\n        \".jspsych-survey-multi-choice-content { outline: 1px solid #fff;}\" +\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\n        \".jspsych-btn { margin: 100px 0; }\" +\n        \".jspsych-content { margin-top: 130px;}\" +\n        \"ul {list-style: none}\" +\n        \"#jspsych-survey-multi-choice-0 .jspsych-survey-multi-choice-question-text { border-top: 1px solid #fff; }\" +\n        \"#jspsych-survey-multi-choice-0 .jspsych-survey-multi-choice-option { border-top: 1px solid #fff; }\" +\n        \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\n        \".jspsych-survey-multi-choice-number { display: flex; align-items: center; height: 100%; width: 50px; border-right: 1px solid #fff; text-align: center; justify-content: center; }\" +\n        \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1000px; padding-bottom: 1rem; padding-left: 3rem; }\" +\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between;  }\" +\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; width: 30%; justify-content: space-around; padding-inline-start: 0; margin-bottom: 0; }\" +\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; width: 100%; }\" +\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \"p { margin: 0 0 0px; }\"\n      html += '</style>';\n  \n        // show preamble text\n        if(trial.preamble !== null){\n            html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">'+trial.preamble+'</div>';\n        }\n            \n\n      // form element\n      html += '<div id='+ plugin_id_name + '>';\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\n      \n\n      html += \n      `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\n          <div></div>\n          <ul>\n            <li><div>N</div></li>\n            <li><div>S</div></li>\n            <li><div>O</div></li>\n            <li><div>AA</div></li>\n          </ul>\n      </div>`\n\n  \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for(var i=0; i<trial.questions.length; i++){\n        question_order.push(i);\n      }\n      if(trial.randomize_question_order){\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n      \n      // add multiple-choice questions\n      for (var i = 0; i < trial.questions.length; i++) {\n        \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n        \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+'\"  data-name=\"'+question.name+'\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; align-items: center; width: 70%;\"><span class=\"jspsych-survey-multi-choice-number\">'+ (i+1) +'</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 2.4rem 10px; width: 100%; border-bottom: 1px solid #fff; \">' + question.prompt \n        // question.required\n        html += '</p></div>';\n        html += '<div style=\"display: flex; width: 30%; justify-content: space-around; border-right: 1px solid; border-bottom: 1px solid #fff; \">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\"+question_id+\"-\"+j;\n          var input_name = 'jspsych-survey-multi-choice-response-'+question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-'+question_id+'-'+j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"'+option_id_name+'\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"'+input_id+'\">' +question.options[j]+'</label>';\n          html += '<input hidden type=\"radio\" name=\"'+input_name+'\" id=\"'+input_id+'\" value=\"'+question.options[j]+'\" '+required_attr+'></input>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n      \n      // add submit button\n      html += '<input type=\"submit\" id=\"'+plugin_id_name+'-next\" class=\"'+plugin_id_name+' jspsych-btn\"' + (trial.button_label ? ' value=\"'+trial.button_label + '\"': '') + '></input>';\n      \n\n      html += '</form>';\n      html += '</div>';\n\n      html +=\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\n            <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\n              <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\n                <header class=\"modal__header\">\n                  <h2 class=\"modal__title\" id=\"modal-1-title\">\n                    Warning!\n                  </h2>\n                  <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\n                </header>\n                <main class=\"modal__content\" id=\"modal-1-content\">\n                  <p>${popup_text_web_forms}</p>\n                </main>\n                <footer class=\"modal__footer\">\n                  <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\n                </footer>\n              </div>\n            </div>\n        </div>`;\n      \n      // render\n      display_element.innerHTML = html;\n\n      // function to handle key press responses\n      var after_response = function (info) {\n\n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n\n      $('.jspsych-survey-highlight').click(function() {\n          $(this).next('input').prop( \"checked\", true );\n          $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\n          $(this).addClass('bg-primary');\n          $(this).closest('input').click();\n      })\n  \n      document.querySelector('form').addEventListener('submit', function(event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n        // create object to hold responses\n        var question_data = {};\n        var timestamp_data = {};\n\n        for(var i=0; i<trial.questions.length; i++){\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-'+i);\n          var id = + i + 1;\n          if(match.querySelector(\"input[type=radio]:checked\") !== null){\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\n          } else {\n            var val = \"\";\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\n          }\n          var obje = {};\n          var name = id;\n          if(match.attributes['data-name'].value !== ''){\n            name = match.attributes['data-name'].value;\n          }\n          obje[name] = val;\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\n          Object.assign(question_data, obje);\n        }\n        \n        if ($(\".survey-error-after\").length < 1) {\n          // kill keyboard listeners\n          if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n          }\n  \n          // save data\n          var trial_data = {\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"timestamp\": JSON.stringify(timestamp_data),\n            \"question_order\": JSON.stringify(question_order),\n            \"events\": JSON.stringify(response.trial_events)\n          };\n  \n          display_element.innerHTML = '';\n          $('.navbar').remove();\n  \n          // next trial\n          jsPsych.finishTrial(trial_data);\n        } else {\n          MicroModal.show('modal-1');\n        }\n\n      });\n  \n      var startTime = performance.now();\n\n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DASS-21.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DEMOGRAPHICS.js":
/*!****************************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DEMOGRAPHICS.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['Demographics'] = (function () {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'Demographics',\r\n      stage_name: 'Demographics',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default: 'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function (display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice\";\r\n  \r\n      var html = \"\";\r\n      var timestamp_onload = jsPsych.totalTime();\r\n  \r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n  \r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n  \r\n      $('body').prepend(\r\n        '<header>' +\r\n          '<nav class=\"navbar navbar-inverse navbar-fixed-top\">' +\r\n            '<div class=\"container-fluid\">' +\r\n              '<div class=\"navbar-header\">' +\r\n              '<p class=\"navbar-text\">' + plugin.info.name + '</p>' +\r\n              '</div>' +\r\n            '</div>' +\r\n          '</nav>' +\r\n        '</header>');\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; align-items: center; margin-top: .2em; margin-bottom: .2em; text-align: left;  }\" +\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center; }\" +\r\n        \".jspsych-survey-multi-choice-option { line-height: 2rem; display: flex; justify-content: center; }\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: flex; flex-flow: column wrap; align-items: center; }\" +\r\n        \".jspsych-survey-multi-choice-content { border-bottom: 1px solid;}\" +\r\n        \".jspsych-survey-multi-choice-form { max-width: 1000px; }\" +\r\n        \".jspsych-survey-multi-choice-form > .jspsych-survey-multi-choice-horizontal {   outline: 1px solid #fff; margin: 3rem 0;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".form-radio { top: 0; }\" +\r\n        \"input[type='number'] { background: transparent; border: none; border-bottom: 1px solid #fff; -webkit-box-shadow: none; box-shadow: none; border-radius: 0; color: #fff; width: 50px; text-align: center; margin: 0 1rem; }\" +\r\n        \"input[type='number']:focus { -webkit-box-shadow: none; box-shadow: none;  outline: none;}\" +\r\n        `input[type=\"number\"]::-webkit-outer-spin-button,\r\n        input[type=\"number\"]::-webkit-inner-spin-button {\r\n            -webkit-appearance: none;\r\n            margin: 0;\r\n        }\r\n        input[type=\"number\"] {\r\n            -moz-appearance: textfield;\r\n        }\r\n        label { font-weight: 100 }\r\n        ` +\r\n        \".form-text { color: #000;  } \" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \".jspsych-survey-multi-choice-preamble { max-width: 1000px; text-align: left; }\" +\r\n        \".jspsych-survey-multi-choice-information { display: flex; justify-content: space-between }\" +\r\n        \".jspsych-survey-multi-choice-information div { width: 40%; text-align: left; padding: 2rem 0; }\" +\r\n        \".jspsych-survey-multi-choice-information ul { display: flex; width: 50%; justify-content: space-around; padding-inline-start: 0; }\" +\r\n        \".jspsych-survey-multi-choice-information li { width: 100px; display: flex; align-items: center; }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\r\n      \". { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\"\r\n      html += '</style>';\r\n  \r\n      // show preamble text\r\n      if (trial.preamble !== null) {\r\n        html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n      }\r\n  \r\n      // form element\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        question_order.push(i);\r\n      }\r\n      if (trial.randomize_question_order) {\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n  \r\n        // add multiple-choice questions\r\n        for (var i = 0; i < 1; i++) {\r\n    \r\n            // get question based on question_order\r\n            var question = trial.questions[question_order[i]];\r\n            var question_id = question_order[i];\r\n    \r\n            // create question container\r\n            var question_classes = ['jspsych-survey-multi-choice-question'];\r\n            if (question.horizontal) {\r\n            question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n            }\r\n    \r\n            html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n    \r\n            // add question text\r\n            html += '<div style=\"width: 30%; padding: 1rem;\"><p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + (i + 1) + '. ' + question.prompt\r\n            // question.required\r\n            html += '</p></div>';\r\n            html += '<div style=\"display: flex; width: 70%;  padding: 1rem; justify-content: space-around; border-left: 1px solid #fff; \">';\r\n    \r\n            // create option radio buttons\r\n            for (var j = 0; j < question.options.length; j++) {\r\n            // add label and question text\r\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n    \r\n            var required_attr = question.required ? 'required' : '';\r\n    \r\n            // add radio button container\r\n            html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n            html += '<label class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q' + (i+1) + '\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n            html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n            html += '</div>';\r\n            }\r\n    \r\n            html += '</div></div>';\r\n        }\r\n\r\n\r\n        for (var i = 1; i < 2; i++) {\r\n    \r\n            // get question based on question_order\r\n            var question = trial.questions[question_order[i]];\r\n            var question_id = question_order[i];\r\n    \r\n            // create question container\r\n            var question_classes = ['jspsych-survey-multi-choice-question'];\r\n            if (question.horizontal) {\r\n            question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n            }\r\n    \r\n            html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n    \r\n            // add question text\r\n            html += '<div style=\"width: 30%; padding: 1rem;\"><p class=\"jspsych-survey-multi-choice-question survey-multi-choice jspsych-survey-multi-choice-question-age\" style=\"padding-top: 3px; text-align: left;\">' + (i + 1) + '. ' + question.prompt\r\n            // question.required\r\n            html += '</p></div>';\r\n            html += '<div style=\"display: flex; width: 70%;  padding: 1rem; justify-content: space-around; border-left: 1px solid #fff; \">';\r\n    \r\n            // create option radio buttons\r\n            for (var j = 0; j < question.options.length; j++) {\r\n              // add label and question text\r\n              var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n              var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n              var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n      \r\n              var required_attr = question.required ? 'required' : '';\r\n      \r\n              // add radio button container\r\n              html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n              html += '<label class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q' + (i+1) + '\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n              if(j === 0) {\r\n                  html += '<input type=\"number\" name=\"2a. Age (years)\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"input-year option-input-age\" max=\"100\" ' + required_attr + '></input>';\r\n              } else {\r\n                  html += '<input type=\"number\" name=\"2b. Age (months)\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"input-month option-input-age\" max=\"11\" ' + required_attr + '></input>';\r\n              }\r\n              \r\n              html += '</div>';\r\n            }\r\n    \r\n            html += '</div></div>';\r\n        }\r\n\r\n        for (var i = 2; i < 3; i++) {\r\n    \r\n            // get question based on question_order\r\n            var question = trial.questions[question_order[i]];\r\n            var question_id = question_order[i];\r\n    \r\n            // create question container\r\n            var question_classes = ['jspsych-survey-multi-choice-question'];\r\n            if (question.horizontal) {\r\n            question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n            }\r\n    \r\n            html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n    \r\n            // add question text\r\n            html += '<div style=\"width: 30%; padding: 1rem;\"><p class=\"jspsych-survey-multi-choice-question survey-multi-choice jspsych-survey-multi-choice-question-height\" style=\"padding-top: 3px; text-align: left;\">' + (i + 1) + '. ' + question.prompt\r\n            // question.required\r\n            html += '</p></div>';\r\n            html += '<div style=\"display: flex; width: 70%;  padding: 1rem; justify-content: space-around; border-left: 1px solid #fff; \">';\r\n    \r\n            // create option radio buttons\r\n            for (var j = 0; j < question.options.length; j++) {\r\n              // add label and question text\r\n              var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n              var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n              var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n      \r\n              var required_attr = question.required ? 'required' : '';\r\n      \r\n              // add radio button container\r\n              html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\" style=\"flex-flow: row; \">';\r\n              \r\n              if(j === 0) {\r\n                html += '<input type=\"radio\" data-time-stamp=\"Q' + (i+1) + '\" data-enable=\"cm\" name=\"Height (units selected)\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n                html += '<input type=\"number\" name=\"3a. Height (cm)\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"jspsych-survey-multi-choice-radio-cm\" max=\"250\" ' + required_attr + ' disabled></input>';\r\n              } else {\r\n                  html += '<input type=\"radio\" data-time-stamp=\"Q' + (i+1) + '\" data-enable=\"feet\" name=\"Height (units selected)\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n                  html += '<input type=\"number\" name=\"3b. Height (feet)\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"jspsych-survey-multi-choice-radio-feet\" max=\"8\" ' + required_attr + ' disabled></input>';\r\n                  html += '<label class=\"jspsych-survey-multi-choice-text \" for=\"' + input_id + '\">feet</label>';\r\n                  html += '<input type=\"number\" name=\"3c. Height (inches)\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"jspsych-survey-multi-choice-radio-inches\" max=\"11\" ' + required_attr + ' disabled></input>';\r\n              }\r\n              html += '<label class=\"jspsych-survey-multi-choice-text \" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n            \r\n              html += '</div>';\r\n            }\r\n    \r\n            html += '</div></div>';\r\n        }\r\n\r\n        for (var i = 3; i < 4; i++) {\r\n    \r\n            // get question based on question_order\r\n            var question = trial.questions[question_order[i]];\r\n            var question_id = question_order[i];\r\n    \r\n            // create question container\r\n            var question_classes = ['jspsych-survey-multi-choice-question'];\r\n            if (question.horizontal) {\r\n            question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n            }\r\n    \r\n            html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n    \r\n            // add question text\r\n            html += '<div style=\"width: 30%; padding: 1rem;\"><p class=\"jspsych-survey-multi-choice-question survey-multi-choice jspsych-survey-multi-choice-question-weight\" style=\"padding-top: 3px; text-align: left;\">' + (i + 1) + '. ' + question.prompt\r\n            // question.required\r\n            html += '</p></div>';\r\n            html += '<div style=\"display: flex; width: 70%; justify-content: center; align-items: center; flex-direction: column; padding: 1rem; border-left: 1px solid #fff; position: relative;\">';\r\n    \r\n            // create option radio buttons\r\n            for (var j = 0; j < question.options.length; j++) {\r\n            // add label and question text\r\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n    \r\n            var required_attr = question.required ? 'required' : '';\r\n    \r\n            if(j === 0) {\r\n              html += '<div style=\"position: absolute; left: 30%;\">';\r\n              html += '<input type=\"number\" name=\"4b. Weight\" data-time-stamp=\"Q' + (i+1) + 'A' + (j+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" class=\"option-input-weight\" max=\"440\" ' + required_attr + ' disabled></input>';\r\n              html += '</div>';\r\n\r\n              html += '<div>';\r\n              html += '<div style=\"display: flex; justify-content: flex-end; margin: 1rem; width: 120px; padding-right: 1rem; flex-direction: row-reverse;\" id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n              html += '<label style=\"padding-left: 1rem;\" class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q' + (i+1) + '\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n              html += '<input type=\"radio\" data-enable=\"weight\" name=\"weight\" value=\"kg\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio jspsych-survey-multi-choice-radio-kg\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n            } else {\r\n              html += '<div>';\r\n              html += '<div style=\"display: flex; justify-content: flex-end; margin: 1rem; width: 120px; padding-right: 1rem; flex-direction: row-reverse;\" id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n              html += '<label style=\"padding-left: 1rem;\" class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q' + (i+1) + '\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n              html += '<input type=\"radio\" data-enable=\"weight\" name=\"weight\" value=\"pounds\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio jspsych-survey-multi-choice-radio-pounds\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n            }\r\n\r\n            html += '</div>';\r\n            html += '</div>';\r\n           \r\n            }\r\n    \r\n            html += '</div></div>';\r\n        }\r\n\r\n        // add multiple-choice questions\r\n        for (var i = 4; i < 8; i++) {\r\n\r\n            // get question based on question_order\r\n            var question = trial.questions[question_order[i]];\r\n            var question_id = question_order[i];\r\n        \r\n            // create question container\r\n            var question_classes = ['jspsych-survey-multi-choice-question'];\r\n            if (question.horizontal) {\r\n                question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n            }\r\n        \r\n            html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n        \r\n            // add question text\r\n            html += '<div style=\"width: 20%; padding: 1rem;\"><p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + (i + 1) + '. ' + question.prompt\r\n            // question.required\r\n            html += '</p></div>';\r\n            html += '<div style=\"display: flex; width: 80%;  padding: 3rem 0; justify-content: space-around; border-left: 1px solid #fff;\">';\r\n        \r\n            // create option radio buttons\r\n            for (var j = 0; j < question.options.length; j++) {\r\n                // add label and question text\r\n                var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n                var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n                var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n        \r\n                var required_attr = question.required ? 'required' : '';\r\n        \r\n                // add radio button container\r\n                html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n                html += '<label style=\"padding-bottom: 2rem;\" data-time-stamp=\"Q' + (i+1) + '\" class=\"jspsych-survey-multi-choice-text\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n                html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n                html += '</div>';\r\n            }\r\n        \r\n            html += '</div></div>';\r\n        }\r\n          \r\n  \r\n      html += '</div>';\r\n  \r\n      // add submit button\r\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\r\n  \r\n      html += '</form>';\r\n  \r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n            <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n              <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                <header class=\"modal__header\">\r\n                  <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                    Warning!\r\n                  </h2>\r\n                  <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                </header>\r\n                <main class=\"modal__content\" id=\"modal-1-content\">\r\n                  <p>\r\n                  ${popup_text_web_forms}\r\n                  </p>\r\n                </main>\r\n                <footer class=\"modal__footer\">\r\n                  <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                </footer>\r\n              </div>\r\n            </div>\r\n        </div>`;\r\n  \r\n      // render\r\n      display_element.innerHTML = html;\r\n\r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n\r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n\r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n  \r\n      document.querySelector('form').addEventListener('submit', function (event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n  \r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n\r\n        for (var i = 0; i < 1; i++) {\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n          var id = $(match).find('.jspsych-survey-multi-choice-question').text();\r\n\r\n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error-after');\r\n          } else {\r\n            $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error-after');\r\n            var val = \"\";\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if (match.attributes['data-name'].value !== '') {\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          obje[name] = val;\r\n          Object.assign(question_data, obje);\r\n        }\r\n\r\n\r\n\r\n        // input age check\r\n        (function() {\r\n          var year_input_value = $('.input-year').val();\r\n          var label = $(\"#jspsych-survey-multi-choice-response-1-0\").prop(\"labels\")\r\n          if(year_input_value === '') {\r\n            $('.jspsych-survey-multi-choice-question-age').addClass('survey-error-after');\r\n          } else if (year_input_value >= 18) {\r\n            $('.jspsych-survey-multi-choice-question-age').removeClass('survey-error-after');\r\n            $('.moda__age-incomplete').remove();\r\n            $(label).removeClass('survey-error-after');\r\n            var object2a = {\r\n              '2a. Age (years)': $(\"input[name='2a. Age (years)']\").val()\r\n            };\r\n            var object2b = {\r\n              '2b. Age (months)': $(\"input[name='2b. Age (months)']\").val() ? $(\"input[name='2b. Age (months)']\").val() : 'NA'\r\n            };\r\n            timestamp_data['2a. Age (years)'] = trial.time_stamp['Q2'];\r\n            timestamp_data['2b. Age (months)'] = $(\"input[name='2b. Age (months)']\").val() ? trial.time_stamp['Q2'] : 'NA'\r\n            Object.assign(question_data, object2a, object2b);\r\n          } else {\r\n            $('.jspsych-survey-multi-choice-question-age').addClass('survey-error-after');\r\n            $(label).addClass('survey-error-after');\r\n            if (!$(\".moda__age-incomplete\").length ) {\r\n              $('.modal__content').append('<p class=\"moda__age-incomplete\">You have entered an age that falls outside the expected range. <br/> Please enter your age.</p>')\r\n            }\r\n          }\r\n\r\n        })();\r\n\r\n        // input height check\r\n        (function() {\r\n            var height_input_value_cm = $('.jspsych-survey-multi-choice-radio-cm').val();\r\n            var height_input_value_feet = $('.jspsych-survey-multi-choice-radio-feet').val();\r\n            var height_input_value_inches = $('.jspsych-survey-multi-choice-radio-inches').val();\r\n            var height_radio_value = $(\"input[name='Height (units selected)']:checked\").val();\r\n            var label_cm = $(\"#jspsych-survey-multi-choice-response-2-0\").prop(\"labels\");\r\n            var label_feet = $(\"#jspsych-survey-multi-choice-response-2-1\").prop(\"labels\");\r\n            var label;\r\n\r\n            var height_min, height_max;\r\n            var height_input_value = '';\r\n\r\n            if(height_radio_value === 'cm') {\r\n              height_input_value = height_input_value_cm;\r\n              height_min = 100;\r\n              height_max = 250;\r\n              label = label_cm;\r\n            } else {\r\n              height_input_value = height_input_value_feet;\r\n              height_min = 3;\r\n              height_max = 8;\r\n              label = label_feet;\r\n            }\r\n          \r\n            if(height_input_value === '') {\r\n                $('.jspsych-survey-multi-choice-question-height').addClass('survey-error-after');\r\n            } else if (height_input_value >= height_min && height_input_value <= height_max) {\r\n                if(height_input_value == 8 && height_input_value_inches >= 4) {\r\n                  $('.jspsych-survey-multi-choice-question-height').addClass('survey-error-after');\r\n                  if (!$(\".moda__height-incomplete\").length ) {\r\n                    $('.modal__content').append('<p class=\"moda__height-incomplete\">You have entered a height that falls outside the expected range. <br/> Please enter your height.</p>');\r\n                  }\r\n                } else {\r\n                  $('.jspsych-survey-multi-choice-question-height').removeClass('survey-error-after');\r\n                  $('.moda__height-incomplete').remove();\r\n                  $(label).removeClass('survey-error-after');\r\n                  var object3a = {\r\n                    '3a. Height (cm)': $(\"input[name='3a. Height (cm)']\").val() ? $(\"input[name='3a. Height (cm)']\").val() : 'NA'\r\n                  };\r\n                  var object3b = {\r\n                    '3b. Height (feet)': $(\"input[name='3b. Height (feet)']\").val() ? $(\"input[name='3b. Height (feet)']\").val() : 'NA'\r\n                  };\r\n                  var object3c = {\r\n                    '3c. Height (inches)': $(\"input[name='3c. Height (inches)']\").val() ? $(\"input[name='3c. Height (inches)']\").val() : 'NA'\r\n                  };\r\n                  timestamp_data['3a. Height (cm)'] =  $(\"input[name='3a. Height (cm)']\").val() ? trial.time_stamp['Q3'] : 'NA';\r\n                  timestamp_data['3b. Height (feet)'] = $(\"input[name='3b. Height (feet)']\").val() ? trial.time_stamp['Q3'] : 'NA';\r\n                  timestamp_data['3c. Height (inches)'] = $(\"input[name='3c. Height (inches)']\").val() ? trial.time_stamp['Q3'] : 'NA';\r\n                  Object.assign(question_data, object3a, object3b, object3c);\r\n                }\r\n            } else {\r\n                $('.jspsych-survey-multi-choice-question-height').addClass('survey-error-after');\r\n                $(label).addClass('survey-error-after');\r\n                if (!$(\".moda__height-incomplete\").length ) {\r\n                  $('.modal__content').append('<p class=\"moda__height-incomplete\">You have entered a height that falls outside the expected range. <br/> Please enter your height.</p>');\r\n                }\r\n            }\r\n        })();\r\n\r\n        // input weight check\r\n        (function() {\r\n          var weight_input_value = $('.option-input-weight').val();\r\n          var weight_radio_value = $(\"input[name='weight']:checked\").val();\r\n          var weight_min, weight_max;\r\n          var label_kg = $(\"#jspsych-survey-multi-choice-response-3-0\").prop(\"labels\");\r\n          var label_pounds = $(\"#jspsych-survey-multi-choice-response-3-1\").prop(\"labels\");\r\n          var label;\r\n\r\n          if(weight_radio_value != 'kg') {\r\n            weight_min = 85;\r\n            weight_max = 440;\r\n            label = label_pounds;\r\n          } else {\r\n            weight_min = 40;\r\n            weight_max = 200;\r\n            label = label_kg;\r\n          }\r\n\r\n          if(weight_input_value === '') {\r\n            $('.jspsych-survey-multi-choice-question-weight').addClass('survey-error-after');\r\n          } else if (weight_input_value >= weight_min && weight_input_value <= weight_max) {\r\n            $('.jspsych-survey-multi-choice-question-weight').removeClass('survey-error-after');\r\n            $('.moda__weight-incomplete').remove();\r\n            $(label).removeClass('survey-error-after');\r\n            var object4a = {\r\n              '4a Weight(kg)': weight_radio_value === 'kg' ? $(\"input[name='4b. Weight']\").val() : 'NA' \r\n            }\r\n            var object4b = {\r\n              '4b Weight (lbs)': weight_radio_value === 'pounds' ? $(\"input[name='4b. Weight']\").val() : 'NA'\r\n            }\r\n            Object.assign(timestamp_data, {\r\n              '4a Weight(kg)': weight_radio_value === 'kg' ? trial.time_stamp['Q4'] : 'NA',\r\n              '4b Weight (lbs)': weight_radio_value === 'pounds' ? trial.time_stamp['Q4'] : 'NA'\r\n            });\r\n            Object.assign(question_data, object4a, object4b);\r\n          } else {\r\n            $('.jspsych-survey-multi-choice-question-weight').addClass('survey-error-after');\r\n            $(label).addClass('survey-error-after');\r\n            if (!$(\".moda__weight-incomplete\").length ) {\r\n              $('.modal__content').append('<p class=\"moda__weight-incomplete\">You have entered a weight that falls outside the expected range. <br/> Please enter your weight.</p>')\r\n            }\r\n          }\r\n        })();\r\n        \r\n\r\n        for (var i = 4; i < trial.questions.length; i++) {\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n  \r\n          var id = $(match).find('.jspsych-survey-multi-choice-question').text();\r\n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error-after');\r\n          } else {\r\n            $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error-after');\r\n            var val = \"\";\r\n  \r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if (match.attributes['data-name'].value !== '') {\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          obje[name] = val;\r\n          Object.assign(question_data, obje);\r\n        }\r\n\r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n        \r\n      });\r\n\r\n      //  input integer function\r\n      $(function() {\r\n          $('input[type=\"number\"').on('keyup', function() {\r\n            var el = $(this),\r\n                val = Math.max((0, el.val())),\r\n                max = parseInt(el.attr('max'));\r\n        \r\n            el.val(isNaN(max) ? val : Math.min(max, val));\r\n          });\r\n      });\r\n\r\n\r\n      // input number activation on radio button\r\n      $('input:radio').click(function() {\r\n        if($(this).data().enable) {\r\n            var inputName = $(this).data().enable;\r\n            switch (inputName) {\r\n                case 'cm':\r\n                    $( \"input[name='3a. Height (cm)']\").removeAttr(\"disabled\");\r\n                    $( \"input[name='3b. Height (feet)']\").prop(\"disabled\", true).val('');\r\n                    $( \"input[name='3c. Height (inches)']\").prop(\"disabled\", true).val('');\r\n                    var label3b = $( \"#jspsych-survey-multi-choice-response-2-1\").prop('labels');\r\n                    $(label3b).removeClass('survey-error-after');\r\n                    break;\r\n                case 'feet':\r\n                    $( \"input[name='3a. Height (cm)']\").prop(\"disabled\", true).val('');\r\n                    $( \"input[name='3b. Height (feet)']\").removeAttr(\"disabled\");\r\n                    $( \"input[name='3c. Height (inches)']\").removeAttr(\"disabled\");\r\n                    var label3a = $( \"#jspsych-survey-multi-choice-response-2-0\").prop('labels');\r\n                    $(label3a).removeClass('survey-error-after');\r\n                    break;\r\n                case 'weight':\r\n                    $('.option-input-weight').removeAttr(\"disabled\").val('');\r\n                  \r\n                    $( \"input[name='weight']\" ).each(function( index ) {\r\n                      var label = $(this).prop('labels')\r\n                      $(label).removeClass('survey-error-after');\r\n                    });\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n      });\r\n\r\n\r\n      var startTime = performance.now();\r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n  \r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DEMOGRAPHICS.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-EAT-26.js":
/*!**********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-EAT-26.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['EAT-26'] = (function () {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'EAT-26',\r\n      stage_name: 'EAT-26',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default: 'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function (display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-EAT-26\";\r\n  \r\n      var html = \"\";\r\n  \r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n      var timestamp_onload = jsPsych.totalTime();\r\n  \r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n  \r\n      $('body').prepend(\r\n        `<header>\r\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n            <div class=\"container-fluid\">\r\n              <div class=\"navbar-header\">\r\n              <p class=\"navbar-text\">${plugin.info.name}</p>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid;}\" +\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n        \".jspsych-survey-multi-choice-option { height: 100px; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid; text-align: center; padding: 0 1rem;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".jspsych-content { width: 1000px}\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".form-radio { top: 0; }\" +\r\n        \".jspsych-survey-multi-choice-number { display: flex; align-items: center; height: 100%; width: 45px; border-right: 1px solid #fff; text-align: center; justify-content: center; }\" +\r\n        \".jspsych-survey-multi-choice-preamble { text-align: left; padding-bottom: 3rem; }\" +\r\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between;  border-bottom: 3px solid; font-weight: bold; font-size: 1.5rem;   }\" +\r\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; width: 60%; justify-content: space-around; padding-inline-start: 0; margin-bottom: 0; }\" +\r\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; align-items: center; width: 100%; border-left: 1px solid; }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \"p {     margin: 0 0 0px;}\"\r\n      html += '</style>';\r\n  \r\n  \r\n      // form element\r\n      html += '<div id=\"' + plugin_id_name + '\">'\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n  \r\n      // show preamble text\r\n  \r\n      // show preamble text\r\n      if (trial.preamble !== null) {\r\n        html += '<div class=\"jspsych-survey-multi-choice-content\"><div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n      }\r\n  \r\n      html +=\r\n        `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n            <div style=\"width: 40%; text-align: left;\"><p style=\" padding-bottom: 1rem;\">Please check a response for each of the\r\n            following statements:</p></div>\r\n            <ul>\r\n              <li><div>Always</div></li>\r\n              <li><div>Usually</div></li>\r\n              <li><div>Often</div></li>\r\n              <li><div>Sometimes</div></li>\r\n              <li><div>Rarely</div></li>\r\n              <li><div>Never</div></li>\r\n            </ul>\r\n        </div>`\r\n  \r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        question_order.push(i);\r\n      }\r\n      if (trial.randomize_question_order) {\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n  \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < 26; i++) {\r\n  \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n  \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">' + question.prompt\r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight hidden\" data-time-stamp=\"Q' + (i+1) + '\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n          html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n\r\n      // add title questions\r\n      for (var i = 0; i < 1; i++) {\r\n  \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n  \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div style=\"font-weight: bold;\" id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\"><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">Behavioural questions. In the past 6 months have you:'\r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\r\n\r\n        var questionsTitle = ['Never', 'Once a month or less', '2-3 times a month', 'Once a week', '2-6 times a week', 'Once a day or more'];\r\n        // create option radio buttons\r\n        for (var j = 0; j < questionsTitle.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n          \r\n          // add radio button container\r\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<p>' + questionsTitle[j] + '</p>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n\r\n      // add multiple-choice questions A, B, C, D, E\r\n      var letterArray = ['A', 'B', 'C', 'D', 'E'];\r\n  \r\n      for (var i = 26, k = 0; i < trial.questions.length; i++, k++) {\r\n  \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n  \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + letterArray[k] + '\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 40%; border-right: 1px solid #fff;\"><span class=\"jspsych-survey-multi-choice-number\">' + letterArray[k] + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">' + question.prompt\r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n          if(i === 30) {\r\n            html += '<label class=\"jspsych-survey-multi-choice-text\" style=\"padding-left: 1rem; margin-bottom: 0;\" data-time-stamp=\"Q' + (i+1) + '\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n          } else {\r\n            html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight hidden\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n          }\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n\r\n      html += '</div>';\r\n  \r\n      // add submit button\r\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\r\n      html += '</form>';\r\n  \r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                  <header class=\"modal__header\">\r\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                      Warning!\r\n                    </h2>\r\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                  </header>\r\n                  <main class=\"modal__content\" id=\"modal-1-content\">\r\n                    <p>\r\n                    ${popup_text_web_forms}\r\n                    </p>\r\n                  </main>\r\n                  <footer class=\"modal__footer\">\r\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                  </footer>\r\n                </div>\r\n              </div>\r\n          </div>`;\r\n  \r\n      // render\r\n      display_element.innerHTML = html;\r\n  \r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n  \r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n\r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n  \r\n      $('.jspsych-survey-highlight').click(function () {\r\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n        $(this).addClass('bg-primary');\r\n        $(this).next('input').prop(\"checked\", true);\r\n        $(this).closest('input').click();\r\n      })\r\n  \r\n      document.querySelector('form').addEventListener('submit', function (event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n  \r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n        for (var i = 0; i < trial.questions.length; i++) {\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n          var id = i + 1;\r\n          \r\n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n          } else {\r\n            var val = \"\";\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n      \r\n          if (match.attributes['data-name'].value !== '') {\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          Object.assign(question_data, obje);\r\n        }\r\n  \r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n  \r\n      });\r\n  \r\n      var startTime = performance.now();\r\n  \r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-EAT-26.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-FTND.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-FTND.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['FTND'] = (function () {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'FTND',\n      stage_name: 'FTND',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default: 'Continue',\n          description: 'Label of the button.'\n        },\n        time_stamp: {\n          type: jsPsych.plugins.parameterType.OBJECT,\n          pretty_name: 'Timestamp',\n          default: {},\n          description: 'Object for collecting timestamp'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n      }\n    }\n    plugin.trial = function (display_element, trial) {\n      var plugin_id_name = \"jspsych-survey-multi-choice-FTND\";\n  \n      var html = \"\";\n      var timestamp_onload = jsPsych.totalTime();\n  \n      // store response\n      var response = {\n        trial_events: []\n      };\n  \n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n  \n      $('body').prepend(\n        `<header>\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n            <div class=\"container-fluid\">\n              <div class=\"navbar-header\">\n              <p class=\"navbar-text\">${plugin.info.name}</p>\n              </div>\n            </div>\n          </nav>\n        </header>`);\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid;}\" +\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n        \".jspsych-survey-multi-choice-text { padding-left: 2rem; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n        \".jspsych-survey-multi-choice-option { padding-left: 2rem; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid; text-align: center; padding: 0 1rem;}\" +\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \".jspsych-content { width: 1000px}\" +\n        \".jspsych-btn { margin: 100px 0; }\" +\n        \".jspsych-content { margin-top: 130px;}\" +\n        \"ul {list-style: none}\" +\n        \".form-radio { top: 3px; }\" +\n        \".jspsych-survey-multi-choice-number { padding-right: 2rem; }\" +\n        \".jspsych-survey-multi-choice-preamble { text-align: left; padding-bottom: 3rem; }\" +\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between;  border-bottom: 3px solid; font-weight: bold; }\" +\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; width: 60%; margin-bottom: 0; }\" +\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \"p { margin: 0 0 0px;}\"\n      html += '</style>';\n  \n  \n      // form element\n      html += '<div id=\"' + plugin_id_name + '\">';\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\n  \n      // show preamble text\n  \n      // show preamble text\n      if (trial.preamble !== null) {\n        html += '<div class=\"jspsych-survey-multi-choice-content\"><div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\n      }\n  \n      html +=\n        `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\n            <div style=\"width: 40%; text-align: left; border-right: 2px solid #fff; \">Questions</div>\n            <ul>\n              <li><div>Answers</div></li>\n            </ul>\n        </div>`\n  \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for (var i = 0; i < trial.questions.length; i++) {\n        question_order.push(i);\n      }\n      if (trial.randomize_question_order) {\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n  \n      // add multiple-choice questions\n      for (var i = 0; i < trial.questions.length; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; width: 40%; border-right: 1px solid #fff;\"><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 1rem; width: 100%;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '.</span>' + question.prompt\n        // question.required\n        html += '</p></div>';\n        html += '<div>';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<input type=\"radio\" name=\"' + input_name + '\"  data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '<label class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n  \n      // add submit button\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\n      html += '</form>';\n      html += '</div>';\n      \n      html +=\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\n                  <header class=\"modal__header\">\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\n                      Warning!\n                    </h2>\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\n                  </header>\n                  <main class=\"modal__content\" id=\"modal-1-content\">\n                    <p>\n                    ${popup_text_web_forms}\n                    </p>\n                  </main>\n                  <footer class=\"modal__footer\">\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\n                  </footer>\n                </div>\n              </div>\n          </div>`;\n  \n      // render\n      display_element.innerHTML = html;\n  \n      // function to handle key press responses\n      var after_response = function (info) {\n  \n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n  \n      $('.jspsych-survey-highlight').click(function () {\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\n        $(this).addClass('bg-primary');\n        $(this).next('input').prop(\"checked\", true);\n        $(this).closest('input').click();\n      })\n  \n      document.querySelector('form').addEventListener('submit', function (event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n  \n        // create object to hold responses\n        var question_data = {};\n        var timestamp_data = {};\n        for (var i = 0; i < trial.questions.length; i++) {\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\n          var id = (i + 1);\n          \n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\n          } else {\n            var val = \"\";\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\n          }\n          var obje = {};\n          var name = id;\n      \n          if (match.attributes['data-name'].value !== '') {\n            name = match.attributes['data-name'].value;\n          }\n          obje[name] = val;\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\n          Object.assign(question_data, obje);\n        }\n  \n        if ($(\".survey-error-after\").length < 1) {\n          // kill keyboard listeners\n          if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n          }\n  \n          // save data\n          var trial_data = {\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"timestamp\": JSON.stringify(timestamp_data),\n            \"question_order\": JSON.stringify(question_order),\n            \"events\": JSON.stringify(response.trial_events)\n          };\n  \n          display_element.innerHTML = '';\n          $('.navbar').remove();\n  \n          // next trial\n          jsPsych.finishTrial(trial_data);\n        } else {\n          MicroModal.show('modal-1');\n        }\n  \n      });\n  \n      var startTime = performance.now();\n  \n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n\n      if(!isSmokingStatus) {\n        var question_data = {\n            1: 'NA',\n            2: 'NA',\n            3: 'NA',\n            4: 'NA',\n            5: 'NA',\n            6: 'NA',\n        }\n        timestamp_data = question_data;\n        // kill keyboard listeners\n        if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n        }\n\n        // save data\n        var trial_data = {\n        \"stage_name\": JSON.stringify(plugin.info.stage_name),\n        \"responses\": JSON.stringify(question_data),\n        \"timestamp\": JSON.stringify(timestamp_data),\n        \"question_order\": JSON.stringify(question_order),\n        \"events\": JSON.stringify(response.trial_events)\n        };\n\n        display_element.innerHTML = '';\n        $('.navbar').remove();\n\n        // next trial\n        jsPsych.finishTrial(trial_data);\n      }\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-FTND.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-GAD-7.js":
/*!*********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-GAD-7.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['GAD-7'] = (function() {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'GAD-7',\r\n      stage_name: 'GAD-7',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default:  'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function(display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-GAD-7\";\r\n  \r\n      var html = \"\";\r\n\r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n      var timestamp_onload = jsPsych.totalTime();\r\n\r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n\r\n      $('body').prepend(\r\n        `<header>\r\n            <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n              <div class=\"container-fluid\">\r\n                <div class=\"navbar-header\">\r\n                <p class=\"navbar-text\">${plugin.info.name}</p>\r\n                </div>\r\n              </div>\r\n            </nav>\r\n      </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; }\"+\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\"+\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\"+\r\n        \".jspsych-survey-multi-choice-option { line-height: 2; }\"+\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\"+\r\n        \".jspsych-survey-multi-choice-content { outline: 1px solid #fff; padding: 1rem;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".jspsych-survey-multi-choice-preamble { display: flex; justify-content: space-between }\" +\r\n        \".jspsych-survey-multi-choice-preamble div { width: 40%; text-align: left; padding: 2rem 0; }\" +\r\n        \".jspsych-survey-multi-choice-preamble ul { display: flex; width: 50%; justify-content: space-around; padding-inline-start: 0; }\" +\r\n        \".jspsych-survey-multi-choice-preamble li { width: 100px; display: flex; align-items: center; }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\"\r\n      html += '</style>';\r\n  \r\n\r\n      // form element\r\n      html += '<div id=\"' + plugin_id_name + '\">'\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n      \r\n      // show preamble text\r\n \r\n      html += \r\n      `<div class=\"jspsych-survey-multi-choice-content\">\r\n        <div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">\r\n          <div>Over the <u>last 2 weeks</u>, how often have you been bothered by the following problems?</div>\r\n          <ul>\r\n            <li>Not at all</li>\r\n            <li>Several days</li>\r\n            <li>More than half the days</li>\r\n            <li>Nearly every day</li>\r\n          </ul>\r\n      </div>`\r\n\r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for(var i=0; i<trial.questions.length; i++){\r\n        question_order.push(i);\r\n      }\r\n      if(trial.randomize_question_order){\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n      \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n        \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+'\"  data-name=\"'+question.name+'\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"width: 50%;\"><p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + (i+1) + '. ' + question.prompt \r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 50%; justify-content: space-around;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\"+question_id+\"-\"+j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-'+question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-'+question_id+'-'+j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"'+option_id_name+'\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"'+input_id+'\">' +question.options[j]+'</label>';\r\n          html += '<input hidden type=\"radio\" name=\"'+input_name+'\" id=\"'+input_id+'\" value=\"'+question.options[j]+'\" '+required_attr+'></input>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n      \r\n      html += '</div>';\r\n\r\n      var checkbox_order = [];\r\n      for(var i=0; i<trial.checkboxes.length; i++){\r\n        checkbox_order.push(i);\r\n      }\r\n\r\n      for (var i = 0; i < trial.checkboxes.length; i++) {\r\n\r\n        var checkbox = trial.checkboxes[checkbox_order[i]];\r\n        var checkbox_id = checkbox_order[i];\r\n\r\n        html += '<div id=\"jspsych-survey-multi-choice-checkbox\"   data-name=\"'+checkbox.name+'\">';\r\n  \r\n        // add question text\r\n        html += '<p class=\"jspsych-survey-multi-choice-text survey-multi-choice\" style=\"padding: 2rem 0; text-align: left\">' + checkbox.prompt + '</p>'\r\n\r\n        html += '<div style=\"display: flex; justify-content: space-around; height: 150px; align-items: baseline;\">';\r\n  \r\n\r\n        for (var j = 0; j < checkbox.options.length; j++) {\r\n          // add label and question text\r\n          var checkbox_id_name = \"jspsych-survey-multi-choice-option-\"+checkbox_id+\"-\"+j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-checkbox-'+checkbox_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-checkbox-'+checkbox_id+'-'+j;\r\n  \r\n          var required_attr = checkbox.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"'+checkbox_id_name+'\" class=\"jspsych-survey-multi-choice-option\" style=\"width: 116px\">';\r\n          html += '<label class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q8\" for=\"'+input_id+'\">' +checkbox.options[j]+'</label>';\r\n          html += '<input type=\"radio\" name=\"'+input_name+'\" class=\"form-radio\" data-time-stamp=\"Q8\" data-question-number=\"Q8A' + (j+1) +'\" id=\"'+input_id+'\" value=\"'+checkbox.options[j]+'\" '+required_attr+'></input>';\r\n          html += '</div>';\r\n        }\r\n        html += '</div>'\r\n      }\r\n \r\n      // add submit button\r\n      html += '<p><input type=\"submit\" id=\"'+plugin_id_name+'-next\" class=\"'+plugin_id_name+' jspsych-btn\"' + (trial.button_label ? ' value=\"'+trial.button_label + '\"': '') + '></input></p>';\r\n      \r\n\r\n      html += '</form>';\r\n\r\n      html +=\r\n      `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n          <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n            <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n              <header class=\"modal__header\">\r\n                <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                  Warning!\r\n                </h2>\r\n                <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n              </header>\r\n              <main class=\"modal__content\" id=\"modal-1-content\">\r\n                <p>\r\n                ${popup_text_web_forms}\r\n                </p>\r\n              </main>\r\n              <footer class=\"modal__footer\">\r\n                <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n              </footer>\r\n            </div>\r\n          </div>\r\n      </div>`;\r\n\r\n  \r\n      // render\r\n      display_element.innerHTML = html;\r\n\r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n\r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n\r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n\r\n      $('.jspsych-survey-highlight').click(function() {\r\n          $(this).next('input').prop(\"checked\", true);\r\n          $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n          $(this).addClass('bg-primary');\r\n          $(this).closest('input').click();\r\n      })\r\n  \r\n      document.querySelector('form').addEventListener('submit', function(event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n  \r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n        for(var i=0; i<trial.questions.length; i++){\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-'+i);\r\n          var id = i + 1;\r\n        \r\n          if(match.querySelector(\"input[type=radio]:checked\") !== null){\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error-after');\r\n          } else {\r\n            var val = \"\";\r\n            $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error-after');\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if(match.attributes['data-name'].value !== ''){\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          Object.assign(question_data, obje);\r\n        }\r\n\r\n        (function () {\r\n            var match = display_element.querySelector('#jspsych-survey-multi-choice-checkbox');\r\n            var id = \"last\";\r\n            var val;\r\n\r\n            if(match.querySelector(\"input[type=radio]:checked\") !== null){\r\n              val = match.querySelector(\"input[type=radio]:checked\").value;\r\n              timestamp_data[id] = trial.time_stamp['Q8'];\r\n            } else {\r\n              val = \"NA\";\r\n              timestamp_data[id] = 0;\r\n            }\r\n\r\n            var name = id;\r\n            obje[name] = val;\r\n            \r\n            Object.assign(question_data, obje);\r\n        }());\r\n\r\n\r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n      });\r\n  \r\n      var startTime = performance.now();\r\n\r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-GAD-7.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ICAR.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ICAR.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['ICAR'] = (function () {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'ICAR',\r\n      stage_name: 'ICAR',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default: 'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function (display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-ICAR\";\r\n  \r\n      var html = \"\";\r\n  \r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n      var timestamp_onload = jsPsych.totalTime();\r\n  \r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n  \r\n      $('body').prepend(\r\n        `<header>\r\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n            <div class=\"container-fluid\">\r\n              <div class=\"navbar-header\">\r\n              <p class=\"navbar-text\">${plugin.info.name}</p>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \r\n        \".jspsych-survey-multi-choice-question {  }\" +\r\n        \".verbal-reasoning, .letter-number-series { width: 600px; }\" +\r\n        \".matrix-reasoning-wrap { display: flex; position: relative; }\" +\r\n        \".matrix-reasoning-wrap ul { position: absolute; display: flex; justify-content: center; height: 113px; margin-bottom: 3rem; padding-left: 0; bottom: 0; left: 0; right: 0; }\" +\r\n        \".matrix-reasoning-wrap ul li { width: 92px; opacity: .4; }\" +\r\n        \".matrix-reasoning-wrap ul label { width: 100%; height: 100%;}\" +\r\n        \".matrix-reasoning-wrap ul li.active { background-color: yellow; }\" +\r\n        \"img { width: 100%; }\" +\r\n        \".three-dimensional-rotate-wrap { display: flex; position: relative; width: 1000px; }\" +\r\n        \".three-dimensional-rotate-wrap ul { position: absolute; display: flex; flex-wrap: wrap; justify-content: center; height: 100%; width: 73%; padding-left: 0; margin-bottom: 0; bottom: 0; right: 0; }\" +\r\n        \".three-dimensional-rotate-wrap ul label { width: 100%; height: 100%;}\" +\r\n        \".three-dimensional-rotate-wrap ul li { width: 25%; height: 50%; opacity: .4; }\" +\r\n        \".three-dimensional-rotate-wrap ul li.active { background-color: yellow; }\" +\r\n\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n        \".jspsych-survey-multi-choice-option { display: flex; line-height: 2; flex-direction: row-reverse; justify-content: flex-end; }\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: flex;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\r\n        \".jspsych-survey-multi-choice-content { border-bottom: 1px solid;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; padding-left: 2rem; padding-top: .5rem; }\" +\r\n        \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n        \"ul {list-style: none}\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        // \".jspsych-survey-container-radio { display: flex; flex-direction: column; padding-left: 3rem; }\" +\r\n        \".jspsych-survey-multi-choice-preamble { text-align: left; border-top: 1px solid #fff;}\" +\r\n        \".jspsych-survey-multi-choice-information { display: flex; justify-content: space-between }\" +\r\n        \".jspsych-survey-multi-choice-information div { width: 40%; text-align: left; padding: 2rem 0; }\" +\r\n        \".jspsych-survey-multi-choice-information ul { display: flex; width: 50%; justify-content: space-around; padding-inline-start: 0; }\" +\r\n        \".jspsych-survey-multi-choice-information li { width: 100px; display: flex; align-items: center; }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\r\n      html += '</style>';\r\n  \r\n      // show preamble text\r\n      if (trial.preamble !== null) {\r\n        html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n      }\r\n  \r\n      // form element\r\n      html += '<div id=\"' + plugin_id_name + '\">'\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        question_order.push(i);\r\n      }\r\n      if (trial.randomize_question_order) {\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n  \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n  \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n  \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        if(question.name === 'letter_number_series') {\r\n          html += '<div class=\"letter-number-series\" id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\" style=\"display: none;\"  data-name=\"' + question.number + '\">';\r\n    \r\n          // add question text\r\n          html += '<div><p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + question.prompt + '</p>';\r\n          \r\n          html += '<p style=\"font-weight: bold; font-size: 2rem;\">' + question.sequence + '</p></div>';\r\n          html += '<div class=\"jspsych-survey-container-radio\">';\r\n    \r\n          // create option radio buttons\r\n          for (var j = 0; j < question.options.length; j++) {\r\n            // add label and question text\r\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n    \r\n            var required_attr = question.required ? 'required' : '';\r\n    \r\n            // add radio button container\r\n            html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n            html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + i + '\"  for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n            html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + i + '\" data-response-id=\"' + (j+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n            html += '</div>';\r\n          }\r\n    \r\n          html += '</div></div>';\r\n        }\r\n        // Verbal Reasoning\r\n        else if(question.name === 'verbal_reasoning') {\r\n          html += '<div class=\"verbal-reasoning\" id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\" style=\"display: none;\"  data-name=\"' + question.number + '\">';\r\n    \r\n          // add question text\r\n          html += '<div><p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + question.prompt + '</p></div>';\r\n          html += '<div class=\"jspsych-survey-container-radio\">';\r\n    \r\n          // create option radio buttons\r\n          for (var j = 0; j < question.options.length; j++) {\r\n            // add label and question text\r\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n    \r\n            var required_attr = question.required ? 'required' : '';\r\n    \r\n            // add radio button container\r\n            html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n            html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + i + '\"  for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n            html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + i + '\" data-response-id=\"' + (j+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n            html += '</div>';\r\n          }\r\n    \r\n          html += '</div></div>';\r\n        }\r\n        // Matrix reasoning\r\n        else if(question.name === 'matrix_reasoning') {\r\n          html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\" style=\"display: none;\"  data-name=\"' + question.number + '\">';\r\n    \r\n          html += '<p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + question.prompt + '</p>';\r\n          // add question image\r\n          html += '<div class=\"matrix-reasoning-wrap\"><img class=\"matrix-reasoning\" src=\"/static/images/ICAR/matrix_reasoning/' + question.img + '\">';\r\n          html += '<ul class=\"jspsych-survey-container-radio\">';\r\n    \r\n          // create option radio buttons\r\n          for (var j = 0; j < question.options.length; j++) {\r\n            // add label and question text\r\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n    \r\n            var required_attr = question.required ? 'required' : '';\r\n    \r\n            // add radio button container\r\n            html += '<li id=\"' + option_id_name + '\">';\r\n            html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + i + '\"  for=\"' + input_id + '\"></label>';\r\n            html += '<input type=\"radio\" class=\"hidden\" name=\"' + input_name + '\" data-response-id=\"' + question.options[j] + '\" data-matrix-reasoning=\"matrix-reasoning-'+ question_id + '-' + j + '\" data-time-stamp=\"Q' + i + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"NA\" ' + required_attr + '></input>';\r\n            html += '</li>';\r\n          }\r\n          html += '</ul>';\r\n          html += '</div></div>';\r\n        }\r\n\r\n        // Three Dimensional Rotate\r\n        else if(question.name === 'three_dimensional_rotate') {\r\n          html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  style=\"display: none;\" data-name=\"' + question.number + '\">';\r\n    \r\n          // add question image\r\n          html += '<p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + question.prompt + '</p>';\r\n          html += '<div class=\"three-dimensional-rotate-wrap\"><img class=\"three-dimensional-rotate\" src=\"/static/images/ICAR/three-dimensional_rotate/' + question.img + '\">';\r\n          html += '<ul class=\"jspsych-survey-container-radio\">';\r\n    \r\n          // create option radio buttons\r\n          for (var j = 0; j < question.options.length; j++) {\r\n            // add label and question text\r\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n    \r\n            var required_attr = question.required ? 'required' : '';\r\n    \r\n            // add radio button container\r\n            html += '<li id=\"' + option_id_name + '\">';\r\n            html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + i + '\"  for=\"' + input_id + '\"></label>';\r\n            html += '<input type=\"radio\" class=\"hidden\" name=\"' + input_name + '\" data-response-id=\"' + question.options[j] + '\" data-three-dimensional-rotate=\"three-dimensional-rotate-'+ question_id + '-' + j + '\" data-time-stamp=\"Q' + i + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"NA\" ' + required_attr + '></input>';\r\n            html += '</li>';\r\n          }\r\n          html += '</ul>';\r\n          html += '</div></div>';\r\n        }\r\n      }\r\n  \r\n      // add submit button\r\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"hidden ' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\r\n  \r\n      html += '</form>';\r\n      html += '</div>';\r\n      html += '<p><button class=\"jspsych-btn next-question\">submit answer</button></p>';\r\n  \r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n            <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n              <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                <header class=\"modal__header\">\r\n                  <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                    Warning!\r\n                  </h2>\r\n                  <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                </header>\r\n                <main class=\"modal__content\" id=\"modal-1-content\">\r\n                  <p>\r\n                  ${popup_text_web_forms}\r\n                  </p>\r\n                </main>\r\n                <footer class=\"modal__footer\">\r\n                  <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                </footer>\r\n              </div>\r\n            </div>\r\n        </div>`;\r\n  \r\n  \r\n      // render\r\n      display_element.innerHTML = html;\r\n  \r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n  \r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n  \r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n\r\n      // Display first question on page load\r\n      $('#jspsych-survey-multi-choice-0').show();\r\n\r\n      // Next button functionality\r\n      var next_counter = 1;\r\n      $('.next-question').on('click', function() {\r\n          var radio_number = $('#jspsych-survey-multi-choice-' + (next_counter - 1) + ' .jspsych-survey-container-radio').children();\r\n          var isChecked = false;\r\n          for (var index = 0; index < radio_number.length; index++) {\r\n            var element = radio_number[index];\r\n            if($(element).find('input').is(\":checked\") === true) {\r\n              isChecked = true;\r\n            }\r\n          };\r\n\r\n          if(next_counter < 16 && isChecked) {\r\n            $('#jspsych-survey-multi-choice-' + (next_counter - 1)).fadeOut();\r\n            $('.next-question').prop('disabled', true);\r\n            setTimeout(function() {\r\n              $('#jspsych-survey-multi-choice-' + next_counter++).fadeIn();\r\n              $('.next-question').prop('disabled', false);\r\n            }, 400);\r\n            if(next_counter === 15) {\r\n              $('.jspsych-survey-multi-choice-ICAR').removeClass('hidden');\r\n              $('.next-question').hide();\r\n            }\r\n          } else {\r\n            MicroModal.show('modal-1');\r\n          };\r\n      });\r\n      \r\n\r\n      $( \"input\" ).on( \"click\", function() {\r\n        if($(this)[0].dataset.matrixReasoning) {\r\n          $( \".matrix-reasoning-wrap ul li\" ).removeClass( \"active\" )\r\n          $(this).parent('li').addClass('active');\r\n        } else if($(this)[0].dataset.threeDimensionalRotate) {\r\n          $( \".three-dimensional-rotate-wrap ul li\" ).removeClass( \"active\" )\r\n          $(this).parent('li').addClass('active');\r\n        }\r\n      });\r\n\r\n \r\n  \r\n      document.querySelector('form').addEventListener('submit', function (event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n\r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n        var response_id = {};\r\n        for (var i = 0; i < trial.questions.length; i++) {\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n  \r\n          var id = i;\r\n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error');\r\n            var val_id = match.querySelector(\"input[type=radio]:checked\").attributes['data-response-id'].value;\r\n          } else {\r\n            $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error');\r\n            var val = \"\";\r\n          }\r\n          var obje = {};\r\n          var obj = {}\r\n          var name = id;\r\n          if (match.attributes['data-name'].value !== '') {\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          obj[name] = val_id;\r\n          timestamp_data[name] = trial.time_stamp['Q' + i];\r\n          Object.assign(question_data, obje);\r\n          Object.assign(response_id, obj);\r\n        }\r\n  \r\n        if ($(\".survey-error\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"responseId\": JSON.stringify(response_id),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n  \r\n      });\r\n  \r\n      var startTime = performance.now();\r\n  \r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n  \r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ICAR.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ISI.js":
/*!*******************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ISI.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['ISI'] = (function () {\r\n  var plugin = {};\r\n\r\n  plugin.info = {\r\n    name: 'Insomnia Severity Index',\r\n    stage_name: 'ISI',\r\n    description: '',\r\n    parameters: {\r\n      questions: {\r\n        type: jsPsych.plugins.parameterType.COMPLEX,\r\n        array: true,\r\n        pretty_name: 'Questions',\r\n        nested: {\r\n          prompt: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Prompt',\r\n            default: undefined,\r\n            description: 'The strings that will be associated with a group of options.'\r\n          },\r\n          options: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Options',\r\n            array: true,\r\n            default: undefined,\r\n            description: 'Displays options for an individual question.'\r\n          },\r\n          required: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Required',\r\n            default: false,\r\n            description: 'Subject will be required to pick an option for each question.'\r\n          },\r\n          horizontal: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Horizontal',\r\n            default: false,\r\n            description: 'If true, then questions are centered and options are displayed horizontally.'\r\n          },\r\n          name: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Question Name',\r\n            default: '',\r\n            description: 'Controls the name of data values associated with this question'\r\n          }\r\n        }\r\n      },\r\n      randomize_question_order: {\r\n        type: jsPsych.plugins.parameterType.BOOL,\r\n        pretty_name: 'Randomize Question Order',\r\n        default: false,\r\n        description: 'If true, the order of the questions will be randomized'\r\n      },\r\n      preamble: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Preamble',\r\n        default: null,\r\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n      },\r\n      button_label: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Button label',\r\n        default: 'Continue',\r\n        description: 'Label of the button.'\r\n      },\r\n      time_stamp: {\r\n        type: jsPsych.plugins.parameterType.OBJECT,\r\n        pretty_name: 'Timestamp',\r\n        default: {},\r\n        description: 'Object for collecting timestamp'\r\n      },\r\n      event_type: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event type',\r\n        default: null,\r\n        description: 'Event type'\r\n      },\r\n      event_raw_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event raw details',\r\n        default: null,\r\n        description: 'Event raw details'\r\n      },\r\n      event_converted_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event converted details',\r\n        default: null,\r\n        description: 'Event converted details'\r\n      }\r\n    }\r\n  }\r\n  plugin.trial = function (display_element, trial) {\r\n    var plugin_id_name = \"jspsych-survey-multi-choice-ISI\";\r\n\r\n    var html = \"\";\r\n\r\n    // store response\r\n    var response = {\r\n      trial_events: []\r\n    };\r\n    var timestamp_onload = jsPsych.totalTime();\r\n\r\n    response.trial_events.push({\r\n      \"event_type\": trial.event_type,\r\n      \"event_raw_details\": trial.event_raw_details,\r\n      \"event_converted_details\": trial.event_converted_details,\r\n      \"timestamp\": jsPsych.totalTime(),\r\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n    });\r\n\r\n    $('body').prepend(\r\n      `<header>\r\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n            <p class=\"navbar-text\">${plugin.info.name}</p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>`);\r\n\r\n    // inject CSS for trial\r\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n    html += \".jspsych-survey-multi-choice-question { text-align: left; }\" +\r\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text { }\" +\r\n      \".jspsych-survey-multi-choice-option { line-height: 2;   }\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\r\n      \".jspsych-content { width: 1000px}\" +\r\n      \".jspsych-btn { margin: 100px 0; }\" +\r\n      \".jspsych-content { margin-top: 130px;}\" +\r\n      \".jspsych-survey-multi-choice-left { width: 40%}\" +\r\n      \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; margin: 1rem; }\" +\r\n\r\n      \".jspsych-survey-multi-choice-right { width: 60%; display: flex; justify-content: space-around; }\" +\r\n\r\n      \".jspsych-survey-multi-choice-right-top { width: 60%; display: flex; justify-content: space-around; }\" +\r\n      \".jspsych-survey-multi-choice-preamble {width: 800px; text-align: left; border-bottom: 1px solid;} .jspsych-survey-multi-choice-preamble h2 {text-align: center} .preamble-wrapper {display: flex;} .preamble-wrapper p {padding-left: 2rem;}\" +\r\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\r\n    html += '</style>';\r\n\r\n    // show preamble text\r\n    if (trial.preamble !== null) {\r\n      html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n    }\r\n\r\n    // form element\r\n    html += '<div id=\"' + plugin_id_name + '\">';\r\n    html += '<form id=\"jspsych-survey-multi-choice-form\" novalidate>';\r\n\r\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n    // so that the data are always associated with the same question regardless of order\r\n    var question_order = [];\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n      question_order.push(i);\r\n    }\r\n\r\n    if (trial.randomize_question_order) {\r\n      question_order = jsPsych.randomization.shuffle(question_order);\r\n    }\r\n\r\n    // add multiple-choice questions\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n\r\n      // get question based on question_order\r\n      var question = trial.questions[question_order[i]];\r\n      var question_id = question_order[i];\r\n\r\n      // create question container\r\n      var question_classes = ['jspsych-survey-multi-choice-question'];\r\n      if (question.horizontal) {\r\n        question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n      }\r\n\r\n      html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n\r\n      // add question text\r\n      html += '<div><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question\" style=\"padding-top: 3px;\">' + question.prompt\r\n      // question.required\r\n      html += '</p></div>';\r\n      html += '<div style=\"padding-left: 2rem;\">';\r\n\r\n      html += '<div>';\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        if (question_id === 0) {\r\n          if (j === 0) {\r\n            html += '<div style=\"display: flex;\"><div class=\"jspsych-survey-multi-choice-left\"></div><div style=\"width: 60%; display: flex; justify-content: space-around; border-bottom: 1px solid;\">';\r\n            for (var index = 0; index < question.title.length; index++) {\r\n              html += '<div>' + question.title[index] + '</div>';\r\n            }\r\n            html += '</div>';\r\n          }\r\n        } else {\r\n          if (j === 0) {\r\n            if (i === 1) {\r\n              html += '<div style=\"display: flex;\"><div style=\"width: 60%; display: flex; justify-content: space-between;\">';\r\n            } else {\r\n              html += '<div style=\"display: flex;\"><div style=\"width: 60%; display: flex; justify-content: space-around;\">';\r\n            }\r\n\r\n            for (var index = 0; index < question.title.length; index++) {\r\n              html += '<div style=\"width: 100px; text-align: center;\">' + question.title[index] + '</div>';\r\n            }\r\n            html += '</div>';\r\n          }\r\n\r\n        }\r\n      }\r\n      html += '</div>';\r\n      html += '<div style=\"display: flex;\"><div class=\"jspsych-survey-multi-choice-right\">';\r\n\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        if (question_id != 0) {\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n\r\n          // add radio button container\r\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option jspsych-survey-question\">';\r\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\" id=\"' + input_id + '\" value=\"' + question.options[j] + '\"></input>';\r\n          html += '</div>';\r\n        }\r\n\r\n      }\r\n      html += '</div>';\r\n      html += '</div>';\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        if (question_id === 0) {\r\n          html += '<div style=\"display: flex;\" id=\"jspsych-survey-multi-choice-1-' + j + '\"><div class=\"jspsych-survey-multi-choice-left jspsych-survey-multi-choice-question\">' + question.options[j].prompt + '</div>';\r\n          html += '<div class=\"jspsych-survey-multi-choice-right-top\">';\r\n          for (var k = 0; k < question.options[j].options.length; k++) {\r\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j + '-' + k;\r\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j + '-' + k;\r\n\r\n            html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n            html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + 'S' + (j+1) + '\" data-question-number=\"Q' + (i+1) + 'S' + (j+1) + 'A' + (k+1) +'\" for=\"' + input_id + '\">' + question.options[j].options[k] + '</label>';\r\n            html += '<input hidden type=\"radio\" name=\"' + input_name + '\" id=\"' + input_id + '\" value=\"' + question.options[j].options[k] + '\"></input></div>';\r\n          }\r\n          html += '</div>'\r\n          html += '</div>'\r\n        }\r\n\r\n      }\r\n      html += '</div>';\r\n      html += '</div>';\r\n      html += '</div>';\r\n    }\r\n\r\n    // add submit button\r\n    html += '<input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input>';\r\n    html += '</form>';\r\n\r\n    html +=\r\n      `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n          <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n            <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n              <header class=\"modal__header\">\r\n                <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                  Warning!\r\n                </h2>\r\n                <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n              </header>\r\n              <main class=\"modal__content\" id=\"modal-1-content\">\r\n                <p>\r\n                ${popup_text_web_forms}\r\n                </p>\r\n              </main>\r\n              <footer class=\"modal__footer\">\r\n                <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n              </footer>\r\n            </div>\r\n          </div>\r\n      </div>`;\r\n\r\n    // render\r\n    display_element.innerHTML = html;\r\n\r\n    // function to handle key press responses\r\n    var after_response = function (info) {\r\n\r\n      if (info.key_release === undefined) {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key press\",\r\n          \"event_raw_details\": info.key,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n\r\n        if(info.el) {\r\n          if(info.el.dataset.timeStamp) {\r\n            trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n          }\r\n          if(info.el.dataset.questionNumber) {\r\n            response.trial_events.push({\r\n              \"event_type\": \"answer displayed\",\r\n              \"event_raw_details\": info.el.dataset.questionNumber,\r\n              \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n          if(info.el.type === 'submit') {\r\n            response.trial_events.push({\r\n              \"event_type\": \"button clicked\",\r\n              \"event_raw_details\": 'Submit',\r\n              \"event_converted_details\": '\"Submit\" selected',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key release\",\r\n          \"event_raw_details\": info.key_release,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n      }\r\n    }\r\n\r\n    $('.jspsych-survey-question').parent().css('border-top', '1px solid')\r\n\r\n    $('.jspsych-survey-highlight').click(function () {\r\n      $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n      $(this).addClass('bg-primary');\r\n      $(this).next('input').prop(\"checked\", true);\r\n      $(this).closest('input').click();\r\n    })\r\n\r\n    document.querySelector('form').addEventListener('submit', function (event) {\r\n      event.preventDefault();\r\n      // measure response time\r\n      var endTime = performance.now();\r\n      var response_time = endTime - startTime;\r\n\r\n      // create object to hold responses\r\n      var question_data = {};\r\n      var timestamp_data = {};\r\n      for (var i = 1; i < trial.questions.length; i++) {\r\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n        var id = i + 1;\r\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n          $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error');\r\n        } else {\r\n          var val = \"\";\r\n          $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error');\r\n        }\r\n        var obje = {};\r\n        var name = id;\r\n        if (match.attributes['data-name'].value !== '') {\r\n          name = match.attributes['data-name'].value;\r\n        }\r\n        obje[name] = val;\r\n        timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n        Object.assign(question_data, obje);\r\n      }\r\n\r\n      for (var i = 0; i < trial.questions[0].options.length; i++) {\r\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-1-' + i);\r\n        var id_array = ['1 (falling)', '1 (staying)', '1 (waking)'];\r\n        var id = id_array[i];\r\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n          $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error');\r\n        } else {\r\n          var val = \"\";\r\n          $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error');\r\n        }\r\n\r\n        var obje = {};\r\n        var name = id;\r\n        timestamp_data[id] = trial.time_stamp['Q1S' + (i+1)];\r\n        obje[name] = val;\r\n        Object.assign(question_data, obje);\r\n      }\r\n\r\n      if ($(\".survey-error\").length < 1) {\r\n        // kill keyboard listeners\r\n        if (typeof keyboardListener !== 'undefined') {\r\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n        }\r\n\r\n        // save data\r\n        var trial_data = {\r\n          \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n          \"responses\": JSON.stringify(question_data),\r\n          \"timestamp\": JSON.stringify(timestamp_data),\r\n          \"question_order\": JSON.stringify(question_order),\r\n          \"events\": JSON.stringify(response.trial_events)\r\n        };\r\n\r\n        display_element.innerHTML = '';\r\n        $('.navbar').remove();\r\n\r\n        // next trial\r\n        jsPsych.finishTrial(trial_data);\r\n      } else {\r\n        MicroModal.show('modal-1');\r\n      }\r\n\r\n\r\n    });\r\n\r\n    var startTime = performance.now();\r\n\r\n    // start the response listener\r\n    var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n    var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n  };\r\n\r\n  return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ISI.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-LSAS.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-LSAS.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['LSAS'] = (function () {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'LSAS',\n      stage_name: 'LSAS',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default: 'Continue',\n          description: 'Label of the button.'\n        },\n        time_stamp: {\n          type: jsPsych.plugins.parameterType.OBJECT,\n          pretty_name: 'Timestamp',\n          default: {},\n          description: 'Object for collecting timestamp'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n      }\n    }\n    plugin.trial = function (display_element, trial) {\n      var plugin_id_name = \"jspsych-survey-multi-choice-LSAS\";\n  \n      var html = \"\";\n  \n      // store response\n      var response = {\n        trial_events: []\n      };\n      var timestamp_onload = jsPsych.totalTime();\n  \n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n  \n      $('body').prepend(\n        `<header>\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n            <div class=\"container-fluid\">\n              <div class=\"navbar-header\">\n              <p class=\"navbar-text\">\n                  <b>${plugin.info.name}</b>\n              </p>\n              </div>\n            </div>\n          </nav>\n        </header>`);\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-top: 1px solid }\" +\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n        \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%;}\" +\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \".jspsych-survey-multi-choice-form { max-width: 1400px }\" +\n        \".jspsych-btn { margin: 100px 0; }\" +\n        \".jspsych-content { margin-top: 130px;}\" +\n        \"ul {list-style: none}\" +\n        \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\n        \".jspsych-survey-multi-choice-number { display: flex; height: 100%; width: 30px; text-align: center; justify-content: center; }\" +\n        \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1400px; padding-bottom: 1rem; }\" +\n        \".jspsych-survey-multi-choice-preamble ul {  list-style-type: disc; }\" +\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between; border-bottom: 2px solid; }\" +\n        \".jspsych-survey-multi-choice-instructions .jspsych-survey-multi-choice-instructions-title { display: flex;  padding-inline-start: 0; margin-bottom: 0; width: 70%; }\" +\n        \".jspsych-survey-multi-choice-instructions .jspsych-survey-multi-choice-instructions-title div { width: 100%; }\" +\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; width: 100%; height: 120px; padding-inline-start: 0; justify-content: space-around; }\" +\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; width: 90px; align-items: center; }\" +\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \"p { margin: 0 0 0px; }\"\n      html += '</style>';\n  \n      // show preamble text\n      if (trial.preamble !== null) {\n        html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\n      }\n  \n      // form element\n      html += '<div id=\"' + plugin_id_name + '\">';\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\n      html +=\n        `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\n            <div style=\"display: flex; align-items: center; border-right: 3px solid #fff; width: 30%\">\n                <p>Understanding the situations:</p>\n            </div>\n            <div class=\"jspsych-survey-multi-choice-instructions-title\">\n                <div style=\"border-right: 1px solid #fff;\">\n                    <h4>FEAR OR ANXIETY</h4>\n                    <ul>\n                        <li><div>None</div></li>\n                        <li><div>Mild</div></li>\n                        <li><div>Moderate</div></li>\n                        <li><div>Severe</div></li>\n                    </ul>\n                </div>\n                <div>\n                    <h4>AVOIDANCE</h4>\n                    <ul>\n                        <li><div>Never (0%)</div></li>\n                        <li><div>Occasionally (1%-33% of the time)</div></li>\n                        <li><div>Often (33%-67% of the time)</div></li>\n                        <li><div>Usually (67%-100% of the time)</div></li>\n                    </ul>\n                </div>\n            </div>\n        </div>`\n  \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for (var i = 0; i < trial.questions.length; i++) {\n        question_order.push(i);\n      }\n      if (trial.randomize_question_order) {\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n  \n      // add multiple-choice questions\n      for (var i = 0; i < trial.questions.length; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\n  \n        // add question text\n        html += '<div style=\"display: flex; width: 30%; border-right: 3px solid #fff;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '.</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 0 10px; width: 100%;\">' + question.prompt\n        // question.required\n        html += '</p></div>';\n        html += '<div style=\"display: flex; width: 70%; justify-content: space-around;\">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          var timestamp_char = ['A','F']\n            if(j === 0) {\n                html += '<div class=\"f\" style=\"display: flex; width: 70%; justify-content: space-around; border-right: 1px solid #fff; \">';\n            } else {\n                html += '<div class=\"a\" style=\"display: flex; width: 70%; justify-content: space-around; \">';\n            }\n          // add label and question text\n          for (var k = 0; k < question.options[j].length; k++) {\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j + '-' + k;\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j + '-' + k;\n    \n            var required_attr = question.required ? 'required' : '';\n    \n            // add radio button container\n            html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n            html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"' + timestamp_char[j] + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j][k] + '</label>';\n            html += '<input hidden type=\"radio\" name=\"' + input_name + '\" id=\"' + input_id + '\" value=\"' + question.options[j][k] + '\" ' + required_attr + '></input>';\n            html += '</div>';\n          }\n          html += '</div>';\n        }\n        \n        html += '</div></div>';\n      }\n  \n      // add submit button\n      html += '<input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input>';\n  \n  \n      html += '</form>';\n      html += '</div>';\n  \n      html +=\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\n                  <header class=\"modal__header\">\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\n                      Warning!\n                    </h2>\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\n                  </header>\n                  <main class=\"modal__content\" id=\"modal-1-content\">\n                    <p>${popup_text_web_forms}</p>\n                  </main>\n                  <footer class=\"modal__footer\">\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\n                  </footer>\n                </div>\n              </div>\n          </div>`;\n  \n      // render\n      display_element.innerHTML = html;\n  \n      // function to handle key press responses\n      var after_response = function (info) {\n  \n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n  \n      $('.jspsych-survey-highlight').click(function () {\n        $(this).next('input').prop(\"checked\", true);\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\n        $(this).addClass('bg-primary');\n        $(this).closest('input').click();\n      })\n  \n      document.querySelector('form').addEventListener('submit', function (event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n        // create object to hold responses\n        var question_data = {};\n        var timestamp_data = {};\n        for (var i = 0; i < trial.questions.length; i++) {\n            var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\n            if (match.querySelector(\".f input[type=radio]:checked\") !== null && match.querySelector(\".a input[type=radio]:checked\")) {\n                var val_f = match.querySelector(\".f input[type=radio]:checked\").value;\n                var val_a = match.querySelector(\".a input[type=radio]:checked\").value;\n                $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\n                $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\n            } else {\n                $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\n                $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\n            }\n            var obje_f = {};\n            var obje_a = {};\n\n            if (match.attributes['data-name'].value !== '') {\n                name = match.attributes['data-name'].value;\n            }\n            obje_f[\"F\" + (i + 1)] = val_f;\n            obje_a[\"A\" + (i + 1)] = val_a;\n         \n            timestamp_data[\"F\" + (i + 1)] = trial.time_stamp['F' + (i+1)];\n            timestamp_data[\"A\" + (i + 1)] = trial.time_stamp['A' + (i+1)];\n            Object.assign(question_data, obje_f, obje_a);\n        }\n\n  \n        if ($(\".survey-error-after\").length < 1) {\n          // kill keyboard listeners\n          if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n          }\n  \n          // save data\n          var trial_data = {\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"timestamp\": JSON.stringify(timestamp_data),\n            \"question_order\": JSON.stringify(question_order),\n            \"events\": JSON.stringify(response.trial_events)\n          };\n  \n          display_element.innerHTML = '';\n          $('.navbar').remove();\n  \n          // next trial\n          jsPsych.finishTrial(trial_data);\n        } else {\n          MicroModal.show('modal-1');\n        }\n  \n      });\n  \n      var startTime = performance.now();\n  \n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-LSAS.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-MOVES.js":
/*!*********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-MOVES.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['MOVES'] = (function () {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'MOVES',\r\n      stage_name: 'MOVES',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default: 'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function (display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-MOVES\";\r\n  \r\n      var html = \"\";\r\n  \r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n      var timestamp_onload = jsPsych.totalTime();\r\n  \r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n  \r\n      $('body').prepend(\r\n        `<header>\r\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n            <div class=\"container-fluid\">\r\n              <div class=\"navbar-header\">\r\n              <p class=\"navbar-text\">\r\n                  <b>${plugin.info.name}</b>\r\n              </p>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid }\" +\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n        \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".form-radio { top: 0; }\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\r\n        \".jspsych-survey-multi-choice-number { display: flex; height: 100%; width: 30px; text-align: center; justify-content: center; }\" +\r\n        \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1000px; padding-bottom: 1rem; }\" +\r\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between; border-bottom: 1px solid; font-weight: bold; }\" +\r\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; justify-content: space-between; padding-inline-start: 0; margin-bottom: 0; width: 60%; }\" +\r\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; border-left: 1px solid; width: 164px; }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \"p { margin: 0 0 0px; }\"\r\n      html += '</style>';\r\n  \r\n      // show preamble text\r\n      if (trial.preamble !== null) {\r\n        html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n      }\r\n  \r\n      html += '<div id=\"'+ plugin_id_name + '\">'\r\n      // form element\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n  \r\n  \r\n      html +=\r\n        `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n            <div style=\"width: 40%; text-align: left;\">\r\n            <p><b>Answer the questions below for the past 2 weeks</b></p>\r\n            </div>\r\n            <ul>\r\n              <li><div>Never</div></li>\r\n              <li><div>Sometimes</div></li>\r\n              <li><div>Often</div></li>\r\n              <li><div>Always</div></li>\r\n            </ul>\r\n        </div>`\r\n  \r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        question_order.push(i);\r\n      }\r\n      if (trial.randomize_question_order) {\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n  \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n  \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n  \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 40%;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '.</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 0 10px; width: 100%;\">' + question.prompt\r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around; border-left: 1px solid;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<label hidden class=\"jspsych-survey-multi-choice-text\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + trial.title[j] + '\" ' + required_attr + '></input>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n  \r\n      // add submit button\r\n      html += '<input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input>';\r\n  \r\n  \r\n      html += '</form>';\r\n  \r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                  <header class=\"modal__header\">\r\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                      Warning!\r\n                    </h2>\r\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                  </header>\r\n                  <main class=\"modal__content\" id=\"modal-1-content\">\r\n                    <p>${popup_text_web_forms}</p>\r\n                  </main>\r\n                  <footer class=\"modal__footer\">\r\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                  </footer>\r\n                </div>\r\n              </div>\r\n          </div>`;\r\n  \r\n      // render\r\n      display_element.innerHTML = html;\r\n  \r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n  \r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n\r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n  \r\n      $('.jspsych-survey-highlight').click(function () {\r\n        $(this).next('input').prop(\"checked\", true);\r\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n        $(this).addClass('bg-primary');\r\n        $(this).closest('input').click();\r\n      })\r\n  \r\n      document.querySelector('form').addEventListener('submit', function (event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n\r\n        for (var i = 0; i < trial.questions.length; i++) {\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n          var id = i + 1;\r\n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n          } else {\r\n            var val = \"\";\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if (match.attributes['data-name'].value !== '') {\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          Object.assign(question_data, obje);\r\n        }\r\n  \r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n  \r\n      });\r\n  \r\n      var startTime = performance.now();\r\n  \r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-MOVES.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-OCI-R.js":
/*!*********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-OCI-R.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['OCI-R'] = (function() {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'OCI-R',\r\n      stage_name: 'OCI-R',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default:  'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function(display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-OSC-R\";\r\n  \r\n      var html = \"\";\r\n      var timestamp_onload = jsPsych.totalTime();\r\n\r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n\r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n\r\n   $('body').prepend(\r\n    `<header>\r\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n            <p class=\"navbar-text\">\r\n                <b>${plugin.info.name}</b>\r\n            </p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid }\"+\r\n        \".jspsych-survey-multi-choice-question:nth-child(2n-2) { background-color: #444; }\"+\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\"+\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\"+\r\n        \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\"+\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\"+\r\n        \".jspsych-survey-multi-choice-content { outline: 1px solid #fff;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\r\n        \".jspsych-survey-multi-choice-number { display: flex; align-items: center; height: 100%; width: 30px; border-left: 1px solid #fff; border-right: 1px solid #fff; text-align: center; justify-content: center; }\" +\r\n        \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1000px; padding-bottom: 1rem; }\" +\r\n        \".jspsych-survey-multi-choice-instructions { border-top: 1px solid #fff; border-bottom: 1px solid #fff;  }\" +\r\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; justify-content: space-around; padding-inline-start: 0; margin-bottom: 0; }\" +\r\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; width: 100%; border-right: 1px solid #fff; padding: 1rem;  }\" +\r\n        \".jspsych-survey-multi-choice-instructions li:last-child { border-right: none;  }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \"p { margin: 0 0 0px; }\"\r\n      html += '</style>';\r\n  \r\n        // show preamble text\r\n        if(trial.preamble !== null){\r\n            html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">'+trial.preamble+'</div>';\r\n        }\r\n            \r\n\r\n      // form element\r\n      html += '<div id=\"' + plugin_id_name + '\">';\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n      \r\n\r\n      html += \r\n      `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n          <ul>\r\n            <li><div><p>0</p><p>Not at all</p></div></li>\r\n            <li><div><p>1</p><p>A little</p></div></li>\r\n            <li><div><p>2</p><p>Moderately</p></div></li>\r\n            <li><div><p>3</p><p>A lot</p></div></li>\r\n            <li><div><p>4</p><p>Extremely</p></div></li>\r\n          </ul>\r\n      </div>`\r\n\r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for(var i=0; i<trial.questions.length; i++){\r\n        question_order.push(i);\r\n      }\r\n      if(trial.randomize_question_order){\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n      \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n        \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+'\"  data-name=\"'+question.name+'\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 50%;\"><span class=\"jspsych-survey-multi-choice-number\">'+ (i+1) +'</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 0 10px; width: 100%;\">' + question.prompt \r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 50%; justify-content: space-around; border-right: 1px solid;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\"+question_id+\"-\"+j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-'+question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-'+question_id+'-'+j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"'+option_id_name+'\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"'+input_id+'\">' +question.options[j]+'</label>';\r\n          html += '<input hidden type=\"radio\" name=\"'+input_name+'\" id=\"'+input_id+'\" value=\"'+question.options[j]+'\" '+required_attr+'></input>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n      \r\n      // add submit button\r\n      html += '<input type=\"submit\" id=\"'+plugin_id_name+'-next\" class=\"'+plugin_id_name+' jspsych-btn\"' + (trial.button_label ? ' value=\"'+trial.button_label + '\"': '') + '></input>';\r\n      \r\n\r\n      html += '</form>';\r\n      html += '</div>';\r\n\r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n            <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n              <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                <header class=\"modal__header\">\r\n                  <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                    Warning!\r\n                  </h2>\r\n                  <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                </header>\r\n                <main class=\"modal__content\" id=\"modal-1-content\">\r\n                  <p>${popup_text_web_forms}</p>\r\n                </main>\r\n                <footer class=\"modal__footer\">\r\n                  <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                </footer>\r\n              </div>\r\n            </div>\r\n        </div>`;\r\n      \r\n      // render\r\n      display_element.innerHTML = html;\r\n\r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n\r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n\r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n\r\n      $('.jspsych-survey-highlight').click(function() {\r\n          $( this ).next('input').prop( \"checked\", true );\r\n          $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n          $(this).addClass('bg-primary');\r\n          $( this ).closest('input').click();\r\n      })\r\n  \r\n      document.querySelector('form').addEventListener('submit', function(event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n        for(var i=0; i<trial.questions.length; i++){\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-'+i);\r\n          var id = i + 1;\r\n          if(match.querySelector(\"input[type=radio]:checked\") !== null){\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n          } else {\r\n            var val = \"\";\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if(match.attributes['data-name'].value !== ''){\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          Object.assign(question_data, obje);\r\n        }\r\n        \r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n\r\n      });\r\n  \r\n      var startTime = performance.now();\r\n\r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-OCI-R.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PGSI.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PGSI.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['PGSI'] = (function () {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'PGSI',\n      stage_name: 'PGSI',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default: 'Continue',\n          description: 'Label of the button.'\n        },\n        time_stamp: {\n          type: jsPsych.plugins.parameterType.OBJECT,\n          pretty_name: 'Timestamp',\n          default: {},\n          description: 'Object for collecting timestamp'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n      }\n    }\n    plugin.trial = function (display_element, trial) {\n      var plugin_id_name = \"jspsych-survey-multi-choice-PGSI\";\n  \n      var html = \"\";\n  \n      // store response\n      var response = {\n        trial_events: []\n      };\n      var timestamp_onload = jsPsych.totalTime();\n      \n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n  \n      $('body').prepend(\n        `<header>\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n            <div class=\"container-fluid\">\n              <div class=\"navbar-header\">\n              <p class=\"navbar-text\">${plugin.info.name}</p>\n              </div>\n            </div>\n          </nav>\n        </header>`);\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { text-align: left; }\" +\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n        \".jspsych-survey-multi-choice-text { padding-left: 2rem; font-weight: 100; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n        \".jspsych-survey-multi-choice-option {  }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid; text-align: center; padding: 0 1rem;}\" +\n        \".jspsych-content { width: 1000px}\" +\n        \".jspsych-btn { margin: 100px 0; }\" +\n        \".jspsych-content { margin-top: 130px;}\" +\n        \"ul {list-style: none}\" +\n        \".form-radio { top: 3px; }\" +\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-left: 1em;}\" +\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \"p { margin: 0 0 0px;}\"\n      html += '</style>';\n  \n  \n      // form element\n      html += '<div id=\"' + plugin_id_name + '\">';\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\n\n      // show preamble text\n      if (trial.preamble !== null) {\n        html += '<div class=\"jspsych-survey-multi-choice-content\"><div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\n      }\n   \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for (var i = 0; i < trial.questions.length; i++) {\n        question_order.push(i);\n      }\n      if (trial.randomize_question_order) {\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n  \n      // add multiple-choice questions\n      for (var i = 0; i < trial.questions.length; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\n  \n        // add question text\n        html += '<div><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\"><b>' + question.prompt\n        // question.required\n        html += '</b></p></div>';\n        html += '<div style=\"padding: 2rem; padding-left: 10rem;\">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\"  id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '<label class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n      // html += '</div>';\n  \n      // add submit button\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\n      html += '</form>';\n      html += '</div>';\n      html +=\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\n                  <header class=\"modal__header\">\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\n                      Warning!\n                    </h2>\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\n                  </header>\n                  <main class=\"modal__content\" id=\"modal-1-content\">\n                    <p>\n                    ${popup_text_web_forms}\n                    </p>\n                  </main>\n                  <footer class=\"modal__footer\">\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\n                  </footer>\n                </div>\n              </div>\n          </div>`;\n  \n      // render\n      display_element.innerHTML = html;\n  \n      // function to handle key press responses\n      var after_response = function (info) {\n  \n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n  \n      $('.jspsych-survey-highlight').click(function () {\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\n        $(this).addClass('bg-primary');\n        $(this).next('input').prop(\"checked\", true);\n        $(this).closest('input').click();\n      })\n  \n      document.querySelector('form').addEventListener('submit', function (event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n  \n        // create object to hold responses\n        var question_data = {};\n        var timestamp_data = {};\n        for (var i = 0; i < trial.questions.length; i++) {\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\n          var id = i + 1;\n          \n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\n          } else {\n            var val = \"\";\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\n          }\n\n          var obje = {};\n          var name = id;\n      \n          if (match.attributes['data-name'].value !== '') {\n            name = match.attributes['data-name'].value;\n          }\n          obje[name] = val;\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\n          Object.assign(question_data, obje);\n        }\n  \n        if ($(\".survey-error-after\").length < 1) {\n          // kill keyboard listeners\n          if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n          }\n  \n          // save data\n          var trial_data = {\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"timestamp\": JSON.stringify(timestamp_data),\n            \"question_order\": JSON.stringify(question_order),\n            \"events\": JSON.stringify(response.trial_events)\n          };\n  \n          display_element.innerHTML = '';\n          $('.navbar').remove();\n  \n          // next trial\n          jsPsych.finishTrial(trial_data);\n        } else {\n          MicroModal.show('modal-1');\n        }\n  \n      });\n  \n      var startTime = performance.now();\n  \n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PGSI.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PHQ-9.js":
/*!*********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PHQ-9.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['PHQ-9'] = (function() {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'Severity Measure for Depression-Adult',\r\n      stage_name: 'PHQ-9',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default:  'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function(display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-PHQ-9\";\r\n  \r\n      var html = \"\";\r\n\r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n      var timestamp_onload = jsPsych.totalTime();\r\n\r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n\r\n   $('body').prepend(\r\n    `<header>\r\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n            <p class=\"navbar-text\">\r\n                <b>${plugin.info.name}</b> <br>\r\n                Adapted from the Patient Health Questionnaire–9 (PHQ-9)\r\n            </p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid }\"+\r\n        \".jspsych-survey-multi-choice-question:nth-child(2n+1) { background-color: #444; }\"+\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\"+\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\"+\r\n        \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\"+\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\"+\r\n        \".jspsych-survey-multi-choice-content { outline: 1px solid #fff;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\r\n        \".jspsych-survey-multi-choice-number { display: flex; align-items: center; height: 100%; width: 30px; border-left: 1px solid #fff; border-right: 1px solid #fff; text-align: center; justify-content: center; }\" +\r\n        \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1000px; padding-bottom: 1rem; }\" +\r\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between;  border-bottom: 1px solid;  border: 1px solid; background-color: #444; }\" +\r\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; width: 50%; justify-content: space-around; padding-inline-start: 0; margin-bottom: 0; }\" +\r\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; width: 100%; border-left: 1px solid; }\" +\r\n        \".jspsych-survey-multi-choice-instructions li div { width: 100px}\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \"p { margin: 0 0 0px; }\"\r\n      html += '</style>';\r\n  \r\n        // show preamble text\r\n        if(trial.preamble !== null){\r\n            html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">'+trial.preamble+'</div>';\r\n        }\r\n            \r\n\r\n      // form element\r\n      html += '<div id=\"' + plugin_id_name + '\">';\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n      \r\n\r\n      html += \r\n      `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n          <div></div>\r\n          <ul>\r\n            <li><div>Very False or Often False</div></li>\r\n            <li><div>Sometimes or Somewhat False</div></li>\r\n            <li><div>Sometimes or Somewhat True</div></li>\r\n            <li><div>Very True or Often True</div></li>\r\n          </ul>\r\n      </div>`\r\n\r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for(var i=0; i<trial.questions.length; i++){\r\n        question_order.push(i);\r\n      }\r\n      if(trial.randomize_question_order){\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n      \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n        \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+'\"  data-name=\"'+question.name+'\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 50%;\"><span class=\"jspsych-survey-multi-choice-number\">'+ (i+1) +'</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 0 10px; width: 100%;\">' + question.prompt \r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 50%; justify-content: space-around; border-right: 1px solid;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\"+question_id+\"-\"+j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-'+question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-'+question_id+'-'+j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"'+option_id_name+'\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"'+input_id+'\">' +question.options[j]+'</label>';\r\n          html += '<input hidden type=\"radio\" name=\"'+input_name+'\" id=\"'+input_id+'\" value=\"'+question.options[j]+'\" '+required_attr+'></input>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n      \r\n      // add submit button\r\n      html += '<input type=\"submit\" id=\"'+plugin_id_name+'-next\" class=\"'+plugin_id_name+' jspsych-btn\"' + (trial.button_label ? ' value=\"'+trial.button_label + '\"': '') + '></input>';\r\n      \r\n\r\n      html += '</form>';\r\n      html += '</div>';\r\n\r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n            <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n              <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                <header class=\"modal__header\">\r\n                  <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                    Warning!\r\n                  </h2>\r\n                  <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                </header>\r\n                <main class=\"modal__content\" id=\"modal-1-content\">\r\n                  <p>${popup_text_web_forms}</p>\r\n                </main>\r\n                <footer class=\"modal__footer\">\r\n                  <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                </footer>\r\n              </div>\r\n            </div>\r\n        </div>`;\r\n      \r\n      // render\r\n      display_element.innerHTML = html;\r\n\r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n\r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n          \r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n\r\n      $('.jspsych-survey-highlight').click(function() {\r\n          $( this ).next('input').prop( \"checked\", true );\r\n          $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n          $(this).addClass('bg-primary');\r\n          $( this ).closest('input').click();\r\n      })\r\n  \r\n      document.querySelector('form').addEventListener('submit', function(event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n        for(var i=0; i<trial.questions.length; i++){\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-'+i);\r\n          var id = + i + 1;\r\n          if(match.querySelector(\"input[type=radio]:checked\") !== null){\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n          } else {\r\n            var val = \"\";\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if(match.attributes['data-name'].value !== ''){\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          Object.assign(question_data, obje);\r\n        }\r\n        \r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n\r\n      });\r\n  \r\n      var startTime = performance.now();\r\n\r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PHQ-9.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PID-5-BF.js":
/*!************************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PID-5-BF.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['PID-5-BF'] = (function () {\r\n  var plugin = {};\r\n\r\n  plugin.info = {\r\n    name: 'The Personality Inventory for DSM-5-Brief Form (PID-5-BF)-Adult',\r\n    stage_name: 'PID-5-BF',\r\n    description: '',\r\n    parameters: {\r\n      questions: {\r\n        type: jsPsych.plugins.parameterType.COMPLEX,\r\n        array: true,\r\n        pretty_name: 'Questions',\r\n        nested: {\r\n          prompt: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Prompt',\r\n            default: undefined,\r\n            description: 'The strings that will be associated with a group of options.'\r\n          },\r\n          options: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Options',\r\n            array: true,\r\n            default: undefined,\r\n            description: 'Displays options for an individual question.'\r\n          },\r\n          required: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Required',\r\n            default: false,\r\n            description: 'Subject will be required to pick an option for each question.'\r\n          },\r\n          horizontal: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Horizontal',\r\n            default: false,\r\n            description: 'If true, then questions are centered and options are displayed horizontally.'\r\n          },\r\n          name: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Question Name',\r\n            default: '',\r\n            description: 'Controls the name of data values associated with this question'\r\n          }\r\n        }\r\n      },\r\n      randomize_question_order: {\r\n        type: jsPsych.plugins.parameterType.BOOL,\r\n        pretty_name: 'Randomize Question Order',\r\n        default: false,\r\n        description: 'If true, the order of the questions will be randomized'\r\n      },\r\n      preamble: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Preamble',\r\n        default: null,\r\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n      },\r\n      button_label: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Button label',\r\n        default: 'Continue',\r\n        description: 'Label of the button.'\r\n      },\r\n      time_stamp: {\r\n        type: jsPsych.plugins.parameterType.OBJECT,\r\n        pretty_name: 'Timestamp',\r\n        default: {},\r\n        description: 'Object for collecting timestamp'\r\n      },\r\n      event_type: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event type',\r\n        default: null,\r\n        description: 'Event type'\r\n      },\r\n      event_raw_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event raw details',\r\n        default: null,\r\n        description: 'Event raw details'\r\n      },\r\n      event_converted_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event converted details',\r\n        default: null,\r\n        description: 'Event converted details'\r\n      }\r\n    }\r\n  }\r\n  plugin.trial = function (display_element, trial) {\r\n    var plugin_id_name = \"jspsych-survey-multi-choice-PID-5-BF\";\r\n\r\n    var html = \"\";\r\n\r\n    // store response\r\n    var response = {\r\n      trial_events: []\r\n    };\r\n    var timestamp_onload = jsPsych.totalTime();\r\n\r\n    response.trial_events.push({\r\n      \"event_type\": trial.event_type,\r\n      \"event_raw_details\": trial.event_raw_details,\r\n      \"event_converted_details\": trial.event_converted_details,\r\n      \"timestamp\": jsPsych.totalTime(),\r\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n    });\r\n\r\n    $('body').prepend(\r\n      `<header>\r\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n            <p class=\"navbar-text\">${plugin.info.name}</p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>`);\r\n\r\n    // inject CSS for trial\r\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n    html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid;}\" +\r\n      \".jspsych-survey-multi-choice-question:nth-child(2n) { background-color: #444; }\" +\r\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n      \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; line-height: 2; padding: 1rem 0; }\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\" +\r\n      \".jspsych-survey-multi-choice-content { outline: 1px solid #fff;}\" +\r\n      \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n      \".jspsych-content { width: 1000px}\" +\r\n      \".jspsych-btn { margin: 100px 0; }\" +\r\n      \".jspsych-content { margin-top: 130px;}\" +\r\n      \"ul {list-style: none}\" +\r\n      \".jspsych-survey-multi-choice-number { display: flex; align-items: center; height: 100%; width: 45px; border-left: 1px solid #fff; border-right: 1px solid #fff; text-align: center; justify-content: center; }\" +\r\n      \".jspsych-survey-multi-choice-preamble { text-align: left; padding: 1rem; background-color: #444; }\" +\r\n      \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between;  border-bottom: 1px solid;  border-top: 1px solid; background-color: #444; }\" +\r\n      \".jspsych-survey-multi-choice-instructions ul { display: flex; width: 50%; justify-content: space-around; padding-inline-start: 0; margin-bottom: 0; }\" +\r\n      \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; width: 100%; border-left: 1px solid; }\" +\r\n      \".jspsych-survey-multi-choice-instructions li div { width: 100px}\" +\r\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n      \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n      \"p {     margin: 0 0 0px;}\"\r\n    html += '</style>';\r\n\r\n\r\n    // form element\r\n    html += '<div id=\"' + plugin_id_name + '\">';\r\n    html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n\r\n    // show preamble text\r\n\r\n    // show preamble text\r\n    if (trial.preamble !== null) {\r\n      html += '<div class=\"jspsych-survey-multi-choice-content\"><div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n    }\r\n\r\n    html +=\r\n      `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n          <div></div>\r\n          <ul>\r\n            <li><div>Very False or Often False</div></li>\r\n            <li><div>Sometimes or Somewhat False</div></li>\r\n            <li><div>Sometimes or Somewhat True</div></li>\r\n            <li><div>Very True or Often True</div></li>\r\n          </ul>\r\n      </div>`\r\n\r\n\r\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n    // so that the data are always associated with the same question regardless of order\r\n    var question_order = [];\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n      question_order.push(i);\r\n    }\r\n    if (trial.randomize_question_order) {\r\n      question_order = jsPsych.randomization.shuffle(question_order);\r\n    }\r\n\r\n    // add multiple-choice questions\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n\r\n      // get question based on question_order\r\n      var question = trial.questions[question_order[i]];\r\n      var question_id = question_order[i];\r\n\r\n      // create question container\r\n      var question_classes = ['jspsych-survey-multi-choice-question'];\r\n      if (question.horizontal) {\r\n        question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n      }\r\n\r\n      html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n\r\n      // add question text\r\n      html += '<div style=\"display: flex; align-items: center; width: 50%;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding-left: 10px; width: 100%;\">' + question.prompt\r\n      // question.required\r\n      html += '</p></div>';\r\n      html += '<div style=\"display: flex; width: 50%; justify-content: space-around;\">';\r\n\r\n      // create option radio buttons\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        // add label and question text\r\n        var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n        var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n        var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n\r\n        var required_attr = question.required ? 'required' : '';\r\n\r\n        // add radio button container\r\n        html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n        html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n        html += '<input hidden type=\"radio\" name=\"' + input_name + '\" id=\"' + input_id + '\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n        html += '</div>';\r\n      }\r\n\r\n      html += '</div></div>';\r\n    }\r\n\r\n    html += '</div>';\r\n\r\n    // add submit button\r\n    html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\r\n    html += '</form>';\r\n\r\n    html +=\r\n      `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n            <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n              <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                <header class=\"modal__header\">\r\n                  <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                    Warning!\r\n                  </h2>\r\n                  <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                </header>\r\n                <main class=\"modal__content\" id=\"modal-1-content\">\r\n                  <p>\r\n                  ${popup_text_web_forms}\r\n                  </p>\r\n                </main>\r\n                <footer class=\"modal__footer\">\r\n                  <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                </footer>\r\n              </div>\r\n            </div>\r\n        </div>`;\r\n\r\n    // render\r\n    display_element.innerHTML = html;\r\n\r\n    // function to handle key press responses\r\n    var after_response = function (info) {\r\n\r\n      if (info.key_release === undefined) {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key press\",\r\n          \"event_raw_details\": info.key,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n\r\n        if(info.el) {\r\n          if(info.el.dataset.timeStamp) {\r\n            trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n          }\r\n          if(info.el.dataset.questionNumber) {\r\n            response.trial_events.push({\r\n              \"event_type\": \"answer displayed\",\r\n              \"event_raw_details\": info.el.dataset.questionNumber,\r\n              \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n          if(info.el.type === 'submit') {\r\n            response.trial_events.push({\r\n              \"event_type\": \"button clicked\",\r\n              \"event_raw_details\": 'Submit',\r\n              \"event_converted_details\": '\"Submit\" selected',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key release\",\r\n          \"event_raw_details\": info.key_release,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n    $('.jspsych-survey-highlight').click(function () {\r\n      $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n      $(this).addClass('bg-primary');\r\n      $(this).next('input').prop(\"checked\", true);\r\n      $(this).closest('input').click();\r\n    })\r\n\r\n    document.querySelector('form').addEventListener('submit', function (event) {\r\n      event.preventDefault();\r\n      // measure response time\r\n      var endTime = performance.now();\r\n      var response_time = endTime - startTime;\r\n\r\n      // create object to hold responses\r\n      var question_data = {};\r\n      var timestamp_data = {};\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n        var id = i + 1;\r\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n          $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n          $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n        } else {\r\n          var val = \"\";\r\n          $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n          $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n        }\r\n        var obje = {};\r\n        var name = id;\r\n        if (match.attributes['data-name'].value !== '') {\r\n          name = match.attributes['data-name'].value;\r\n        }\r\n        obje[name] = val;\r\n        timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n        Object.assign(question_data, obje);\r\n      }\r\n\r\n      if ($(\".survey-error-after\").length < 1) {\r\n        // kill keyboard listeners\r\n        if (typeof keyboardListener !== 'undefined') {\r\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n        }\r\n\r\n        // save data\r\n        var trial_data = {\r\n          \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n          \"responses\": JSON.stringify(question_data),\r\n          \"timestamp\": JSON.stringify(timestamp_data),\r\n          \"question_order\": JSON.stringify(question_order),\r\n          \"events\": JSON.stringify(response.trial_events)\r\n        };\r\n\r\n        display_element.innerHTML = '';\r\n        $('.navbar').remove();\r\n\r\n        // next trial\r\n        jsPsych.finishTrial(trial_data);\r\n      } else {\r\n        MicroModal.show('modal-1');\r\n      }\r\n\r\n    });\r\n\r\n    var startTime = performance.now();\r\n\r\n    // start the response listener\r\n    var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n    var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n  };\r\n\r\n  return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PID-5-BF.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PRIME-R.js":
/*!***********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PRIME-R.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['PRIME-R'] = (function () {\r\n  var plugin = {};\r\n\r\n  plugin.info = {\r\n    name: 'The PRIME Screen – Revised',\r\n    stage_name: 'PRIME-R',\r\n    description: '',\r\n    parameters: {\r\n      questions: {\r\n        type: jsPsych.plugins.parameterType.COMPLEX,\r\n        array: true,\r\n        pretty_name: 'Questions',\r\n        nested: {\r\n          prompt: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Prompt',\r\n            default: undefined,\r\n            description: 'The strings that will be associated with a group of options.'\r\n          },\r\n          options: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Options',\r\n            array: true,\r\n            default: undefined,\r\n            description: 'Displays options for an individual question.'\r\n          },\r\n          required: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Required',\r\n            default: false,\r\n            description: 'Subject will be required to pick an option for each question.'\r\n          },\r\n          horizontal: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Horizontal',\r\n            default: false,\r\n            description: 'If true, then questions are centered and options are displayed horizontally.'\r\n          },\r\n          name: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Question Name',\r\n            default: '',\r\n            description: 'Controls the name of data values associated with this question'\r\n          }\r\n        }\r\n      },\r\n      randomize_question_order: {\r\n        type: jsPsych.plugins.parameterType.BOOL,\r\n        pretty_name: 'Randomize Question Order',\r\n        default: false,\r\n        description: 'If true, the order of the questions will be randomized'\r\n      },\r\n      preamble: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Preamble',\r\n        default: null,\r\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n      },\r\n      button_label: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Button label',\r\n        default: 'Continue',\r\n        description: 'Label of the button.'\r\n      },\r\n      time_stamp: {\r\n        type: jsPsych.plugins.parameterType.OBJECT,\r\n        pretty_name: 'Timestamp',\r\n        default: {},\r\n        description: 'Object for collecting timestamp'\r\n      },\r\n      event_type: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event type',\r\n        default: null,\r\n        description: 'Event type'\r\n      },\r\n      event_raw_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event raw details',\r\n        default: null,\r\n        description: 'Event raw details'\r\n      },\r\n      event_converted_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event converted details',\r\n        default: null,\r\n        description: 'Event converted details'\r\n      }\r\n    }\r\n  }\r\n  plugin.trial = function (display_element, trial) {\r\n    var plugin_id_name = \"jspsych-survey-multi-choice-PRIME\";\r\n\r\n    var html = \"\";\r\n\r\n    // store response\r\n    var response = {\r\n      trial_events: []\r\n    };\r\n    var timestamp_onload = jsPsych.totalTime();\r\n\r\n    response.trial_events.push({\r\n      \"event_type\": trial.event_type,\r\n      \"event_raw_details\": trial.event_raw_details,\r\n      \"event_converted_details\": trial.event_converted_details,\r\n      \"timestamp\": jsPsych.totalTime(),\r\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n    });\r\n\r\n    $('body').prepend(\r\n      `<header>\r\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n            <p class=\"navbar-text\">\r\n                <b>${plugin.info.name}</b>\r\n            </p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>`);\r\n\r\n    // inject CSS for trial\r\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n    html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid }\" +\r\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n      \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\" +\r\n      \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n      \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n      \".jspsych-btn { margin: 100px 0; }\" +\r\n      \".jspsych-content { margin-top: 130px;}\" +\r\n      \"ul {list-style: none}\" +\r\n      \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\r\n      \".jspsych-survey-multi-choice-number { display: flex; height: 100%; width: 30px; text-align: center; justify-content: center; }\" +\r\n      \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1000px; padding-bottom: 1rem; }\" +\r\n      \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between; border-bottom: 2px solid #fff; }\" +\r\n      \".jspsych-survey-multi-choice-instructions ul { display: flex; justify-content: space-around; padding-inline-start: 0; margin-bottom: 0; width: 70%; }\" +\r\n      \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; border-left: 1px solid; }\" +\r\n      \".jspsych-survey-multi-choice-instructions li div { width: 98px; }\" +\r\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n      \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n      \"p { margin: 0 0 0px; }\"\r\n    html += '</style>';\r\n\r\n    // show preamble text\r\n    if (trial.preamble !== null) {\r\n      html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n    }\r\n\r\n\r\n    // form element\r\n    html += '<div id=\"' + plugin_id_name + '\">';\r\n    html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n\r\n\r\n    html +=\r\n      `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n          <div></div>\r\n          <ul style=\"border-left: 1px solid #fff;\">\r\n            <li ><div>Definitely disagree</div></li>\r\n            <li><div>Somewhat disagree</div></li>\r\n            <li><div>Slightly disagree</div></li>\r\n            <li><div>Not sure</div></li>\r\n            <li><div>Slightly agree</div></li>\r\n            <li><div>Somewhat agree</div></li>\r\n            <li><div>Definitely agree</div></li>\r\n          </ul>\r\n      </div>`\r\n\r\n\r\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n    // so that the data are always associated with the same question regardless of order\r\n    var question_order = [];\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n      question_order.push(i);\r\n    }\r\n    if (trial.randomize_question_order) {\r\n      question_order = jsPsych.randomization.shuffle(question_order);\r\n    }\r\n\r\n    // add multiple-choice questions\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n\r\n      // get question based on question_order\r\n      var question = trial.questions[question_order[i]];\r\n      var question_id = question_order[i];\r\n\r\n      // create question container\r\n      var question_classes = ['jspsych-survey-multi-choice-question'];\r\n      if (question.horizontal) {\r\n        question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n      }\r\n\r\n      html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n\r\n      // add question text\r\n      html += '<div style=\"display: flex; width: 30%;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 0 10px; width: 100%;\">' + question.prompt\r\n      // question.required\r\n      html += '</p></div>';\r\n      html += '<div style=\"display: flex; width: 70%; justify-content: space-around; border-left: 1px solid;\">';\r\n\r\n      // create option radio buttons\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        // add label and question text\r\n        var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n        var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n        var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n\r\n        var required_attr = question.required ? 'required' : '';\r\n\r\n        // add radio button container\r\n        html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n        html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\"  data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n        html += '<input hidden type=\"radio\" name=\"' + input_name + '\" id=\"' + input_id + '\" value=\"' + trial.title[j] + '\" ' + required_attr + '></input>';\r\n        html += '</div>';\r\n      }\r\n\r\n      html += '</div></div>';\r\n    }\r\n\r\n    // add submit button\r\n    html += '<input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input>';\r\n\r\n\r\n    html += '</form>';\r\n    html += '</div>';\r\n\r\n    html +=\r\n      `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n            <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n              <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                <header class=\"modal__header\">\r\n                  <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                    Warning!\r\n                  </h2>\r\n                  <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                </header>\r\n                <main class=\"modal__content\" id=\"modal-1-content\">\r\n                  <p>${popup_text_web_forms}</p>\r\n                </main>\r\n                <footer class=\"modal__footer\">\r\n                  <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                </footer>\r\n              </div>\r\n            </div>\r\n        </div>`;\r\n\r\n    // render\r\n    display_element.innerHTML = html;\r\n\r\n    // function to handle key press responses\r\n    var after_response = function (info) {\r\n\r\n      if (info.key_release === undefined) {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key press\",\r\n          \"event_raw_details\": info.key,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n\r\n        if(info.el) {\r\n          if(info.el.dataset.timeStamp) {\r\n            trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n          }\r\n          if(info.el.dataset.questionNumber) {\r\n            response.trial_events.push({\r\n              \"event_type\": \"answer displayed\",\r\n              \"event_raw_details\": info.el.dataset.questionNumber,\r\n              \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n          if(info.el.type === 'submit') {\r\n            response.trial_events.push({\r\n              \"event_type\": \"button clicked\",\r\n              \"event_raw_details\": 'Submit',\r\n              \"event_converted_details\": '\"Submit\" selected',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key release\",\r\n          \"event_raw_details\": info.key_release,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n      }\r\n    }\r\n\r\n    $('.jspsych-survey-highlight').click(function () {\r\n      $(this).next('input').prop(\"checked\", true);\r\n      $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n      $(this).addClass('bg-primary');\r\n      $(this).closest('input').click();\r\n    })\r\n\r\n    document.querySelector('form').addEventListener('submit', function (event) {\r\n      event.preventDefault();\r\n      // measure response time\r\n      var endTime = performance.now();\r\n      var response_time = endTime - startTime;\r\n      // create object to hold responses\r\n      var question_data = {};\r\n      var timestamp_data = {};\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n        var id = i + 1;\r\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n          $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n          $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n        } else {\r\n          var val = \"\";\r\n          $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n          $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n        }\r\n        var obje = {};\r\n        var name = id;\r\n        if (match.attributes['data-name'].value !== '') {\r\n          name = match.attributes['data-name'].value;\r\n        }\r\n        obje[name] = val;\r\n        timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n        Object.assign(question_data, obje);\r\n      }\r\n\r\n      if ($(\".survey-error-after\").length < 1) {\r\n        // kill keyboard listeners\r\n        if (typeof keyboardListener !== 'undefined') {\r\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n        }\r\n\r\n        // save data\r\n        var trial_data = {\r\n          \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n          \"responses\": JSON.stringify(question_data),\r\n          \"timestamp\": JSON.stringify(timestamp_data),\r\n          \"question_order\": JSON.stringify(question_order),\r\n          \"events\": JSON.stringify(response.trial_events)\r\n        };\r\n\r\n        display_element.innerHTML = '';\r\n        $('.navbar').remove();\r\n\r\n        // next trial\r\n        jsPsych.finishTrial(trial_data);\r\n      } else {\r\n        MicroModal.show('modal-1');\r\n      }\r\n\r\n    });\r\n\r\n    var startTime = performance.now();\r\n\r\n    // start the response listener\r\n    var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n    var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n  };\r\n\r\n  return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PRIME-R.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PTSD.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PTSD.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['PC-PTSD-5'] = (function() {\r\n  var plugin = {};\r\n\r\n  plugin.info = {\r\n    name: 'The Primary Care PTSD Screen for DSM-5 (PC-PTSD-5)',\r\n    stage_name: 'PC-PTSD-5',\r\n    description: '',\r\n    parameters: {\r\n      questions: {\r\n        type: jsPsych.plugins.parameterType.COMPLEX,\r\n        array: true,\r\n        pretty_name: 'Questions',\r\n        nested: {\r\n          prompt: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Prompt',\r\n            default: undefined,\r\n            description: 'The strings that will be associated with a group of options.'\r\n          },\r\n          options: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Options',\r\n            array: true,\r\n            default: undefined,\r\n            description: 'Displays options for an individual question.'\r\n          },\r\n          required: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Required',\r\n            default: false,\r\n            description: 'Subject will be required to pick an option for each question.'\r\n          },\r\n          horizontal: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Horizontal',\r\n            default: false,\r\n            description: 'If true, then questions are centered and options are displayed horizontally.'\r\n          },\r\n          name: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Question Name',\r\n            default: '',\r\n            description: 'Controls the name of data values associated with this question'\r\n          }\r\n        }\r\n      },\r\n      randomize_question_order: {\r\n        type: jsPsych.plugins.parameterType.BOOL,\r\n        pretty_name: 'Randomize Question Order',\r\n        default: false,\r\n        description: 'If true, the order of the questions will be randomized'\r\n      },\r\n      preamble: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Preamble',\r\n        default: null,\r\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n      },\r\n      button_label: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Button label',\r\n        default:  'Continue',\r\n        description: 'Label of the button.'\r\n      },\r\n      time_stamp: {\r\n        type: jsPsych.plugins.parameterType.OBJECT,\r\n        pretty_name: 'Timestamp',\r\n        default: {},\r\n        description: 'Object for collecting timestamp'\r\n      },\r\n      event_type: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event type',\r\n        default: null,\r\n        description: 'Event type'\r\n      },\r\n      event_raw_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event raw details',\r\n        default: null,\r\n        description: 'Event raw details'\r\n      },\r\n      event_converted_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event converted details',\r\n        default: null,\r\n        description: 'Event converted details'\r\n      }\r\n    }\r\n  }\r\n  plugin.trial = function(display_element, trial) {\r\n    var plugin_id_name = \"jspsych-survey-multi-choice-PC-PTSD-5\";\r\n    var isHidden = false;\r\n    var html = \"\";\r\n\r\n    // store response\r\n    var response = {\r\n      trial_events: []\r\n    };\r\n    var timestamp_onload = jsPsych.totalTime();\r\n\r\n    response.trial_events.push({\r\n      \"event_type\": trial.event_type,\r\n      \"event_raw_details\": trial.event_raw_details,\r\n      \"event_converted_details\": trial.event_converted_details,\r\n      \"timestamp\": jsPsych.totalTime(),\r\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n    });\r\n\r\n $('body').prepend(\r\n    `<header>\r\n      <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"navbar-header\">\r\n          <p class=\"navbar-text\">${plugin.info.name}</p>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </header>`);\r\n\r\n    // inject CSS for trial\r\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n    html += \".jspsych-survey-multi-choice-question { display: flex; margin-top: 2em; margin-bottom: 2em; text-align: left; justify-content: space-between; }\"+\r\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\"+\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\"+\r\n      \".jspsych-survey-multi-choice-option { line-height: 2; }\"+\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em; }\"+\r\n      \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n      \".jspsych-btn { margin: 100px 0; }\" +\r\n      \".jspsych-content { margin-top: 130px;}\" +\r\n      \".jspsych-survey-highlight { cursor: pointer; padding: 5px; }\" +\r\n      \".jspsych-survey-multi-choice-preamble {width: 800px; text-align: left; border-bottom: 1px solid;} .jspsych-survey-multi-choice-preamble h2 {text-align: center} .preamble-wrapper {display: flex;} .preamble-wrapper p {padding-left: 2rem;}\" +\r\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\r\n    html += '</style>';\r\n\r\n    // show preamble text\r\n    if(trial.preamble !== null){\r\n      html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">'+trial.preamble+'</div>';\r\n    }\r\n\r\n    // form element\r\n    html += '<div id=\"' + plugin_id_name + '\">';\r\n    html += '<form id=\"jspsych-survey-multi-choice-form\">';\r\n    \r\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n    // so that the data are always associated with the same question regardless of order\r\n    var question_order = [];\r\n    for(var i=0; i<trial.questions.length; i++){\r\n      question_order.push(i);\r\n    }\r\n    if(trial.randomize_question_order){\r\n      question_order = jsPsych.randomization.shuffle(question_order);\r\n    }\r\n    \r\n    // add multiple-choice questions\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n      \r\n      // get question based on question_order\r\n      var question = trial.questions[question_order[i]];\r\n      var question_id = question_order[i];\r\n      \r\n      // create question container\r\n      var question_classes = ['jspsych-survey-multi-choice-question'];\r\n      if (question.horizontal) {\r\n        question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n      }\r\n\r\n      \r\n      if(i === 0) {\r\n        html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+'\"  data-name=\"'+question.name+'\">';\r\n        // add question text\r\n        html += '<div><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"padding-top: 3px;\">' +  question.prompt \r\n      \r\n      } else {\r\n        html += '<div id=\"jspsych-survey-multi-choice-'+question_id+'\" class=\"'+question_classes.join(' ')+' hidden\"  data-name=\"'+question.name+'\">';\r\n        // add question text\r\n        html += '<div><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"padding-top: 3px;\">' + i + '. ' +  question.prompt \r\n      }\r\n\r\n  \r\n      // question.required\r\n      html += '</p></div>';\r\n      html += '<div style=\"padding-left: 2rem; margin-top: -5px; \">';\r\n\r\n      // create option radio buttons\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        // add label and question text\r\n        var option_id_name = \"jspsych-survey-multi-choice-option-\"+question_id+\"-\"+j;\r\n        var input_name = 'jspsych-survey-multi-choice-response-'+question_id;\r\n        var input_id = 'jspsych-survey-multi-choice-response-'+question_id+'-'+j;\r\n\r\n        var required_attr = question.required ? 'required' : '';\r\n\r\n        // add radio button container\r\n        html += '<div id=\"'+option_id_name+'\" class=\"jspsych-survey-multi-choice-option\">';\r\n        html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"'+input_id+'\">' +question.options[j]+'</label>';\r\n        html += '<input hidden type=\"radio\" name=\"'+input_name+'\" id=\"'+input_id+'\" value=\"'+question.options[j]+'\" '+required_attr+'></input>';\r\n        html += '</div>';\r\n        if(j === 0) {\r\n          html += '<span style=\"position: absolute; padding-top: 9px;\">/</span>';\r\n        }\r\n      }\r\n\r\n      html += '</div></div>';\r\n    }\r\n    \r\n    // add submit button\r\n    html += '<input type=\"submit\" id=\"'+plugin_id_name+'-next\" class=\"'+plugin_id_name+' jspsych-btn\"' + (trial.button_label ? ' value=\"'+trial.button_label + '\"': '') + '></input>';\r\n    html += '</form>';\r\n\r\n    \r\n    html +=\r\n      `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n          <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n            <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n              <header class=\"modal__header\">\r\n                <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                  Warning!\r\n                </h2>\r\n                <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n              </header>\r\n              <main class=\"modal__content\" id=\"modal-1-content\">\r\n                <p>${popup_text_web_forms}</p>\r\n              </main>\r\n              <footer class=\"modal__footer\">\r\n                <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n              </footer>\r\n            </div>\r\n          </div>\r\n      </div>`;\r\n\r\n    // render\r\n    display_element.innerHTML = html;\r\n\r\n    // function to handle key press responses\r\n    var after_response = function (info) {\r\n      if (info.key_release === undefined) {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key press\",\r\n          \"event_raw_details\": info.key,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n\r\n        if(info.el) {\r\n          if(info.el.dataset.timeStamp) {\r\n            trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n          }\r\n          if(info.el.dataset.questionNumber) {\r\n            response.trial_events.push({\r\n              \"event_type\": \"answer displayed\",\r\n              \"event_raw_details\": info.el.dataset.questionNumber,\r\n              \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n          if(info.el.type === 'submit') {\r\n            response.trial_events.push({\r\n              \"event_type\": \"button clicked\",\r\n              \"event_raw_details\": 'Submit',\r\n              \"event_converted_details\": '\"Submit\" selected',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key release\",\r\n          \"event_raw_details\": info.key_release,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n      }\r\n    }\r\n\r\n    $('.jspsych-survey-highlight').click(function() {\r\n        $(this).next('input').prop(\"checked\", true);\r\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n        $(this).addClass('bg-primary');\r\n        $(this).closest('input').click();\r\n    })\r\n\r\n    $('#jspsych-survey-multi-choice-option-0-0').click(function() {\r\n      isHidden = true;\r\n      $('.jspsych-survey-multi-choice-horizontal').removeClass('hidden')\r\n    })\r\n    $('#jspsych-survey-multi-choice-option-0-1').click(function() {\r\n      isHidden = false;\r\n      $('#jspsych-survey-multi-choice-1').addClass('hidden')\r\n      $('#jspsych-survey-multi-choice-2').addClass('hidden')\r\n      $('#jspsych-survey-multi-choice-3').addClass('hidden')\r\n      $('#jspsych-survey-multi-choice-4').addClass('hidden')\r\n      $('#jspsych-survey-multi-choice-5').addClass('hidden')\r\n    })\r\n\r\n    document.querySelector('form').addEventListener('submit', function(event) {\r\n      event.preventDefault();\r\n      // measure response time\r\n      var endTime = performance.now();\r\n      var response_time = endTime - startTime;\r\n\r\n      // create object to hold responses\r\n      var question_data = {};\r\n      var timestamp_data = {};\r\n      for(var i=0; i<trial.questions.length; i++){\r\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-'+i);\r\n        var id = i;\r\n\r\n        if(match.querySelector(\"input[type=radio]:checked\") !== null){\r\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n          $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n        } else {\r\n          var val = \"\";\r\n          $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n        }\r\n\r\n        if(i === 0) {\r\n          id = 'screen';\r\n        } else if(i != 0 && !isHidden) {\r\n          val = 'NA';\r\n          $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n        }\r\n       \r\n        var obje = {};\r\n        var name = id;\r\n        if(match.attributes['data-name'].value !== ''){\r\n          name = match.attributes['data-name'].value;\r\n        }\r\n\r\n        timestamp_data[name] = val === 'NA' ? val : trial.time_stamp['Q' + (i+1)];\r\n        obje[name] = val; \r\n        Object.assign(question_data, obje);\r\n      }\r\n\r\n      if ($(\".survey-error-after\").length < 1) {\r\n        // kill keyboard listeners\r\n        if (typeof keyboardListener !== 'undefined') {\r\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n        }\r\n\r\n        // save data\r\n        var trial_data = {\r\n          \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n          \"responses\": JSON.stringify(question_data),\r\n          \"timestamp\": JSON.stringify(timestamp_data),\r\n          \"question_order\": JSON.stringify(question_order),\r\n          \"events\": JSON.stringify(response.trial_events)\r\n        };\r\n\r\n        display_element.innerHTML = '';\r\n        $('.navbar').remove();\r\n\r\n        // next trial\r\n        jsPsych.finishTrial(trial_data);\r\n      } else {\r\n        MicroModal.show('modal-1');\r\n      }\r\n\r\n    });\r\n\r\n    var startTime = performance.now();\r\n\r\n    // start the response listener\r\n    var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n    var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n  };\r\n\r\n  return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PTSD.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-RAADS.js":
/*!*********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-RAADS.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['RAADS-14'] = (function () {\r\n  var plugin = {};\r\n\r\n  plugin.info = {\r\n    name: 'The RAADS-14 Screen',\r\n    stage_name: 'RAADS-14',\r\n    description: '',\r\n    parameters: {\r\n      questions: {\r\n        type: jsPsych.plugins.parameterType.COMPLEX,\r\n        array: true,\r\n        pretty_name: 'Questions',\r\n        nested: {\r\n          prompt: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Prompt',\r\n            default: undefined,\r\n            description: 'The strings that will be associated with a group of options.'\r\n          },\r\n          options: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Options',\r\n            array: true,\r\n            default: undefined,\r\n            description: 'Displays options for an individual question.'\r\n          },\r\n          required: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Required',\r\n            default: false,\r\n            description: 'Subject will be required to pick an option for each question.'\r\n          },\r\n          horizontal: {\r\n            type: jsPsych.plugins.parameterType.BOOL,\r\n            pretty_name: 'Horizontal',\r\n            default: false,\r\n            description: 'If true, then questions are centered and options are displayed horizontally.'\r\n          },\r\n          name: {\r\n            type: jsPsych.plugins.parameterType.STRING,\r\n            pretty_name: 'Question Name',\r\n            default: '',\r\n            description: 'Controls the name of data values associated with this question'\r\n          }\r\n        }\r\n      },\r\n      randomize_question_order: {\r\n        type: jsPsych.plugins.parameterType.BOOL,\r\n        pretty_name: 'Randomize Question Order',\r\n        default: false,\r\n        description: 'If true, the order of the questions will be randomized'\r\n      },\r\n      preamble: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Preamble',\r\n        default: null,\r\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n      },\r\n      button_label: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Button label',\r\n        default: 'Continue',\r\n        description: 'Label of the button.'\r\n      },\r\n      time_stamp: {\r\n        type: jsPsych.plugins.parameterType.OBJECT,\r\n        pretty_name: 'Timestamp',\r\n        default: {},\r\n        description: 'Object for collecting timestamp'\r\n      },\r\n      event_type: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event type',\r\n        default: null,\r\n        description: 'Event type'\r\n      },\r\n      event_raw_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event raw details',\r\n        default: null,\r\n        description: 'Event raw details'\r\n      },\r\n      event_converted_details: {\r\n        type: jsPsych.plugins.parameterType.STRING,\r\n        pretty_name: 'Event converted details',\r\n        default: null,\r\n        description: 'Event converted details'\r\n      }\r\n    }\r\n  }\r\n  plugin.trial = function (display_element, trial) {\r\n    var plugin_id_name = \"jspsych-survey-multi-choice-RAADS-14\";\r\n\r\n    var html = \"\";\r\n\r\n    // store response\r\n    var response = {\r\n      trial_events: []\r\n    };\r\n    var timestamp_onload = jsPsych.totalTime();\r\n\r\n    response.trial_events.push({\r\n      \"event_type\": trial.event_type,\r\n      \"event_raw_details\": trial.event_raw_details,\r\n      \"event_converted_details\": trial.event_converted_details,\r\n      \"timestamp\": jsPsych.totalTime(),\r\n      \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n    });\r\n\r\n    $('body').prepend(\r\n      `<header>\r\n        <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"navbar-header\">\r\n            <p class=\"navbar-text\">${plugin.info.name}</p>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </header>`);\r\n\r\n    // inject CSS for trial\r\n    html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n    html += \".jspsych-survey-multi-choice-question { display: flex; margin-top: .2em; margin-bottom: .2em; text-align: left; }\" +\r\n      \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n      \".jspsych-survey-multi-choice-option { line-height: 2; }\" +\r\n      \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  display: inline-block;  margin-left: 1em;  margin-right: 1em;  vertical-align: top;}\" +\r\n      \".jspsych-survey-multi-choice-content { border-bottom: 1px solid;}\" +\r\n      \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n      \".jspsych-survey-multi-choice-form { max-width: 1000px }\" +\r\n      \"ul {list-style: none}\" +\r\n      \".jspsych-btn { margin: 100px 0; }\" +\r\n      \".jspsych-content { margin-top: 130px;}\" +\r\n      \".jspsych-survey-multi-choice-preamble { text-align: left; border-top: 1px solid #fff;}\" +\r\n      \".jspsych-survey-multi-choice-information { display: flex; justify-content: space-between }\" +\r\n      \".jspsych-survey-multi-choice-information div { width: 40%; text-align: left; padding: 2rem 0; }\" +\r\n      \".jspsych-survey-multi-choice-information ul { display: flex; width: 50%; justify-content: space-around; padding-inline-start: 0; }\" +\r\n      \".jspsych-survey-multi-choice-information li { width: 100px; display: flex; align-items: center; }\" +\r\n      \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\";\r\n    \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\"\r\n    html += '</style>';\r\n\r\n    // show preamble text\r\n    if (trial.preamble !== null) {\r\n      html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n    }\r\n\r\n    // form element\r\n    html += '<div id=\"' + plugin_id_name + '\">'\r\n    html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n\r\n    // show preamble text\r\n    html +=\r\n      `<div class=\"jspsych-survey-multi-choice-content\">\r\n        <div id=\"jspsych-survey-multi-choice-information\" class=\"jspsych-survey-multi-choice-information\">\r\n          <div>Some life experiences and personality characteristics that may apply to you</div>\r\n          <ul>\r\n            <li>True now and when I was young</li>\r\n            <li>True only now</li>\r\n            <li>True only when I was younger than 16</li>\r\n            <li>Never true</li>\r\n          </ul>\r\n    </div>`\r\n\r\n    // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n    // so that the data are always associated with the same question regardless of order\r\n    var question_order = [];\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n      question_order.push(i);\r\n    }\r\n    if (trial.randomize_question_order) {\r\n      question_order = jsPsych.randomization.shuffle(question_order);\r\n    }\r\n\r\n    // add multiple-choice questions\r\n    for (var i = 0; i < trial.questions.length; i++) {\r\n\r\n      // get question based on question_order\r\n      var question = trial.questions[question_order[i]];\r\n      var question_id = question_order[i];\r\n\r\n      // create question container\r\n      var question_classes = ['jspsych-survey-multi-choice-question'];\r\n      if (question.horizontal) {\r\n        question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n      }\r\n\r\n      html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n\r\n      // add question text\r\n      html += '<div style=\"width: 50%;\"><p class=\"jspsych-survey-multi-choice-question survey-multi-choice\" style=\"padding-top: 3px; text-align: left;\">' + (i + 1) + '&ensp;&ensp;' + question.prompt\r\n      // question.required\r\n      html += '</p></div>';\r\n      html += '<div style=\"display: flex; width: 50%; justify-content: space-around;\">';\r\n\r\n      // create option radio buttons\r\n      for (var j = 0; j < question.options.length; j++) {\r\n        // add label and question text\r\n        var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n        var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n        var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n\r\n        var required_attr = question.required ? 'required' : '';\r\n\r\n        // add radio button container\r\n        html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n        html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight hidden\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n        html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\r\n        html += '</div>';\r\n      }\r\n\r\n      html += '</div></div>';\r\n    }\r\n\r\n    html += '</div>';\r\n\r\n    // add submit button\r\n    html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\r\n\r\n    html += '</form>';\r\n\r\n    html +=\r\n      `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n          <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n            <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n              <header class=\"modal__header\">\r\n                <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                  Warning!\r\n                </h2>\r\n                <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n              </header>\r\n              <main class=\"modal__content\" id=\"modal-1-content\">\r\n                <p>\r\n                ${popup_text_web_forms}\r\n                </p>\r\n              </main>\r\n              <footer class=\"modal__footer\">\r\n                <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n              </footer>\r\n            </div>\r\n          </div>\r\n      </div>`;\r\n\r\n\r\n    // render\r\n    display_element.innerHTML = html;\r\n\r\n    // function to handle key press responses\r\n    var after_response = function (info) {\r\n\r\n      if (info.key_release === undefined) {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key press\",\r\n          \"event_raw_details\": info.key,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n\r\n        if(info.el) {\r\n          if(info.el.dataset.timeStamp) {\r\n            trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n          }\r\n          if(info.el.dataset.questionNumber) {\r\n            response.trial_events.push({\r\n              \"event_type\": \"answer displayed\",\r\n              \"event_raw_details\": info.el.dataset.questionNumber,\r\n              \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n          if(info.el.type === 'submit') {\r\n            response.trial_events.push({\r\n              \"event_type\": \"button clicked\",\r\n              \"event_raw_details\": 'Submit',\r\n              \"event_converted_details\": '\"Submit\" selected',\r\n              \"timestamp\": jsPsych.totalTime(),\r\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        response.trial_events.push({\r\n          \"event_type\": \"key release\",\r\n          \"event_raw_details\": info.key_release,\r\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n          \"timestamp\": jsPsych.totalTime(),\r\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n        });\r\n      }\r\n    }\r\n\r\n    $('.jspsych-survey-highlight').click(function () {\r\n      $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n      $(this).addClass('bg-primary');\r\n    })\r\n\r\n    document.querySelector('form').addEventListener('submit', function (event) {\r\n      event.preventDefault();\r\n      // measure response time\r\n      var endTime = performance.now();\r\n      var response_time = endTime - startTime;\r\n\r\n      // create object to hold responses\r\n      var question_data = {};\r\n      var timestamp_data = {};\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n\r\n        var id = i + 1;\r\n        if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n          var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n          $(match).find('.jspsych-survey-multi-choice-question').removeClass('survey-error');\r\n        } else {\r\n          $(match).find('.jspsych-survey-multi-choice-question').addClass('survey-error');\r\n          var val = \"\";\r\n\r\n        }\r\n        var obje = {};\r\n        var name = id;\r\n        if (match.attributes['data-name'].value !== '') {\r\n          name = match.attributes['data-name'].value;\r\n        }\r\n        obje[name] = val;\r\n        timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n        Object.assign(question_data, obje);\r\n      }\r\n\r\n      if ($(\".survey-error\").length < 1) {\r\n        // kill keyboard listeners\r\n        if (typeof keyboardListener !== 'undefined') {\r\n          jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n          jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n        }\r\n\r\n        // save data\r\n        var trial_data = {\r\n          \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n          \"responses\": JSON.stringify(question_data),\r\n          \"timestamp\": JSON.stringify(timestamp_data),\r\n          \"question_order\": JSON.stringify(question_order),\r\n          \"events\": JSON.stringify(response.trial_events)\r\n        };\r\n\r\n        display_element.innerHTML = '';\r\n        $('.navbar').remove();\r\n\r\n        // next trial\r\n        jsPsych.finishTrial(trial_data);\r\n      } else {\r\n        MicroModal.show('modal-1');\r\n      }\r\n\r\n    });\r\n\r\n    var startTime = performance.now();\r\n\r\n    // start the response listener\r\n    var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n    var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n      callback_function: after_response,\r\n      valid_responses: jsPsych.ALL_KEYS,\r\n      rt_method: 'performance',\r\n      persist: true,\r\n      allow_held_key: false\r\n    });\r\n\r\n  };\r\n\r\n  return plugin;\r\n})();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-RAADS.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SDS.js":
/*!*******************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SDS.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['SDS'] = (function () {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'Sheehan Disability Scale',\n      stage_name: 'SDS',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default: 'Continue',\n          description: 'Label of the button.'\n        },\n        time_stamp: {\n          type: jsPsych.plugins.parameterType.OBJECT,\n          pretty_name: 'Timestamp',\n          default: {},\n          description: 'Object for collecting timestamp'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n      }\n    }\n    plugin.trial = function (display_element, trial) {\n      var plugin_id_name = \"jspsych-survey-multi-choice-SDS\";\n  \n      var html = \"\";\n      var timestamp_onload = jsPsych.totalTime();\n  \n      // store response\n      var response = {\n        trial_events: []\n      };\n  \n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n  \n      $('body').prepend(\n        `<header>\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n            <div class=\"container-fluid\">\n              <div class=\"navbar-header\">\n              <p class=\"navbar-text\">${plugin.info.name}</p>\n              </div>\n            </div>\n          </nav>\n        </header>`);\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { text-align: center; outline: 1px solid #fff; padding: 2rem; margin: 2rem 0; }\" +\n        \".jspsych-content-wrapper { width: 1000px}\" +\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n        \".jspsych-survey-multi-choice-preamble { text-align: left; padding: 3rem 0; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid; text-align: center; padding: 0 1rem; }\" +\n        \".jspsych-survey-multi-choice-option  { position: relative; }\" +\n        \".jspsych-survey-multi-choice-option:first-of-type::after  { content: '◀'; position: absolute; right: -14px; top: 11px; }\" +\n        \".jspsych-survey-multi-choice-option:last-of-type::after  { content: '▶'; position: absolute; left: -14px; top: 11px; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option:first-child  {background-color: red;}\" +\n        \".jspsych-content { width: 1000px}\" +\n        \".jspsych-btn { margin: 70px 0; }\" +\n        \".question-title-heading { text-transform: uppercase; font-weight: bold; }\" +\n        \".jspsych-content { margin-top: 130px;}\" +\n        \".square { display: flex; justify-content: space-around; }\" +\n        \".square span { width: 85px; height: 60px; border: 1px solid #fff; }\" +\n        \"ul {list-style: none}\" +\n        \".form-radio { top: 3px; }\" +\n        \"select { background-color: #000; width: 100px; margin: 0 1rem;}\" +\n        \".circle-line { width: 90%; position: absolute; border-bottom: 1px solid; z-index: -1; }\" +\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-left: 1em;}\" +\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; border: 2px solid #fff; z-index: 1; background-color: #000; box-shadow: 0 0 2px 0px white inset, 0 0 2px 0px white; justify-content: center; display: flex; align-items: center; }\" +\n        \".bg-primary { border: 2px solid #428bca; box-shadow: 0 0 2px 0px #428bca inset, 0 0 2px 0px #428bca; background-color: #428bca; }\" +\n        \"p { margin: 0 0 0px;}\"\n      html += '</style>';\n  \n  \n      // form element\n      html += '<div id=\"' + plugin_id_name + '\">';\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\n\n      // show preamble text\n      if (trial.preamble !== null) {\n        html += '<div class=\"jspsych-survey-multi-choice-content\"><div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\n      }\n   \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for (var i = 0; i < trial.questions.length; i++) {\n        question_order.push(i);\n      }\n      if (trial.randomize_question_order) {\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n  \n      // add multiple-choice questions\n      for (var i = 0; i < 3; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n        var question_name = question.name;\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question_name + '\">';\n  \n        // add question text\n        html += '<div>' + question.prompt\n        // question.required\n        html += '</div>';\n        html += `\n          <div>\n            <ul style=\"display: flex; position: relative; justify-content: center; padding-inline-start: 0;\">\n              <li style=\"position: absolute; top: 1rem; left: 0;\">\n                Not at all\n              </li>\n              <li style=\"position: absolute; top: 1rem; left: 12rem;\">\n                Mildly\n                <div class=\"square\">\n                  <span></span>\n                  <span></span>\n                </div>\n              </li>\n              <li style=\"position: absolute; top: 1rem; left: 37rem;\">\n                Moderately\n                <div class=\"square\">\n                  <span></span>\n                  <span></span>\n                </div>\n              </li>\n              <li style=\"position: absolute; top: 1rem; right: 12rem;\">\n                Markedly\n                <div class=\"square\">\n                  <span></span>\n                  <span></span>\n                </div>\n              </li>\n              <li style=\"position: absolute; top: 1rem; right: 0;\">\n                Extremely\n              </li>\n            </ul>\n           \n          </div>\n        `;\n        html += '<div style=\"display: flex; justify-content: space-around; align-items: center; position: relative; padding-top: 6rem; \">';\n        html += '<span class=\"circle-line\"></span>';\n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<input type=\"radio\" name=\"' + input_name + '\" id=\"' + input_id + '\" class=\"form-radio hidden\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '<label class=\"jspsych-survey-multi-choice-text jspsych-survey-highlight\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '</div>';\n        }\n  \n        html += '</div>';\n        if(i === 0) {\n          html += '<div style=\"display: flex; padding: 2rem 0 2rem 2rem;\">' +\n          '<div class=\"input-not-working\"><input type=\"radio\" data-time-stamp=\"Q1S1\" data-question-number=\"Q1S1\" name=\"\" class=\"form-radio\" value=\"Checkbox question.: I have not worked/studied at all during the past week...\"></input></div>' +\n          '<div style=\"text-align: left; padding-left: 2rem;\"><p>I have not worked / studied at all during the past week for reasons unrelated to the disorder.</p>' +\n          '<p>* Work includes paid, unpaid volunteer work or training</p></div></div>';\n        }\n        html += '</div>';\n        \n      }\n\n\n      // add multiple-choice questions\n      for (var i = 3; i < trial.questions.length; i++) {\n\n          // get question based on question_order\n          var question = trial.questions[question_order[i]];\n          var question_id = question_order[i];\n          var question_name = question.name;\n\n          // create question container\n          var question_classes = ['jspsych-survey-multi-choice-question-input'];\n          if (question.horizontal) {\n            question_classes.push('jspsych-survey-multi-choice-horizontal');\n          }\n\n          html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question_name + '\">';\n\n          // add question text\n          html += '<div style=\"text-align: left;\"><h3 class=\"question-title\">' + question.title + '</h3><p style=\"position: relative;\">' + question.prompt ;\n\n          // create option radio buttons\n          html += '<span style=\"position: absolute; right: 0;\">';\n          html += '<label for=\"' + question_name + '\">Select answer:</label>';\n          html += '<select id=\"' + question_name + '\" class=\"select-days-' + i + '\"><option value=\"None\">-</option>';\n          \n          for (var j = 0; j < question.options.length; j++) {\n            // add label and question text\n            var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n            var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n            var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n            html += '<option type=\"select\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" name=\"' + input_name + '\" id=\"' + input_id + '\" value=\"' + question.options[j] + '\" ' + required_attr + '>' + question.options[j] + '</option>';\n          }\n          html += '</select>';\n          html += '</p></span>';\n          html += '</div></div>';\n      }\n\n      \n      html += '</div>';\n\n      html += '<p style=\"margin-top: 5rem; font-style: italic;\">© Copryright 1983 David V. Sheehan. All Rights Reserved.</p>';\n\n      // add submit button\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\n      html += '</form>';\n  \n      html +=\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\n                  <header class=\"modal__header\">\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\n                      Warning!\n                    </h2>\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\n                  </header>\n                  <main class=\"modal__content\" id=\"modal-1-content\">\n                    <p>\n                    ${popup_text_web_forms}\n                    </p>\n                  </main>\n                  <footer class=\"modal__footer\">\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\n                  </footer>\n                </div>\n              </div>\n          </div>`;\n  \n      // render\n      display_element.innerHTML = html;\n  \n      // function to handle key press responses\n      var after_response = function (info) {\n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n  \n      $('.jspsych-survey-highlight').click(function () {\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\n        $(this).addClass('bg-primary');\n        $(this).next('input').prop(\"checked\", true);\n        $(this).closest('input').click();\n      })\n\n      $(\"select\").change(function() {\n        var questionNumber = $(this)[0].selectedOptions[0].getAttribute('data-question-number');\n        var questionTimestamp = $(this)[0].selectedOptions[0].getAttribute('data-time-stamp');\n        trial.time_stamp[questionTimestamp] = jsPsych.totalTime() - timestamp_onload;\n        response.trial_events.push({\n          \"event_type\": \"answer displayed\",\n          \"event_raw_details\": questionNumber,\n          \"event_converted_details\": questionNumber + ' answer displayed',\n          \"timestamp\": jsPsych.totalTime(),\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n        });\n      });\n  \n      document.querySelector('form').addEventListener('submit', function (event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n  \n        // create object to hold responses\n        var question_data = {};\n        var timestamp_data = {};\n        for (var i = 0; i < 3; i++) {\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\n          var id = (i + 1);\n          var val_not_working;\n          \n          if (match.querySelector(\".jspsych-survey-multi-choice-option input[type=radio]:checked\") !== null) {\n            var val = match.querySelector(\".jspsych-survey-multi-choice-option input[type=radio]:checked\").value;\n            $(match).find('.question-title').removeClass('survey-error-after');\n          } else {\n            var val = \"\";\n            $(match).find('.question-title').addClass('survey-error-after');\n          }\n\n          var obje = {};\n          var name = id;\n      \n          if (match.attributes['data-name'].value !== '') {\n            name = match.attributes['data-name'].value;\n          }\n          obje[name] = val;\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\n          if(i === 0) {\n            if (match.querySelector(\".input-not-working input[type=radio]:checked\") !== null) {\n              val_not_working = {\n                'Not worked/studied':'checked'\n              }\n              timestamp_data['Not worked/studied'] = trial.time_stamp['Q1S1'];\n              $('#jspsych-survey-multi-choice-0').find('.question-title').removeClass('survey-error-after');\n              var active_item = $('#jspsych-survey-multi-choice-0').find('.bg-primary');\n              $(active_item).removeClass('bg-primary');\n              obje[name] = 'NA';\n              timestamp_data[name] = 'NA'\n            } else {\n              val_not_working = {\n                'Not worked/studied':'not checked'\n              }\n              timestamp_data['Not worked/studied'] = 'NA';\n            }\n          }\n          Object.assign(question_data, obje, val_not_working);\n        }\n        \n        for (var i = 3; i < trial.questions.length; i++) {\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\n          var id = (i + 1);\n          if (match.querySelector(\"option:checked\").value !== 'None') {\n            var val = match.querySelector(\"option:checked\").value;\n            $(match).find('.question-title').removeClass('survey-error-after');\n\n          } else {\n            var val = \"\";\n            $(match).find('.question-title').addClass('survey-error-after');\n          }\n\n          var obje = {};\n          var name = id;\n      \n          if (match.attributes['data-name'].value !== '') {\n            name = match.attributes['data-name'].value;\n          }\n          obje[name] = val;\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\n          Object.assign(question_data, obje);\n        }\n\n        if ($(\".survey-error-after\").length < 1) {\n          // kill keyboard listeners\n          if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n          }\n  \n          // save data\n          var trial_data = {\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"timestamp\": JSON.stringify(timestamp_data),\n            \"question_order\": JSON.stringify(question_order),\n            \"events\": JSON.stringify(response.trial_events)\n          };\n  \n          display_element.innerHTML = '';\n          $('.navbar').remove();\n  \n          // next trial\n          jsPsych.finishTrial(trial_data);\n        } else {\n          MicroModal.show('modal-1');\n        }\n  \n      });\n  \n      var startTime = performance.now();\n  \n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SDS.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SMOKING-STATUS.js":
/*!******************************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SMOKING-STATUS.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['Smoking-Status'] = (function () {\n    var plugin = {};\n  \n    plugin.info = {\n      name: 'Smoking Status',\n      stage_name: 'Smoking Status',\n      description: '',\n      parameters: {\n        questions: {\n          type: jsPsych.plugins.parameterType.COMPLEX,\n          array: true,\n          pretty_name: 'Questions',\n          nested: {\n            prompt: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Prompt',\n              default: undefined,\n              description: 'The strings that will be associated with a group of options.'\n            },\n            options: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Options',\n              array: true,\n              default: undefined,\n              description: 'Displays options for an individual question.'\n            },\n            required: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Required',\n              default: false,\n              description: 'Subject will be required to pick an option for each question.'\n            },\n            horizontal: {\n              type: jsPsych.plugins.parameterType.BOOL,\n              pretty_name: 'Horizontal',\n              default: false,\n              description: 'If true, then questions are centered and options are displayed horizontally.'\n            },\n            name: {\n              type: jsPsych.plugins.parameterType.STRING,\n              pretty_name: 'Question Name',\n              default: '',\n              description: 'Controls the name of data values associated with this question'\n            }\n          }\n        },\n        randomize_question_order: {\n          type: jsPsych.plugins.parameterType.BOOL,\n          pretty_name: 'Randomize Question Order',\n          default: false,\n          description: 'If true, the order of the questions will be randomized'\n        },\n        preamble: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Preamble',\n          default: null,\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\n        },\n        button_label: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Button label',\n          default: 'Continue',\n          description: 'Label of the button.'\n        },\n        time_stamp: {\n          type: jsPsych.plugins.parameterType.OBJECT,\n          pretty_name: 'Timestamp',\n          default: {},\n          description: 'Object for collecting timestamp'\n        },\n        event_type: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event type',\n          default: null,\n          description: 'Event type'\n        },\n        event_raw_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event raw details',\n          default: null,\n          description: 'Event raw details'\n        },\n        event_converted_details: {\n          type: jsPsych.plugins.parameterType.STRING,\n          pretty_name: 'Event converted details',\n          default: null,\n          description: 'Event converted details'\n        }\n      }\n    }\n    plugin.trial = function (display_element, trial) {\n      var plugin_id_name = \"jspsych-survey-multi-choice-smoking-status\";\n  \n      var html = \"\";\n      var timestamp_onload = jsPsych.totalTime();\n  \n      // store response\n      var response = {\n        trial_events: []\n      };\n  \n      response.trial_events.push({\n        \"event_type\": trial.event_type,\n        \"event_raw_details\": trial.event_raw_details,\n        \"event_converted_details\": trial.event_converted_details,\n        \"timestamp\": jsPsych.totalTime(),\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n      });\n  \n      $('body').prepend(\n        `<header>\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n            <div class=\"container-fluid\">\n              <div class=\"navbar-header\">\n              <p class=\"navbar-text\">${plugin.info.name}</p>\n              </div>\n            </div>\n          </nav>\n        </header>`);\n  \n      // inject CSS for trial\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\n      html += \".jspsych-survey-multi-choice-question { text-align: left; }\" +\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\n        \".jspsych-survey-multi-choice-text { padding-left: 2rem; }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\n        \".jspsych-survey-multi-choice-option {  }\" +\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid; text-align: center; padding: 0 1rem;}\" +\n        \".jspsych-content { width: 1000px}\" +\n        \".jspsych-btn { margin: 100px 0; }\" +\n        \".jspsych-content { margin-top: 130px;}\" +\n        \"ul {list-style: none}\" +\n        \".form-radio { top: 3px; }\" +\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-left: 1em;}\" +\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\n        \"p { margin: 0 0 0px;}\"\n      html += '</style>';\n  \n  \n      // form element\n      html += '<div id=\"' + plugin_id_name + '\">';\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\n\n      // show preamble text\n      if (trial.preamble !== null) {\n        html += '<div class=\"jspsych-survey-multi-choice-content\"><div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\n      }\n   \n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\n      // so that the data are always associated with the same question regardless of order\n      var question_order = [];\n      for (var i = 0; i < trial.questions.length; i++) {\n        question_order.push(i);\n      }\n      if (trial.randomize_question_order) {\n        question_order = jsPsych.randomization.shuffle(question_order);\n      }\n  \n      // add multiple-choice questions\n      for (var i = 0; i < trial.questions.length; i++) {\n  \n        // get question based on question_order\n        var question = trial.questions[question_order[i]];\n        var question_id = question_order[i];\n  \n        // create question container\n        var question_classes = ['jspsych-survey-multi-choice-question'];\n        if (question.horizontal) {\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\n        }\n  \n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + (i + 1) + '\">';\n  \n        // add question text\n        html += '<div><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\"><span style=\" padding-right: 3rem;\">' + (i + 1) + '.</span>' + question.prompt\n        // question.required\n        html += '</p></div>';\n        html += '<div style=\"padding: 3rem;\">';\n  \n        // create option radio buttons\n        for (var j = 0; j < question.options.length; j++) {\n          // add label and question text\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\n  \n          var required_attr = question.required ? 'required' : '';\n  \n          // add radio button container\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\n          html += '<input type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + question.options[j] + '\" ' + required_attr + '></input>';\n          html += '<label class=\"jspsych-survey-multi-choice-text\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\n          html += '</div>';\n        }\n  \n        html += '</div></div>';\n      }\n\n\n  \n      // add submit button\n      html += '<p><input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input></p>';\n      html += '</form>';\n      html += '</div>';\n  \n      html +=\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\n                  <header class=\"modal__header\">\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\n                      Warning!\n                    </h2>\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\n                  </header>\n                  <main class=\"modal__content\" id=\"modal-1-content\">\n                    <p>\n                    ${popup_text_web_forms}\n                    </p>\n                  </main>\n                  <footer class=\"modal__footer\">\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\n                  </footer>\n                </div>\n              </div>\n          </div>`;\n  \n      // render\n      display_element.innerHTML = html;\n  \n      // function to handle key press responses\n      var after_response = function (info) {\n  \n        if (info.key_release === undefined) {\n          response.trial_events.push({\n            \"event_type\": \"key press\",\n            \"event_raw_details\": info.key,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n\n          if(info.el) {\n            if(info.el.dataset.timeStamp) {\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\n            }\n            if(info.el.dataset.questionNumber) {\n              response.trial_events.push({\n                \"event_type\": \"answer displayed\",\n                \"event_raw_details\": info.el.dataset.questionNumber,\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n            if(info.el.type === 'submit') {\n              response.trial_events.push({\n                \"event_type\": \"button clicked\",\n                \"event_raw_details\": 'Submit',\n                \"event_converted_details\": '\"Submit\" selected',\n                \"timestamp\": jsPsych.totalTime(),\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n              });\n            }\n          }\n        } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n        }\n      }\n  \n      $('.jspsych-survey-highlight').click(function () {\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\n        $(this).addClass('bg-primary');\n        $(this).next('input').prop(\"checked\", true);\n        $(this).closest('input').click();\n      })\n  \n      document.querySelector('form').addEventListener('submit', function (event) {\n        event.preventDefault();\n        // measure response time\n        var endTime = performance.now();\n        var response_time = endTime - startTime;\n  \n        // create object to hold responses\n        var question_data = {};\n        var timestamp_data = {};\n        for (var i = 0; i < trial.questions.length; i++) {\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\n          var id = (i + 1);\n          \n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\n\n            if(i === 1) {\n                if(val === 'Not at all') {\n                    isSmokingStatus = false;\n                } else {\n                    isSmokingStatus = true;\n                }\n            }\n          } else {\n            var val = \"\";\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\n          }\n\n          var obje = {};\n          var name = id;\n      \n          if (match.attributes['data-name'].value !== '') {\n            name = match.attributes['data-name'].value;\n          }\n          obje[name] = val;\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\n          Object.assign(question_data, obje);\n        }\n  \n        if ($(\".survey-error-after\").length < 1) {\n          // kill keyboard listeners\n          if (typeof keyboardListener !== 'undefined') {\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\n          }\n  \n          // save data\n          var trial_data = {\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\n            \"responses\": JSON.stringify(question_data),\n            \"timestamp\": JSON.stringify(timestamp_data),\n            \"question_order\": JSON.stringify(question_order),\n            \"events\": JSON.stringify(response.trial_events)\n          };\n  \n          display_element.innerHTML = '';\n          $('.navbar').remove();\n  \n          // next trial\n          jsPsych.finishTrial(trial_data);\n        } else {\n          MicroModal.show('modal-1');\n        }\n  \n      });\n  \n      var startTime = performance.now();\n  \n      // start the response listener\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\n        callback_function: after_response,\n        valid_responses: jsPsych.ALL_KEYS,\n        rt_method: 'performance',\n        persist: true,\n        allow_held_key: false\n      });\n    };\n  \n    return plugin;\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SMOKING-STATUS.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-YIAT.js":
/*!********************************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-YIAT.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['YIAT'] = (function () {\r\n    var plugin = {};\r\n  \r\n    plugin.info = {\r\n      name: 'YIAT',\r\n      stage_name: 'YIAT',\r\n      description: '',\r\n      parameters: {\r\n        questions: {\r\n          type: jsPsych.plugins.parameterType.COMPLEX,\r\n          array: true,\r\n          pretty_name: 'Questions',\r\n          nested: {\r\n            prompt: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Prompt',\r\n              default: undefined,\r\n              description: 'The strings that will be associated with a group of options.'\r\n            },\r\n            options: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Options',\r\n              array: true,\r\n              default: undefined,\r\n              description: 'Displays options for an individual question.'\r\n            },\r\n            required: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Required',\r\n              default: false,\r\n              description: 'Subject will be required to pick an option for each question.'\r\n            },\r\n            horizontal: {\r\n              type: jsPsych.plugins.parameterType.BOOL,\r\n              pretty_name: 'Horizontal',\r\n              default: false,\r\n              description: 'If true, then questions are centered and options are displayed horizontally.'\r\n            },\r\n            name: {\r\n              type: jsPsych.plugins.parameterType.STRING,\r\n              pretty_name: 'Question Name',\r\n              default: '',\r\n              description: 'Controls the name of data values associated with this question'\r\n            }\r\n          }\r\n        },\r\n        randomize_question_order: {\r\n          type: jsPsych.plugins.parameterType.BOOL,\r\n          pretty_name: 'Randomize Question Order',\r\n          default: false,\r\n          description: 'If true, the order of the questions will be randomized'\r\n        },\r\n        preamble: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Preamble',\r\n          default: null,\r\n          description: 'HTML formatted string to display at the top of the page above all the questions.'\r\n        },\r\n        button_label: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Button label',\r\n          default: 'Continue',\r\n          description: 'Label of the button.'\r\n        },\r\n        time_stamp: {\r\n          type: jsPsych.plugins.parameterType.OBJECT,\r\n          pretty_name: 'Timestamp',\r\n          default: {},\r\n          description: 'Object for collecting timestamp'\r\n        },\r\n        event_type: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event type',\r\n          default: null,\r\n          description: 'Event type'\r\n        },\r\n        event_raw_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event raw details',\r\n          default: null,\r\n          description: 'Event raw details'\r\n        },\r\n        event_converted_details: {\r\n          type: jsPsych.plugins.parameterType.STRING,\r\n          pretty_name: 'Event converted details',\r\n          default: null,\r\n          description: 'Event converted details'\r\n        }\r\n      }\r\n    }\r\n    plugin.trial = function (display_element, trial) {\r\n      var plugin_id_name = \"jspsych-survey-multi-choice-YIAT\";\r\n  \r\n      var html = \"\";\r\n  \r\n      // store response\r\n      var response = {\r\n        trial_events: []\r\n      };\r\n      var timestamp_onload = jsPsych.totalTime();\r\n  \r\n      response.trial_events.push({\r\n        \"event_type\": trial.event_type,\r\n        \"event_raw_details\": trial.event_raw_details,\r\n        \"event_converted_details\": trial.event_converted_details,\r\n        \"timestamp\": jsPsych.totalTime(),\r\n        \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n      });\r\n  \r\n      $('body').prepend(\r\n        `<header>\r\n          <nav class=\"navbar navbar-inverse navbar-fixed-top\">\r\n            <div class=\"container-fluid\">\r\n              <div class=\"navbar-header\">\r\n              <p class=\"navbar-text\">\r\n                  <b>${plugin.info.name}</b>\r\n              </p>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </header>`);\r\n  \r\n      // inject CSS for trial\r\n      html += '<style id=\"jspsych-survey-multi-choice-css\">';\r\n      html += \".jspsych-survey-multi-choice-question { display: flex; text-align: left; border-bottom: 1px solid }\" +\r\n        \".jspsych-survey-multi-choice-text span.required {color: darkred;}\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-text {  text-align: center;}\" +\r\n        \".jspsych-survey-multi-choice-option { display: flex; justify-content: center; align-items: center; line-height: 2; padding: 1rem 0; }\" +\r\n        \".jspsych-survey-multi-choice-horizontal .jspsych-survey-multi-choice-option {  width: 100%; border-left: 1px solid;}\" +\r\n        \".jspsych-survey-highlight { cursor: pointer; width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \".form-radio { top: 0; }\" +\r\n        \".jspsych-survey-multi-choice-form { max-width: 1000px; }\" +\r\n        \".jspsych-btn { margin: 100px 0; }\" +\r\n        \".jspsych-content { margin-top: 130px;}\" +\r\n        \"ul {list-style: none}\" +\r\n        \".jspsych-survey-multi-choice { margin-top: 10rem; }\" +\r\n        \".jspsych-survey-multi-choice-number { display: flex; height: 100%; width: 30px; text-align: center; justify-content: center; }\" +\r\n        \".jspsych-survey-multi-choice-preamble { text-align: left; max-width: 1000px; padding-bottom: 1rem; }\" +\r\n        \".jspsych-survey-multi-choice-instructions { display: flex; justify-content: space-between; border-bottom: 2px solid; font-weight: bold; }\" +\r\n        \".jspsych-survey-multi-choice-instructions ul { display: flex; justify-content: space-between; padding-inline-start: 0; margin-bottom: 0; width: 60%; }\" +\r\n        \".jspsych-survey-multi-choice-instructions li { display: flex; justify-content: center; border-left: 1px solid; width: 164px; align-items: center; }\" +\r\n        \"label.jspsych-survey-multi-choice-text input[type='radio'] {margin-right: 1em;}\" +\r\n        \".jspsych-survey-highlight { width: 50px; height: 50px; border-radius: 50%; display: flex; justify-content: center; align-items: center; }\" +\r\n        \"p { margin: 0 0 0px; }\"\r\n      html += '</style>';\r\n  \r\n      // show preamble text\r\n      if (trial.preamble !== null) {\r\n        html += '<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-preamble\">' + trial.preamble + '</div>';\r\n      }\r\n  \r\n  \r\n      // form element\r\n      html += '<div id=\"' + plugin_id_name + '\">';\r\n      html += '<form id=\"jspsych-survey-multi-choice-form\" class=\"jspsych-survey-multi-choice-form\">';\r\n  \r\n  \r\n      html +=\r\n        `<div id=\"jspsych-survey-multi-choice-preamble\" class=\"jspsych-survey-multi-choice-instructions\">\r\n            <div style=\"width: 40%; text-align: left; border-right: 1px solid #fff; \">\r\n            <p><b>Question</b></p>\r\n            </div>\r\n            <ul>\r\n              <li><div>Never</div></li>\r\n              <li><div>Rarely</div></li>\r\n              <li><div>Sometimes</div></li>\r\n              <li><div>Often</div></li>\r\n              <li><div>Very often</div></li>\r\n            </ul>\r\n        </div>`\r\n  \r\n  \r\n      // generate question order. this is randomized here as opposed to randomizing the order of trial.questions\r\n      // so that the data are always associated with the same question regardless of order\r\n      var question_order = [];\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n        question_order.push(i);\r\n      }\r\n      if (trial.randomize_question_order) {\r\n        question_order = jsPsych.randomization.shuffle(question_order);\r\n      }\r\n  \r\n      // add multiple-choice questions\r\n      for (var i = 0; i < trial.questions.length; i++) {\r\n  \r\n        // get question based on question_order\r\n        var question = trial.questions[question_order[i]];\r\n        var question_id = question_order[i];\r\n  \r\n        // create question container\r\n        var question_classes = ['jspsych-survey-multi-choice-question'];\r\n        if (question.horizontal) {\r\n          question_classes.push('jspsych-survey-multi-choice-horizontal');\r\n        }\r\n  \r\n        html += '<div id=\"jspsych-survey-multi-choice-' + question_id + '\" class=\"' + question_classes.join(' ') + '\"  data-name=\"' + question.name + '\">';\r\n  \r\n        // add question text\r\n        html += '<div style=\"display: flex; align-items: center; width: 40%;\"><span class=\"jspsych-survey-multi-choice-number\">' + (i + 1) + '.</span><p class=\"jspsych-survey-multi-choice-text survey-multi-choice jspsych-survey-multi-choice-question-text\" style=\"text-align: left; padding: 0 10px; width: 100%;\">' + question.prompt\r\n        // question.required\r\n        html += '</p></div>';\r\n        html += '<div style=\"display: flex; width: 60%; justify-content: space-around; border-left: 1px solid;\">';\r\n  \r\n        // create option radio buttons\r\n        for (var j = 0; j < question.options.length; j++) {\r\n          // add label and question text\r\n          var option_id_name = \"jspsych-survey-multi-choice-option-\" + question_id + \"-\" + j;\r\n          var input_name = 'jspsych-survey-multi-choice-response-' + question_id;\r\n          var input_id = 'jspsych-survey-multi-choice-response-' + question_id + '-' + j;\r\n  \r\n          var required_attr = question.required ? 'required' : '';\r\n  \r\n          // add radio button container\r\n          html += '<div id=\"' + option_id_name + '\" class=\"jspsych-survey-multi-choice-option\">';\r\n          html += '<label hidden class=\"jspsych-survey-multi-choice-text\" for=\"' + input_id + '\">' + question.options[j] + '</label>';\r\n          html += '<input hidden type=\"radio\" name=\"' + input_name + '\" data-time-stamp=\"Q' + (i+1) + '\" data-question-number=\"Q' + (i+1) +'A' + (j+1) +'\" id=\"' + input_id + '\" class=\"form-radio\" value=\"' + trial.title[j] + '\" ' + required_attr + '></input>';\r\n          html += '</div>';\r\n        }\r\n  \r\n        html += '</div></div>';\r\n      }\r\n  \r\n      // add submit button\r\n      html += '<input type=\"submit\" id=\"' + plugin_id_name + '-next\" class=\"' + plugin_id_name + ' jspsych-btn\"' + (trial.button_label ? ' value=\"' + trial.button_label + '\"' : '') + '></input>';\r\n  \r\n  \r\n      html += '</form>';\r\n  \r\n      html +=\r\n        `<div class=\"modal micromodal-slide\" id=\"modal-1\" aria-hidden=\"true\">\r\n              <div class=\"modal__overlay\" tabindex=\"-1\" data-micromodal-close>\r\n                <div class=\"modal__container\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-1-title\">\r\n                  <header class=\"modal__header\">\r\n                    <h2 class=\"modal__title\" id=\"modal-1-title\">\r\n                      Warning!\r\n                    </h2>\r\n                    <button class=\"modal__close\" aria-label=\"Close modal\" data-micromodal-close></button>\r\n                  </header>\r\n                  <main class=\"modal__content\" id=\"modal-1-content\">\r\n                    <p>${popup_text_web_forms}</p>\r\n                  </main>\r\n                  <footer class=\"modal__footer\">\r\n                    <button class=\"modal__btn\" data-micromodal-close aria-label=\"Close this dialog window\">Close</button>\r\n                  </footer>\r\n                </div>\r\n              </div>\r\n          </div>`;\r\n  \r\n      // render\r\n      display_element.innerHTML = html;\r\n  \r\n      // function to handle key press responses\r\n      var after_response = function (info) {\r\n  \r\n        if (info.key_release === undefined) {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key press\",\r\n            \"event_raw_details\": info.key,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n\r\n          if(info.el) {\r\n            if(info.el.dataset.timeStamp) {\r\n              trial.time_stamp[info.el.dataset.timeStamp] = jsPsych.totalTime() - timestamp_onload;\r\n            }\r\n            if(info.el.dataset.questionNumber) {\r\n              response.trial_events.push({\r\n                \"event_type\": \"answer displayed\",\r\n                \"event_raw_details\": info.el.dataset.questionNumber,\r\n                \"event_converted_details\": info.el.dataset.questionNumber + ' answer displayed',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n            if(info.el.type === 'submit') {\r\n              response.trial_events.push({\r\n                \"event_type\": \"button clicked\",\r\n                \"event_raw_details\": 'Submit',\r\n                \"event_converted_details\": '\"Submit\" selected',\r\n                \"timestamp\": jsPsych.totalTime(),\r\n                \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          response.trial_events.push({\r\n            \"event_type\": \"key release\",\r\n            \"event_raw_details\": info.key_release,\r\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\r\n            \"timestamp\": jsPsych.totalTime(),\r\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\r\n          });\r\n        }\r\n      }\r\n  \r\n      $('.jspsych-survey-highlight').click(function () {\r\n        $(this).next('input').prop(\"checked\", true);\r\n        $(this).parent().parent().find('.jspsych-survey-highlight').removeClass('bg-primary');\r\n        $(this).addClass('bg-primary');\r\n        $(this).closest('input').click();\r\n      })\r\n  \r\n      document.querySelector('form').addEventListener('submit', function (event) {\r\n        event.preventDefault();\r\n        // measure response time\r\n        var endTime = performance.now();\r\n        var response_time = endTime - startTime;\r\n        // create object to hold responses\r\n        var question_data = {};\r\n        var timestamp_data = {};\r\n        for (var i = 0; i < trial.questions.length; i++) {\r\n          var match = display_element.querySelector('#jspsych-survey-multi-choice-' + i);\r\n          var id = i + 1;\r\n          if (match.querySelector(\"input[type=radio]:checked\") !== null) {\r\n            var val = match.querySelector(\"input[type=radio]:checked\").value;\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').removeClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').removeClass('survey-error-text');\r\n          } else {\r\n            var val = \"\";\r\n            $(match).find('.jspsych-survey-multi-choice-question-text').addClass('survey-error-after');\r\n            $(match).find('.jspsych-survey-multi-choice-number').addClass('survey-error-text');\r\n          }\r\n          var obje = {};\r\n          var name = id;\r\n          if (match.attributes['data-name'].value !== '') {\r\n            name = match.attributes['data-name'].value;\r\n          }\r\n          obje[name] = val;\r\n          timestamp_data[name] = trial.time_stamp['Q' + (i+1)];\r\n          Object.assign(question_data, obje);\r\n        }\r\n  \r\n        if ($(\".survey-error-after\").length < 1) {\r\n          // kill keyboard listeners\r\n          if (typeof keyboardListener !== 'undefined') {\r\n            jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\r\n            jsPsych.pluginAPI.cancelClickResponse(clickListener);\r\n          }\r\n  \r\n          // save data\r\n          var trial_data = {\r\n            \"stage_name\": JSON.stringify(plugin.info.stage_name),\r\n            \"responses\": JSON.stringify(question_data),\r\n            \"timestamp\": JSON.stringify(timestamp_data),\r\n            \"question_order\": JSON.stringify(question_order),\r\n            \"events\": JSON.stringify(response.trial_events)\r\n          };\r\n  \r\n          display_element.innerHTML = '';\r\n          $('.navbar').remove();\r\n  \r\n          // next trial\r\n          jsPsych.finishTrial(trial_data);\r\n        } else {\r\n          MicroModal.show('modal-1');\r\n        }\r\n  \r\n      });\r\n  \r\n      var startTime = performance.now();\r\n  \r\n      // start the response listener\r\n      var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n      var clickListener = jsPsych.pluginAPI.getMouseResponse({\r\n        callback_function: after_response,\r\n        valid_responses: jsPsych.ALL_KEYS,\r\n        rt_method: 'performance',\r\n        persist: true,\r\n        allow_held_key: false\r\n      });\r\n    };\r\n  \r\n    return plugin;\r\n  })();\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-YIAT.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-survey-text.js":
/*!**********************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-survey-text.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins['survey-text'] = (function() {\n\n  var plugin = {};\n\n  plugin.info = {\n    name: 'survey-text',\n    description: '',\n    parameters: {\n      questions: {\n        type: jsPsych.plugins.parameterType.COMPLEX,\n        array: true,\n        pretty_name: 'Questions',\n        default: undefined,\n        nested: {\n          prompt: {\n            type: jsPsych.plugins.parameterType.STRING,\n            pretty_name: 'Prompt',\n            default: undefined,\n            description: 'Prompt for the subject to response'\n          },\n          placeholder: {\n            type: jsPsych.plugins.parameterType.STRING,\n            pretty_name: 'Value',\n            default: \"\",\n            description: 'Placeholder text in the textfield.'\n          },\n          rows: {\n            type: jsPsych.plugins.parameterType.INT,\n            pretty_name: 'Rows',\n            default: 1,\n            description: 'The number of rows for the response text box.'\n          },\n          columns: {\n            type: jsPsych.plugins.parameterType.INT,\n            pretty_name: 'Columns',\n            default: 40,\n            description: 'The number of columns for the response text box.'\n          },\n          required: {\n            type: jsPsych.plugins.parameterType.BOOL,\n            pretty_name: 'Required',\n            default: false,\n            description: 'Require a response'\n          },\n          name: {\n            type: jsPsych.plugins.parameterType.STRING,\n            pretty_name: 'Question Name',\n            default: '',\n            description: 'Controls the name of data values associated with this question'\n          }\n        }\n      },\n      preamble: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Preamble',\n        default: null,\n        description: 'HTML formatted string to display at the top of the page above all the questions.'\n      },\n      button_label: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Button label',\n        default:  'Continue',\n        description: 'The text that appears on the button to finish the trial.'\n      }\n    }\n  }\n\n  plugin.trial = function(display_element, trial) {\n\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].rows == 'undefined') {\n        trial.questions[i].rows = 1;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].columns == 'undefined') {\n        trial.questions[i].columns = 40;\n      }\n    }\n    for (var i = 0; i < trial.questions.length; i++) {\n      if (typeof trial.questions[i].value == 'undefined') {\n        trial.questions[i].value = \"\";\n      }\n    }\n\n    var html = '';\n    // show preamble text\n    if(trial.preamble !== null){\n      html += '<div id=\"jspsych-survey-text-preamble\" class=\"jspsych-survey-text-preamble\">'+trial.preamble+'</div>';\n    }\n    // start form\n    html += '<form id=\"jspsych-survey-text-form\">'\n\n    // generate question order\n    var question_order = [];\n    for(var i=0; i<trial.questions.length; i++){\n      question_order.push(i);\n    }\n    if(trial.randomize_question_order){\n      question_order = jsPsych.randomization.shuffle(question_order);\n    }\n\n    // add questions\n    for (var i = 0; i < trial.questions.length; i++) {\n      var question = trial.questions[question_order[i]];\n      var question_index = question_order[i];\n      html += '<div id=\"jspsych-survey-text-'+question_index+'\" class=\"jspsych-survey-text-question\" style=\"margin: 2em 0em;\">';\n      html += '<p class=\"jspsych-survey-text\">' + question.prompt + '</p>';\n      var autofocus = i == 0 ? \"autofocus\" : \"\";\n      var req = question.required ? \"required\" : \"\";\n      if(question.rows == 1){\n        html += '<input type=\"text\" id=\"input-'+question_index+'\"  name=\"#jspsych-survey-text-response-' + question_index + '\" data-name=\"'+question.name+'\" size=\"'+question.columns+'\" '+autofocus+' '+req+' placeholder=\"'+question.placeholder+'\"></input>';\n      } else {\n        html += '<textarea id=\"input-'+question_index+'\" name=\"#jspsych-survey-text-response-' + question_index + '\" data-name=\"'+question.name+'\" cols=\"' + question.columns + '\" rows=\"' + question.rows + '\" '+autofocus+' '+req+' placeholder=\"'+question.placeholder+'\"></textarea>';\n      }\n      html += '</div>';\n    }\n\n    // add submit button\n    html += '<input type=\"submit\" id=\"jspsych-survey-text-next\" class=\"jspsych-btn jspsych-survey-text\" value=\"'+trial.button_label+'\"></input>';\n\n    html += '</form>'\n    display_element.innerHTML = html;\n\n    // backup in case autofocus doesn't work\n    display_element.querySelector('#input-'+question_order[0]).focus();\n\n    display_element.querySelector('#jspsych-survey-text-form').addEventListener('submit', function(e) {\n      e.preventDefault();\n      // measure response time\n      var endTime = performance.now();\n      var response_time = endTime - startTime;\n\n      // create object to hold responses\n      var question_data = {};\n      \n      for(var index=0; index < trial.questions.length; index++){\n        var id = \"Q\" + index;\n        var q_element = document.querySelector('#jspsych-survey-text-'+index).querySelector('textarea, input'); \n        var val = q_element.value;\n        var name = q_element.attributes['data-name'].value;\n        if(name == ''){\n          name = id;\n        }        \n        var obje = {};\n        obje[name] = val;\n        Object.assign(question_data, obje);\n      }\n      // save data\n      var trialdata = {\n        \"rt\": response_time,\n        \"responses\": JSON.stringify(question_data)\n      };\n\n      display_element.innerHTML = '';\n\n      // next trial\n      jsPsych.finishTrial(trialdata);\n    });\n\n    var startTime = performance.now();\n  };\n\n  return plugin;\n})();\n\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-survey-text.js?");

/***/ }),

/***/ "./static/js/jspsych/plugins/jspsych-transfer-test.js":
/*!************************************************************!*\
  !*** ./static/js/jspsych/plugins/jspsych-transfer-test.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("jsPsych.plugins[\"transfer-test\"] = (function() {\n\n  var plugin = {};\n\n  plugin.info = {\n    name: 'transfer-test',\n    description: '',\n    parameters: {\n      stimulus: {\n        type: jsPsych.plugins.parameterType.HTML_STRING,\n        pretty_name: 'Stimulus',\n        default: undefined,\n        description: 'The HTML string to be displayed'\n      },\n      choices: {\n        type: jsPsych.plugins.parameterType.KEYCODE,\n        array: true,\n        pretty_name: 'Choices',\n        default: jsPsych.ALL_KEYS,\n        description: 'The keys the subject is allowed to press to respond to the stimulus.'\n      },\n      prompt: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Prompt',\n        default: null,\n        description: 'Any content here will be displayed below the stimulus.'\n      },\n      stimulus_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Stimulus duration',\n        default: null,\n        description: 'How long to hide the stimulus.'\n      },\n      trial_duration: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Trial duration',\n        default: null,\n        description: 'How long to show trial before it ends.'\n      },\n      trial_latency: {\n        type: jsPsych.plugins.parameterType.INT,\n        pretty_name: 'Trial latency',\n        default: null,\n        description: 'How long to show trial before key press it ends.'\n      },\n      response_ends_trial: {\n        type: jsPsych.plugins.parameterType.BOOL,\n        pretty_name: 'Response ends trial',\n        default: false,\n        description: 'If true, trial will end when subject makes a response.'\n      },\n      stage_name: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Stage Name',\n        default: null,\n        description: 'Specific name of the current stage.'\n      },\n      event_type: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event type',\n        default: null,\n        description: 'Event type'\n      },\n      event_raw_details: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event raw details',\n        default: null,\n        description: 'Event raw details'\n      },\n      event_converted_details: {\n        type: jsPsych.plugins.parameterType.STRING,\n        pretty_name: 'Event converted details',\n        default: null,\n        description: 'Event converted details'\n      }\n\n    }\n  }\n\n  plugin.trial = function(display_element, trial) {\n\n    var html = \"\";\n\n    // store response\n    var response = {\n      trial_events: []\n    };\n\n    var reps_counter = 0;\n\n    var timestamp_onload = jsPsych.totalTime();\n\n     // inject CSS for trial\n     html += '<style id=\"key-testing\">' +\n      \".vending-machine { margin-top: 5rem; }\" +\n      \".jspsych-content { margin: 0; }\" +\n      \".jspsych-content-wrapper { display: flex; justify-content: center; }\";\n     html += '</style>';\n\n    html += `<div id=\"jspsych-stimulus\">\n      <svg class=\"vending-machine\"  viewBox=\"0 0 253 459\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect x=\"27\" y=\"20\" width=\"203\" height=\"359\" fill=\"#000\"/>\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M253 0V440.506H209.527V459H44.6212V440.506H0V0H253ZM222 279H32V363H222V279ZM59.957 282.531L133.253 309.209L118.546 349.616L45.2501 322.938L59.957 282.531ZM86 210H32V256H86V210ZM154 210H100V256H154V210ZM222 210H168V256H222V210ZM86 148H32V194H86V148ZM154 148H100V194H154V148ZM222 148H168V194H222V148ZM86 86H32V132H86V86ZM154 86H100V132H154V86ZM222 86H168V132H222V86ZM86 24H32V70H86V24ZM154 24H100V70H154V24ZM222 24H168V70H222V24Z\" fill=\"white\"/>\n      </svg>\n    </div>`;\n\n\n    // draw\n    display_element.innerHTML = html;\n\n    function change_colors (notes) {\n      var i = 0;\n      update_color();\n      function update_color() {\n          if (i < notes.length) {\n              var color = notes[i];\n              var duration = 0;\n              if(color === 'white') {\n                $('.vending-machine rect').css({ fill: '#000' });\n                duration = trial.transfer_test_white_duration;\n                response.trial_events.push({\n                  \"event_type\": \"image appears\",\n                  \"event_raw_details\": color + \" vending machine\",\n                  \"event_converted_details\": color + \" vending machine appears\",\n                  \"timestamp\": jsPsych.totalTime()\n                });\n              } else {\n                $('.vending-machine rect').css({ fill: color });\n                duration = trial.transfer_test_color_duration;\n                response.trial_events.push({\n                  \"event_type\": \"image appears\",\n                  \"event_raw_details\": color + \" vending machine\",\n                  \"event_converted_details\": color + \" vending machine appears\",\n                  \"timestamp\": jsPsych.totalTime()\n                });\n              }\n              i++;\n              setTimeout(update_color, duration);\n          } else {\n            reps_counter++;\n            if(trial.sequence_reps !== reps_counter) {\n              change_colors(trial.transfer_test_color_consistency);\n            } else {\n              end_trial();\n            }\n            \n          }\n      }\n    }\n\n    change_colors(trial.transfer_test_color_consistency);\n\n    // function to end trial when it is time\n    var end_trial = function() {\n\n      // kill any remaining setTimeout handlers\n      jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== 'undefined') {\n        jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n        jsPsych.pluginAPI.cancelClickResponse(clickListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        \"stage_name\": JSON.stringify(trial.stage_name),\n        \"events\": JSON.stringify(response.trial_events)\n      };\n\n      // clear the display\n      display_element.innerHTML = '';\n\n      // move on to the next trial\n      jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = function(info) {\n\n      function machine_tilt() {\n        if(info.key === left_tilt) {\n            $(\".vending-machine\").css({\n                \"transform\":  \"rotate(\" + shake_left_rotate + \"deg) translateX(\" + shake_left_translateX + \"%)\",\n                \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            });\n  \n            jsPsych.pluginAPI.setTimeout(function(){ $(\".vending-machine\").css({\n              \"transform\":  \"rotate(0deg) translateX(0%)\",\n              \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            }); }, shake_return_time);\n            \n            response.trial_events.push({\n              \"event_type\": \"left tilt\",\n              \"event_raw_details\": shake_left_translateX + \"%, \" + shake_left_rotate + \"deg\",\n              \"event_converted_details\": \"vending machine was tilted left \" + shake_left_translateX + \"%, \" + shake_left_rotate + \"deg\",\n              \"timestamp\": jsPsych.totalTime(),\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n        } else if (info.key === right_tilt) {\n            $(\".vending-machine\").css({\n                \"transform\":  \"rotate(\" + shake_right_rotate + \"deg) translateX(\" + shake_right_translateX + \"%)\",\n                \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            });\n  \n            jsPsych.pluginAPI.setTimeout(function(){ $(\".vending-machine\").css({\n              \"transform\": \"rotate(0deg) translateX(0%)\",\n              \"transition\": \"all \" + shake_transition + \"s cubic-bezier(0.65, 0.05, 0.36, 1)\"\n            }); }, shake_return_time);\n            \n            response.trial_events.push({\n              \"event_type\": \"right tilt\",\n              \"event_raw_details\": shake_right_translateX + \"%, \" + shake_right_rotate + \"deg\",\n              \"event_converted_details\": \"vending machine was tilted right \" + shake_right_translateX + \"%, \" + shake_right_rotate + \"deg\",\n              \"timestamp\": jsPsych.totalTime(),\n              \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n            });\n        }\n    }\n  \n\n\n      if(info.key_release === undefined) {\n        machine_tilt();\n        response.trial_events.push({\n          \"event_type\": \"key press\",\n          \"event_raw_details\": info.key,\n          \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key) + ' key pressed',\n          \"timestamp\": jsPsych.totalTime(),\n          \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n        });\n      } else {\n          response.trial_events.push({\n            \"event_type\": \"key release\",\n            \"event_raw_details\": info.key_release,\n            \"event_converted_details\": jsPsych.pluginAPI.convertKeyCodeToKeyCharacter(info.key_release) + ' key released',\n            \"timestamp\": jsPsych.totalTime(),\n            \"time_elapsed\": jsPsych.totalTime() - timestamp_onload\n          });\n          if (trial.response_ends_trial) {\n            end_trial();\n          }\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != jsPsych.NO_KEYS) {\n        var keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'performance',\n          persist: true,\n          allow_held_key: false\n        });\n        var clickListener = jsPsych.pluginAPI.getMouseResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: 'date',\n          persist: true,\n          allow_held_key: false\n        });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        display_element.querySelector('#jspsych-html-keyboard-response-stimulus').style.visibility = 'hidden';\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        end_trial();\n      }, trial.trial_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_latency !== null) {\n      jsPsych.pluginAPI.setTimeout(function() {\n        trial.response_ends_trial = true;\n      }, trial.trial_latency);\n    }\n\n  };\n\n  return plugin;\n})();\n\n\n//# sourceURL=webpack:///./static/js/jspsych/plugins/jspsych-transfer-test.js?");

/***/ }),

/***/ "./static/js/utils.js":
/*!****************************!*\
  !*** ./static/js/utils.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var micromodal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micromodal */ \"./node_modules/micromodal/dist/micromodal.es.js\");\n\n\nfunction AssertException(message) { this.message = message; }\nAssertException.prototype.toString = function () {\n\treturn 'AssertException: ' + this.message;\n};\n\nfunction assert(exp, message) {\n\tif (!exp) {\n\t\tthrow new AssertException(message);\n\t}\n}\n\n// Mean of booleans (true==1; false==0)\nfunction boolpercent(arr) {\n\tvar count = 0;\n\tfor (var i=0; i<arr.length; i++) {\n\t\tif (arr[i]) { count++; } \n\t}\n\treturn 100* count / arr.length;\n}\n\n\n// solving scroll-blocking 'touchstart' event\n(function () {\n\tif (typeof EventTarget !== \"undefined\") {\n\t\tlet func = EventTarget.prototype.addEventListener;\n\t\tEventTarget.prototype.addEventListener = function (type, fn, capture) {\n\t\t\tthis.func = func;\n\t\t\tif(typeof capture !== \"boolean\"){\n\t\t\t\tcapture = capture || {};\n\t\t\t\tcapture.passive = false;\n\t\t\t}\n\t\t\tthis.func(type, fn, capture);\n\t\t};\n\t};\n  }());\n\n\n  micromodal__WEBPACK_IMPORTED_MODULE_0__[\"default\"].init({\n\tdisableFocus: false\n  });\n\n//# sourceURL=webpack:///./static/js/utils.js?");

/***/ }),

/***/ 0:

  !*** multi ./static/js/jspsych/plugins/jspsych-key-testing.js ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-learning-vvr.js ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-left.js ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-right.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRM.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-GAD-7.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ISI.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PID-5-BF.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PHQ-9.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PTSD.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-RAADS.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PRIME-R.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-OCI-R.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-EAT-26.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-LSAS.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-MOVES.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DEMOGRAPHICS.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRS-5.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-YIAT.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DASS-21.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-AUDIT.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SMOKING-STATUS.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-FTND.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PGSI.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SDS.js ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ICAR.js ./static/js/jspsych/plugins/jspsych-food-hunger-questions.js ./static/js/jspsych/plugins/jspsych-transfer-test.js ./static/js/jspsych/plugins/jspsych-pav-condition.js ./static/js/jspsych/plugins/jspsych-deval-video.js ./static/js/jspsych/plugins/jspsych-survey-multi-choice.js ./static/js/jspsych/plugins/jspsych-close-hit.js ./static/js/jspsych/plugins/jspsych-html-keyboard-response.js ./static/js/jspsych/plugins/jspsych-survey-text.js ./static/js/utils.js ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-key-testing.js */\"./static/js/jspsych/plugins/jspsych-key-testing.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-learning-vvr.js */\"./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-learning-vvr.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-left.js */\"./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-left.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-right.js */\"./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-right.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRM.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRM.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-GAD-7.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-GAD-7.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ISI.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ISI.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PID-5-BF.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PID-5-BF.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PHQ-9.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PHQ-9.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PTSD.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PTSD.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-RAADS.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-RAADS.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PRIME-R.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PRIME-R.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-OCI-R.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-OCI-R.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-EAT-26.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-EAT-26.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-LSAS.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-LSAS.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-MOVES.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-MOVES.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DEMOGRAPHICS.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DEMOGRAPHICS.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRS-5.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRS-5.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-YIAT.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-YIAT.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DASS-21.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DASS-21.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-AUDIT.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-AUDIT.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SMOKING-STATUS.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SMOKING-STATUS.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-FTND.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-FTND.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PGSI.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PGSI.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SDS.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SDS.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ICAR.js */\"./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ICAR.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-food-hunger-questions.js */\"./static/js/jspsych/plugins/jspsych-food-hunger-questions.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-transfer-test.js */\"./static/js/jspsych/plugins/jspsych-transfer-test.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-pav-condition.js */\"./static/js/jspsych/plugins/jspsych-pav-condition.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-deval-video.js */\"./static/js/jspsych/plugins/jspsych-deval-video.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-multi-choice.js */\"./static/js/jspsych/plugins/jspsych-survey-multi-choice.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-close-hit.js */\"./static/js/jspsych/plugins/jspsych-close-hit.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-html-keyboard-response.js */\"./static/js/jspsych/plugins/jspsych-html-keyboard-response.js\");\n__webpack_require__(/*! ./static/js/jspsych/plugins/jspsych-survey-text.js */\"./static/js/jspsych/plugins/jspsych-survey-text.js\");\nmodule.exports = __webpack_require__(/*! ./static/js/utils.js */\"./static/js/utils.js\");\n\n\n//# sourceURL=webpack:///multi_./static/js/jspsych/plugins/jspsych-key-testing.js_./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-learning-vvr.js_./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-left.js_./static/js/jspsych/plugins/jspsych-learning-vvr/jspsych-vvr-questions-right.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRM.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-GAD-7.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ISI.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PID-5-BF.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PHQ-9.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PTSD.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-RAADS.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PRIME-R.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-OCI-R.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-EAT-26.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-LSAS.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-MOVES.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DEMOGRAPHICS.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ASRS-5.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-YIAT.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-DASS-21.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-AUDIT.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SMOKING-STATUS.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-FTND.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-PGSI.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-SDS.js_./static/js/jspsych/plugins/jspsych-survey-questionnaire/jspsych-ICAR.js_./static/js/jspsych/plugins/jspsych-food-hunger-questions.js_./static/js/jspsych/plugins/jspsych-transfer-test.js_./static/js/jspsych/plugins/jspsych-pav-condition.js_./static/js/jspsych/plugins/jspsych-deval-video.js_./static/js/jspsych/plugins/jspsych-survey-multi-choice.js_./static/js/jspsych/plugins/jspsych-close-hit.js_./static/js/jspsych/plugins/jspsych-html-keyboard-response.js_./static/js/jspsych/plugins/jspsych-survey-text.js_./static/js/utils.js?");

/***/ })

/******/ });